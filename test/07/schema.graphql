# source: http://localhost:4466
# timestamp: Fri Jul 13 2018 05:43:50 GMT-0700 (PDT)

type Activity implements Node {
  id: ID!
  name: String!
  definition(where: ActivityDefinitionWhereInput): ActivityDefinition!
  detailInstance: ID
  duration(where: PhysicalQuantityWhereInput): PhysicalQuantity
  responsibleOrganization(where: OrganizationWhereInput): Organization
  nptLevel: Int
  phase: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type ActivityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreateInput {
  name: String!
  detailInstance: ID
  nptLevel: Int
  phase: String
  definition: ActivityDefinitionCreateOneInput!
  duration: PhysicalQuantityCreateOneInput
  responsibleOrganization: OrganizationCreateOneInput
  events: EventCreateManyWithoutActivityInput
}

input ActivityCreateOneWithoutEventsInput {
  create: ActivityCreateWithoutEventsInput
  connect: ActivityWhereUniqueInput
}

input ActivityCreateWithoutEventsInput {
  name: String!
  detailInstance: ID
  nptLevel: Int
  phase: String
  definition: ActivityDefinitionCreateOneInput!
  duration: PhysicalQuantityCreateOneInput
  responsibleOrganization: OrganizationCreateOneInput
}

type ActivityDefinition implements Node {
  id: ID!
  name: String!
  detailKindName: String
  externalReference: String
}

"""A connection to a list of items."""
type ActivityDefinitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActivityDefinitionEdge]!
  aggregate: AggregateActivityDefinition!
}

input ActivityDefinitionCreateInput {
  name: String!
  detailKindName: String
  externalReference: String
}

input ActivityDefinitionCreateOneInput {
  create: ActivityDefinitionCreateInput
  connect: ActivityDefinitionWhereUniqueInput
}

"""An edge in a connection."""
type ActivityDefinitionEdge {
  """The item at the end of the edge."""
  node: ActivityDefinition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActivityDefinitionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  detailKindName_ASC
  detailKindName_DESC
  externalReference_ASC
  externalReference_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActivityDefinitionPreviousValues {
  id: ID!
  name: String!
  detailKindName: String
  externalReference: String
}

type ActivityDefinitionSubscriptionPayload {
  mutation: MutationType!
  node: ActivityDefinition
  updatedFields: [String!]
  previousValues: ActivityDefinitionPreviousValues
}

input ActivityDefinitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivityDefinitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivityDefinitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivityDefinitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActivityDefinitionWhereInput
}

input ActivityDefinitionUpdateDataInput {
  name: String
  detailKindName: String
  externalReference: String
}

input ActivityDefinitionUpdateInput {
  name: String
  detailKindName: String
  externalReference: String
}

input ActivityDefinitionUpdateOneInput {
  create: ActivityDefinitionCreateInput
  connect: ActivityDefinitionWhereUniqueInput
  delete: Boolean
  update: ActivityDefinitionUpdateDataInput
  upsert: ActivityDefinitionUpsertNestedInput
}

input ActivityDefinitionUpsertNestedInput {
  update: ActivityDefinitionUpdateDataInput!
  create: ActivityDefinitionCreateInput!
}

input ActivityDefinitionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivityDefinitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivityDefinitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivityDefinitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  detailKindName: String

  """All values that are not equal to given value."""
  detailKindName_not: String

  """All values that are contained in given list."""
  detailKindName_in: [String!]

  """All values that are not contained in given list."""
  detailKindName_not_in: [String!]

  """All values less than the given value."""
  detailKindName_lt: String

  """All values less than or equal the given value."""
  detailKindName_lte: String

  """All values greater than the given value."""
  detailKindName_gt: String

  """All values greater than or equal the given value."""
  detailKindName_gte: String

  """All values containing the given string."""
  detailKindName_contains: String

  """All values not containing the given string."""
  detailKindName_not_contains: String

  """All values starting with the given string."""
  detailKindName_starts_with: String

  """All values not starting with the given string."""
  detailKindName_not_starts_with: String

  """All values ending with the given string."""
  detailKindName_ends_with: String

  """All values not ending with the given string."""
  detailKindName_not_ends_with: String
  externalReference: String

  """All values that are not equal to given value."""
  externalReference_not: String

  """All values that are contained in given list."""
  externalReference_in: [String!]

  """All values that are not contained in given list."""
  externalReference_not_in: [String!]

  """All values less than the given value."""
  externalReference_lt: String

  """All values less than or equal the given value."""
  externalReference_lte: String

  """All values greater than the given value."""
  externalReference_gt: String

  """All values greater than or equal the given value."""
  externalReference_gte: String

  """All values containing the given string."""
  externalReference_contains: String

  """All values not containing the given string."""
  externalReference_not_contains: String

  """All values starting with the given string."""
  externalReference_starts_with: String

  """All values not starting with the given string."""
  externalReference_not_starts_with: String

  """All values ending with the given string."""
  externalReference_ends_with: String

  """All values not ending with the given string."""
  externalReference_not_ends_with: String
  _MagicalBackRelation_ActivityToActivityDefinition_every: ActivityWhereInput
  _MagicalBackRelation_ActivityToActivityDefinition_some: ActivityWhereInput
  _MagicalBackRelation_ActivityToActivityDefinition_none: ActivityWhereInput
}

input ActivityDefinitionWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type ActivityEdge {
  """The item at the end of the edge."""
  node: Activity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  detailInstance_ASC
  detailInstance_DESC
  nptLevel_ASC
  nptLevel_DESC
  phase_ASC
  phase_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActivityPreviousValues {
  id: ID!
  name: String!
  detailInstance: ID
  nptLevel: Int
  phase: String
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
}

input ActivityUpdateInput {
  name: String
  detailInstance: ID
  nptLevel: Int
  phase: String
  definition: ActivityDefinitionUpdateOneInput
  duration: PhysicalQuantityUpdateOneInput
  responsibleOrganization: OrganizationUpdateOneInput
  events: EventUpdateManyWithoutActivityInput
}

input ActivityUpdateOneWithoutEventsInput {
  create: ActivityCreateWithoutEventsInput
  connect: ActivityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ActivityUpdateWithoutEventsDataInput
  upsert: ActivityUpsertWithoutEventsInput
}

input ActivityUpdateWithoutEventsDataInput {
  name: String
  detailInstance: ID
  nptLevel: Int
  phase: String
  definition: ActivityDefinitionUpdateOneInput
  duration: PhysicalQuantityUpdateOneInput
  responsibleOrganization: OrganizationUpdateOneInput
}

input ActivityUpsertWithoutEventsInput {
  update: ActivityUpdateWithoutEventsDataInput!
  create: ActivityCreateWithoutEventsInput!
}

input ActivityWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivityWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  detailInstance: ID

  """All values that are not equal to given value."""
  detailInstance_not: ID

  """All values that are contained in given list."""
  detailInstance_in: [ID!]

  """All values that are not contained in given list."""
  detailInstance_not_in: [ID!]

  """All values less than the given value."""
  detailInstance_lt: ID

  """All values less than or equal the given value."""
  detailInstance_lte: ID

  """All values greater than the given value."""
  detailInstance_gt: ID

  """All values greater than or equal the given value."""
  detailInstance_gte: ID

  """All values containing the given string."""
  detailInstance_contains: ID

  """All values not containing the given string."""
  detailInstance_not_contains: ID

  """All values starting with the given string."""
  detailInstance_starts_with: ID

  """All values not starting with the given string."""
  detailInstance_not_starts_with: ID

  """All values ending with the given string."""
  detailInstance_ends_with: ID

  """All values not ending with the given string."""
  detailInstance_not_ends_with: ID
  nptLevel: Int

  """All values that are not equal to given value."""
  nptLevel_not: Int

  """All values that are contained in given list."""
  nptLevel_in: [Int!]

  """All values that are not contained in given list."""
  nptLevel_not_in: [Int!]

  """All values less than the given value."""
  nptLevel_lt: Int

  """All values less than or equal the given value."""
  nptLevel_lte: Int

  """All values greater than the given value."""
  nptLevel_gt: Int

  """All values greater than or equal the given value."""
  nptLevel_gte: Int
  phase: String

  """All values that are not equal to given value."""
  phase_not: String

  """All values that are contained in given list."""
  phase_in: [String!]

  """All values that are not contained in given list."""
  phase_not_in: [String!]

  """All values less than the given value."""
  phase_lt: String

  """All values less than or equal the given value."""
  phase_lte: String

  """All values greater than the given value."""
  phase_gt: String

  """All values greater than or equal the given value."""
  phase_gte: String

  """All values containing the given string."""
  phase_contains: String

  """All values not containing the given string."""
  phase_not_contains: String

  """All values starting with the given string."""
  phase_starts_with: String

  """All values not starting with the given string."""
  phase_not_starts_with: String

  """All values ending with the given string."""
  phase_ends_with: String

  """All values not ending with the given string."""
  phase_not_ends_with: String
  definition: ActivityDefinitionWhereInput
  duration: PhysicalQuantityWhereInput
  responsibleOrganization: OrganizationWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input ActivityWhereUniqueInput {
  id: ID
}

type AggregateActivity {
  count: Int!
}

type AggregateActivityDefinition {
  count: Int!
}

type AggregateBallooningProblemDetail {
  count: Int!
}

type AggregateCasingActivityDetail {
  count: Int!
}

type AggregateCause {
  count: Int!
}

type AggregateCementingActivityDetail {
  count: Int!
}

type AggregateChangeMudWeightActivityDetail {
  count: Int!
}

type AggregateCirculatingActivityDetail {
  count: Int!
}

type AggregateDocumentation {
  count: Int!
}

type AggregateDrillingActivityDetail {
  count: Int!
}

type AggregateEquipment {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateEventReporterDefinition {
  count: Int!
}

type AggregateField {
  count: Int!
}

type AggregateFishingProblemDetail {
  count: Int!
}

type AggregateKickProblemDetail {
  count: Int!
}

type AggregateLoggingActivityDetail {
  count: Int!
}

type AggregateLostCirculationProblemDetail {
  count: Int!
}

type AggregateMechanism {
  count: Int!
}

type AggregateMyOtherThing {
  count: Int!
}

type AggregateMyThing {
  count: Int!
}

type AggregateObservation {
  count: Int!
}

type AggregateObservationDefinition {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregatePerforatingActivityDetail {
  count: Int!
}

type AggregatePerson {
  count: Int!
}

type AggregatePhysicalQuantity {
  count: Int!
}

type AggregateProblem {
  count: Int!
}

type AggregateProblemDefinition {
  count: Int!
}

type AggregateR_ADDITIVE_TYPE {
  count: Int!
}

type AggregateR_CEMENT_TYPE {
  count: Int!
}

type AggregateR_COMPLETION_METHOD {
  count: Int!
}

type AggregateR_COMPLETION_TYPE {
  count: Int!
}

type AggregateR_DOCUMENT_TYPE {
  count: Int!
}

type AggregateR_DRILL_BIT_TYPE {
  count: Int!
}

type AggregateR_DRILL_TOOL_TYPE {
  count: Int!
}

type AggregateR_DRILLING_MEDIA {
  count: Int!
}

type AggregateR_LINER_TYPE {
  count: Int!
}

type AggregateR_LITH_ROCK_TYPE {
  count: Int!
}

type AggregateR_LITHOLOGY {
  count: Int!
}

type AggregateR_LOG_TOOL_TYPE {
  count: Int!
}

type AggregateR_PROPPANT_TYPE {
  count: Int!
}

type AggregateR_RIG_BLOWOUT_PREVENTER {
  count: Int!
}

type AggregateR_RIG_TYPE {
  count: Int!
}

type AggregateR_SOURCE {
  count: Int!
}

type AggregateR_WELL_CLASS {
  count: Int!
}

type AggregateR_WELL_DRILL_OP_TYPE {
  count: Int!
}

type AggregateR_WELL_STATUS {
  count: Int!
}

type AggregateR_WELL_TEST_TYPE {
  count: Int!
}

type AggregateRig {
  count: Int!
}

type AggregateRiggingActivityDetail {
  count: Int!
}

type AggregateStuckPipeProblemDetail {
  count: Int!
}

type AggregateSurfaceForm {
  count: Int!
}

type AggregateTestingActivityDetail {
  count: Int!
}

type AggregateTrippingActivityDetail {
  count: Int!
}

type AggregateUS_OFFSHORE_LEASE {
  count: Int!
}

type AggregateWaitingOnProblemDetail {
  count: Int!
}

type AggregateWell {
  count: Int!
}

type AggregateWellLifecycle {
  count: Int!
}

type AggregateWellSourceDetail {
  count: Int!
}

type BallooningProblemDetail implements Node {
  id: ID!
  name: String!
  depth(where: PhysicalQuantityWhereInput): PhysicalQuantity
  volume(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type BallooningProblemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BallooningProblemDetailEdge]!
  aggregate: AggregateBallooningProblemDetail!
}

input BallooningProblemDetailCreateInput {
  name: String!
  depth: PhysicalQuantityCreateOneInput
  volume: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type BallooningProblemDetailEdge {
  """The item at the end of the edge."""
  node: BallooningProblemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BallooningProblemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BallooningProblemDetailPreviousValues {
  id: ID!
  name: String!
}

type BallooningProblemDetailSubscriptionPayload {
  mutation: MutationType!
  node: BallooningProblemDetail
  updatedFields: [String!]
  previousValues: BallooningProblemDetailPreviousValues
}

input BallooningProblemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BallooningProblemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BallooningProblemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BallooningProblemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BallooningProblemDetailWhereInput
}

input BallooningProblemDetailUpdateInput {
  name: String
  depth: PhysicalQuantityUpdateOneInput
  volume: PhysicalQuantityUpdateOneInput
}

input BallooningProblemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [BallooningProblemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [BallooningProblemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BallooningProblemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  depth: PhysicalQuantityWhereInput
  volume: PhysicalQuantityWhereInput
}

input BallooningProblemDetailWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type CasingActivityDetail implements Node {
  id: ID!
  name: String!
  casingSize(where: PhysicalQuantityWhereInput): PhysicalQuantity
  holeSize(where: PhysicalQuantityWhereInput): PhysicalQuantity
  from(where: PhysicalQuantityWhereInput): PhysicalQuantity
  to(where: PhysicalQuantityWhereInput): PhysicalQuantity
  weight(where: PhysicalQuantityWhereInput): PhysicalQuantity
  grade: String
  linerTestPressure(where: PhysicalQuantityWhereInput): PhysicalQuantity
  shoeTestPressure(where: PhysicalQuantityWhereInput): PhysicalQuantity
  cementVolumePumped(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type CasingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CasingActivityDetailEdge]!
  aggregate: AggregateCasingActivityDetail!
}

input CasingActivityDetailCreateInput {
  name: String!
  grade: String
  casingSize: PhysicalQuantityCreateOneInput
  holeSize: PhysicalQuantityCreateOneInput
  from: PhysicalQuantityCreateOneInput
  to: PhysicalQuantityCreateOneInput
  weight: PhysicalQuantityCreateOneInput
  linerTestPressure: PhysicalQuantityCreateOneInput
  shoeTestPressure: PhysicalQuantityCreateOneInput
  cementVolumePumped: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type CasingActivityDetailEdge {
  """The item at the end of the edge."""
  node: CasingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CasingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  grade_ASC
  grade_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CasingActivityDetailPreviousValues {
  id: ID!
  name: String!
  grade: String
}

type CasingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: CasingActivityDetail
  updatedFields: [String!]
  previousValues: CasingActivityDetailPreviousValues
}

input CasingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CasingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CasingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CasingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CasingActivityDetailWhereInput
}

input CasingActivityDetailUpdateInput {
  name: String
  grade: String
  casingSize: PhysicalQuantityUpdateOneInput
  holeSize: PhysicalQuantityUpdateOneInput
  from: PhysicalQuantityUpdateOneInput
  to: PhysicalQuantityUpdateOneInput
  weight: PhysicalQuantityUpdateOneInput
  linerTestPressure: PhysicalQuantityUpdateOneInput
  shoeTestPressure: PhysicalQuantityUpdateOneInput
  cementVolumePumped: PhysicalQuantityUpdateOneInput
}

input CasingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [CasingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [CasingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CasingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  grade: String

  """All values that are not equal to given value."""
  grade_not: String

  """All values that are contained in given list."""
  grade_in: [String!]

  """All values that are not contained in given list."""
  grade_not_in: [String!]

  """All values less than the given value."""
  grade_lt: String

  """All values less than or equal the given value."""
  grade_lte: String

  """All values greater than the given value."""
  grade_gt: String

  """All values greater than or equal the given value."""
  grade_gte: String

  """All values containing the given string."""
  grade_contains: String

  """All values not containing the given string."""
  grade_not_contains: String

  """All values starting with the given string."""
  grade_starts_with: String

  """All values not starting with the given string."""
  grade_not_starts_with: String

  """All values ending with the given string."""
  grade_ends_with: String

  """All values not ending with the given string."""
  grade_not_ends_with: String
  casingSize: PhysicalQuantityWhereInput
  holeSize: PhysicalQuantityWhereInput
  from: PhysicalQuantityWhereInput
  to: PhysicalQuantityWhereInput
  weight: PhysicalQuantityWhereInput
  linerTestPressure: PhysicalQuantityWhereInput
  shoeTestPressure: PhysicalQuantityWhereInput
  cementVolumePumped: PhysicalQuantityWhereInput
}

input CasingActivityDetailWhereUniqueInput {
  id: ID
}

type Cause implements Node {
  id: ID!
  name: String!
  definition: String
  source(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type CauseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CauseEdge]!
  aggregate: AggregateCause!
}

input CauseCreateInput {
  name: String!
  definition: String
  source: R_SOURCECreateOneInput
}

input CauseCreateManyInput {
  create: [CauseCreateInput!]
  connect: [CauseWhereUniqueInput!]
}

"""An edge in a connection."""
type CauseEdge {
  """The item at the end of the edge."""
  node: Cause!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CauseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  definition_ASC
  definition_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CausePreviousValues {
  id: ID!
  name: String!
  definition: String
}

type CauseSubscriptionPayload {
  mutation: MutationType!
  node: Cause
  updatedFields: [String!]
  previousValues: CausePreviousValues
}

input CauseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CauseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CauseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CauseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CauseWhereInput
}

input CauseUpdateDataInput {
  name: String
  definition: String
  source: R_SOURCEUpdateOneInput
}

input CauseUpdateInput {
  name: String
  definition: String
  source: R_SOURCEUpdateOneInput
}

input CauseUpdateManyInput {
  create: [CauseCreateInput!]
  connect: [CauseWhereUniqueInput!]
  disconnect: [CauseWhereUniqueInput!]
  delete: [CauseWhereUniqueInput!]
  update: [CauseUpdateWithWhereUniqueNestedInput!]
  upsert: [CauseUpsertWithWhereUniqueNestedInput!]
}

input CauseUpdateWithWhereUniqueNestedInput {
  where: CauseWhereUniqueInput!
  data: CauseUpdateDataInput!
}

input CauseUpsertWithWhereUniqueNestedInput {
  where: CauseWhereUniqueInput!
  update: CauseUpdateDataInput!
  create: CauseCreateInput!
}

input CauseWhereInput {
  """Logical AND on all given filters."""
  AND: [CauseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CauseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CauseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  definition: String

  """All values that are not equal to given value."""
  definition_not: String

  """All values that are contained in given list."""
  definition_in: [String!]

  """All values that are not contained in given list."""
  definition_not_in: [String!]

  """All values less than the given value."""
  definition_lt: String

  """All values less than or equal the given value."""
  definition_lte: String

  """All values greater than the given value."""
  definition_gt: String

  """All values greater than or equal the given value."""
  definition_gte: String

  """All values containing the given string."""
  definition_contains: String

  """All values not containing the given string."""
  definition_not_contains: String

  """All values starting with the given string."""
  definition_starts_with: String

  """All values not starting with the given string."""
  definition_not_starts_with: String

  """All values ending with the given string."""
  definition_ends_with: String

  """All values not ending with the given string."""
  definition_not_ends_with: String
  source: R_SOURCEWhereInput
  _MagicalBackRelation_CauseToProblem_every: ProblemWhereInput
  _MagicalBackRelation_CauseToProblem_some: ProblemWhereInput
  _MagicalBackRelation_CauseToProblem_none: ProblemWhereInput
}

input CauseWhereUniqueInput {
  id: ID
}

type CementingActivityDetail implements Node {
  id: ID!
  name: String!
  topOfCement(where: PhysicalQuantityWhereInput): PhysicalQuantity
  bottomOfCement(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type CementingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CementingActivityDetailEdge]!
  aggregate: AggregateCementingActivityDetail!
}

input CementingActivityDetailCreateInput {
  name: String!
  topOfCement: PhysicalQuantityCreateOneInput
  bottomOfCement: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type CementingActivityDetailEdge {
  """The item at the end of the edge."""
  node: CementingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CementingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CementingActivityDetailPreviousValues {
  id: ID!
  name: String!
}

type CementingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: CementingActivityDetail
  updatedFields: [String!]
  previousValues: CementingActivityDetailPreviousValues
}

input CementingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CementingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CementingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CementingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CementingActivityDetailWhereInput
}

input CementingActivityDetailUpdateInput {
  name: String
  topOfCement: PhysicalQuantityUpdateOneInput
  bottomOfCement: PhysicalQuantityUpdateOneInput
}

input CementingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [CementingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [CementingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CementingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  topOfCement: PhysicalQuantityWhereInput
  bottomOfCement: PhysicalQuantityWhereInput
}

input CementingActivityDetailWhereUniqueInput {
  id: ID
}

type ChangeMudWeightActivityDetail implements Node {
  id: ID!
  name: String!
  mudWeight(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type ChangeMudWeightActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChangeMudWeightActivityDetailEdge]!
  aggregate: AggregateChangeMudWeightActivityDetail!
}

input ChangeMudWeightActivityDetailCreateInput {
  name: String!
  mudWeight: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type ChangeMudWeightActivityDetailEdge {
  """The item at the end of the edge."""
  node: ChangeMudWeightActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChangeMudWeightActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChangeMudWeightActivityDetailPreviousValues {
  id: ID!
  name: String!
}

type ChangeMudWeightActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: ChangeMudWeightActivityDetail
  updatedFields: [String!]
  previousValues: ChangeMudWeightActivityDetailPreviousValues
}

input ChangeMudWeightActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChangeMudWeightActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChangeMudWeightActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChangeMudWeightActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChangeMudWeightActivityDetailWhereInput
}

input ChangeMudWeightActivityDetailUpdateInput {
  name: String
  mudWeight: PhysicalQuantityUpdateOneInput
}

input ChangeMudWeightActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [ChangeMudWeightActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChangeMudWeightActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChangeMudWeightActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mudWeight: PhysicalQuantityWhereInput
}

input ChangeMudWeightActivityDetailWhereUniqueInput {
  id: ID
}

type CirculatingActivityDetail implements Node {
  id: ID!
  name: String!
  numberOfCirculations: Float
  ECD(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type CirculatingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CirculatingActivityDetailEdge]!
  aggregate: AggregateCirculatingActivityDetail!
}

input CirculatingActivityDetailCreateInput {
  name: String!
  numberOfCirculations: Float
  ECD: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type CirculatingActivityDetailEdge {
  """The item at the end of the edge."""
  node: CirculatingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CirculatingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  numberOfCirculations_ASC
  numberOfCirculations_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CirculatingActivityDetailPreviousValues {
  id: ID!
  name: String!
  numberOfCirculations: Float
}

type CirculatingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: CirculatingActivityDetail
  updatedFields: [String!]
  previousValues: CirculatingActivityDetailPreviousValues
}

input CirculatingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CirculatingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CirculatingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CirculatingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CirculatingActivityDetailWhereInput
}

input CirculatingActivityDetailUpdateInput {
  name: String
  numberOfCirculations: Float
  ECD: PhysicalQuantityUpdateOneInput
}

input CirculatingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [CirculatingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [CirculatingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CirculatingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  numberOfCirculations: Float

  """All values that are not equal to given value."""
  numberOfCirculations_not: Float

  """All values that are contained in given list."""
  numberOfCirculations_in: [Float!]

  """All values that are not contained in given list."""
  numberOfCirculations_not_in: [Float!]

  """All values less than the given value."""
  numberOfCirculations_lt: Float

  """All values less than or equal the given value."""
  numberOfCirculations_lte: Float

  """All values greater than the given value."""
  numberOfCirculations_gt: Float

  """All values greater than or equal the given value."""
  numberOfCirculations_gte: Float
  ECD: PhysicalQuantityWhereInput
}

input CirculatingActivityDetailWhereUniqueInput {
  id: ID
}

scalar DateTime

type Documentation implements Node {
  id: ID!
  name: String!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type DocumentationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocumentationEdge]!
  aggregate: AggregateDocumentation!
}

input DocumentationCreateInput {
  name: String!
  events: EventCreateManyWithoutDocumentationInput
}

input DocumentationCreateOneWithoutEventsInput {
  create: DocumentationCreateWithoutEventsInput
  connect: DocumentationWhereUniqueInput
}

input DocumentationCreateWithoutEventsInput {
  name: String!
}

"""An edge in a connection."""
type DocumentationEdge {
  """The item at the end of the edge."""
  node: Documentation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DocumentationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DocumentationPreviousValues {
  id: ID!
  name: String!
}

type DocumentationSubscriptionPayload {
  mutation: MutationType!
  node: Documentation
  updatedFields: [String!]
  previousValues: DocumentationPreviousValues
}

input DocumentationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DocumentationWhereInput
}

input DocumentationUpdateInput {
  name: String
  events: EventUpdateManyWithoutDocumentationInput
}

input DocumentationUpdateOneWithoutEventsInput {
  create: DocumentationCreateWithoutEventsInput
  connect: DocumentationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DocumentationUpdateWithoutEventsDataInput
  upsert: DocumentationUpsertWithoutEventsInput
}

input DocumentationUpdateWithoutEventsDataInput {
  name: String
}

input DocumentationUpsertWithoutEventsInput {
  update: DocumentationUpdateWithoutEventsDataInput!
  create: DocumentationCreateWithoutEventsInput!
}

input DocumentationWhereInput {
  """Logical AND on all given filters."""
  AND: [DocumentationWhereInput!]

  """Logical OR on all given filters."""
  OR: [DocumentationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DocumentationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input DocumentationWhereUniqueInput {
  id: ID
}

type DrillingActivityDetail implements Node {
  id: ID!
  name: String!
  from(where: PhysicalQuantityWhereInput): PhysicalQuantity
  to(where: PhysicalQuantityWhereInput): PhysicalQuantity
  holeSize(where: PhysicalQuantityWhereInput): PhysicalQuantity
  drillingMethod: String
}

"""A connection to a list of items."""
type DrillingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DrillingActivityDetailEdge]!
  aggregate: AggregateDrillingActivityDetail!
}

input DrillingActivityDetailCreateInput {
  name: String!
  drillingMethod: String
  from: PhysicalQuantityCreateOneInput
  to: PhysicalQuantityCreateOneInput
  holeSize: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type DrillingActivityDetailEdge {
  """The item at the end of the edge."""
  node: DrillingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DrillingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  drillingMethod_ASC
  drillingMethod_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DrillingActivityDetailPreviousValues {
  id: ID!
  name: String!
  drillingMethod: String
}

type DrillingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: DrillingActivityDetail
  updatedFields: [String!]
  previousValues: DrillingActivityDetailPreviousValues
}

input DrillingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DrillingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DrillingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DrillingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DrillingActivityDetailWhereInput
}

input DrillingActivityDetailUpdateInput {
  name: String
  drillingMethod: String
  from: PhysicalQuantityUpdateOneInput
  to: PhysicalQuantityUpdateOneInput
  holeSize: PhysicalQuantityUpdateOneInput
}

input DrillingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [DrillingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [DrillingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DrillingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  drillingMethod: String

  """All values that are not equal to given value."""
  drillingMethod_not: String

  """All values that are contained in given list."""
  drillingMethod_in: [String!]

  """All values that are not contained in given list."""
  drillingMethod_not_in: [String!]

  """All values less than the given value."""
  drillingMethod_lt: String

  """All values less than or equal the given value."""
  drillingMethod_lte: String

  """All values greater than the given value."""
  drillingMethod_gt: String

  """All values greater than or equal the given value."""
  drillingMethod_gte: String

  """All values containing the given string."""
  drillingMethod_contains: String

  """All values not containing the given string."""
  drillingMethod_not_contains: String

  """All values starting with the given string."""
  drillingMethod_starts_with: String

  """All values not starting with the given string."""
  drillingMethod_not_starts_with: String

  """All values ending with the given string."""
  drillingMethod_ends_with: String

  """All values not ending with the given string."""
  drillingMethod_not_ends_with: String
  from: PhysicalQuantityWhereInput
  to: PhysicalQuantityWhereInput
  holeSize: PhysicalQuantityWhereInput
}

input DrillingActivityDetailWhereUniqueInput {
  id: ID
}

type Equipment implements Node {
  id: ID!
  name: String!
  codes: [String!]!
  supplier(where: OrganizationWhereInput): Organization
  subsystem(where: EquipmentWhereInput): Equipment
  source(where: R_SOURCEWhereInput): R_SOURCE
  surfaceForms: [String!]!
}

"""A connection to a list of items."""
type EquipmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EquipmentEdge]!
  aggregate: AggregateEquipment!
}

input EquipmentCreatecodesInput {
  set: [String!]
}

input EquipmentCreateInput {
  name: String!
  codes: EquipmentCreatecodesInput
  surfaceForms: EquipmentCreatesurfaceFormsInput
  supplier: OrganizationCreateOneInput
  subsystem: EquipmentCreateOneInput
  source: R_SOURCECreateOneInput
}

input EquipmentCreateOneInput {
  create: EquipmentCreateInput
  connect: EquipmentWhereUniqueInput
}

input EquipmentCreatesurfaceFormsInput {
  set: [String!]
}

"""An edge in a connection."""
type EquipmentEdge {
  """The item at the end of the edge."""
  node: Equipment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EquipmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EquipmentPreviousValues {
  id: ID!
  name: String!
  codes: [String!]!
  surfaceForms: [String!]!
}

type EquipmentSubscriptionPayload {
  mutation: MutationType!
  node: Equipment
  updatedFields: [String!]
  previousValues: EquipmentPreviousValues
}

input EquipmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EquipmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EquipmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EquipmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EquipmentWhereInput
}

input EquipmentUpdatecodesInput {
  set: [String!]
}

input EquipmentUpdateDataInput {
  name: String
  codes: EquipmentUpdatecodesInput
  surfaceForms: EquipmentUpdatesurfaceFormsInput
  supplier: OrganizationUpdateOneInput
  subsystem: EquipmentUpdateOneInput
  source: R_SOURCEUpdateOneInput
}

input EquipmentUpdateInput {
  name: String
  codes: EquipmentUpdatecodesInput
  surfaceForms: EquipmentUpdatesurfaceFormsInput
  supplier: OrganizationUpdateOneInput
  subsystem: EquipmentUpdateOneInput
  source: R_SOURCEUpdateOneInput
}

input EquipmentUpdateOneInput {
  create: EquipmentCreateInput
  connect: EquipmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EquipmentUpdateDataInput
  upsert: EquipmentUpsertNestedInput
}

input EquipmentUpdatesurfaceFormsInput {
  set: [String!]
}

input EquipmentUpsertNestedInput {
  update: EquipmentUpdateDataInput!
  create: EquipmentCreateInput!
}

input EquipmentWhereInput {
  """Logical AND on all given filters."""
  AND: [EquipmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [EquipmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EquipmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  supplier: OrganizationWhereInput
  subsystem: EquipmentWhereInput
  source: R_SOURCEWhereInput
  _MagicalBackRelation_EquipmentToRiggingActivityDetail_every: RiggingActivityDetailWhereInput
  _MagicalBackRelation_EquipmentToRiggingActivityDetail_some: RiggingActivityDetailWhereInput
  _MagicalBackRelation_EquipmentToRiggingActivityDetail_none: RiggingActivityDetailWhereInput
  _MagicalBackRelation_EquipmentToEquipment_every: EquipmentWhereInput
  _MagicalBackRelation_EquipmentToEquipment_some: EquipmentWhereInput
  _MagicalBackRelation_EquipmentToEquipment_none: EquipmentWhereInput
  _MagicalBackRelation_EquipmentToProblem_every: ProblemWhereInput
  _MagicalBackRelation_EquipmentToProblem_some: ProblemWhereInput
  _MagicalBackRelation_EquipmentToProblem_none: ProblemWhereInput
}

input EquipmentWhereUniqueInput {
  id: ID
}

type Event implements Node {
  id: ID!
  name: String!
  source(where: R_SOURCEWhereInput): R_SOURCE!
  well(where: WellWhereInput): Well!
  rig(where: RigWhereInput): Rig
  summary: String
  start: DateTime
  end: DateTime
  depthMD(where: PhysicalQuantityWhereInput): PhysicalQuantity
  depthTVD(where: PhysicalQuantityWhereInput): PhysicalQuantity
  importance: Int
  lifecycle(where: WellLifecycleWhereInput): WellLifecycle
  code: String
  subcode: String
  observation(where: ObservationWhereInput): Observation
  problem(where: ProblemWhereInput): Problem
  activity(where: ActivityWhereInput): Activity
  documentation(where: DocumentationWhereInput): Documentation
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  reporter: ID
  reporterDefinition(where: EventReporterDefinitionWhereInput): EventReporterDefinition
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  name: String!
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCECreateOneInput!
  well: WellCreateOneInput!
  rig: RigCreateOneInput
  depthMD: PhysicalQuantityCreateOneInput
  depthTVD: PhysicalQuantityCreateOneInput
  lifecycle: WellLifecycleCreateOneInput
  observation: ObservationCreateOneWithoutEventsInput
  problem: ProblemCreateOneWithoutEventsInput
  activity: ActivityCreateOneWithoutEventsInput
  documentation: DocumentationCreateOneWithoutEventsInput
  events: EventCreateManyInput
  reporterDefinition: EventReporterDefinitionCreateOneInput
}

input EventCreateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutActivityInput {
  create: [EventCreateWithoutActivityInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutDocumentationInput {
  create: [EventCreateWithoutDocumentationInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutObservationInput {
  create: [EventCreateWithoutObservationInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutProblemInput {
  create: [EventCreateWithoutProblemInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutActivityInput {
  name: String!
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCECreateOneInput!
  well: WellCreateOneInput!
  rig: RigCreateOneInput
  depthMD: PhysicalQuantityCreateOneInput
  depthTVD: PhysicalQuantityCreateOneInput
  lifecycle: WellLifecycleCreateOneInput
  observation: ObservationCreateOneWithoutEventsInput
  problem: ProblemCreateOneWithoutEventsInput
  documentation: DocumentationCreateOneWithoutEventsInput
  events: EventCreateManyInput
  reporterDefinition: EventReporterDefinitionCreateOneInput
}

input EventCreateWithoutDocumentationInput {
  name: String!
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCECreateOneInput!
  well: WellCreateOneInput!
  rig: RigCreateOneInput
  depthMD: PhysicalQuantityCreateOneInput
  depthTVD: PhysicalQuantityCreateOneInput
  lifecycle: WellLifecycleCreateOneInput
  observation: ObservationCreateOneWithoutEventsInput
  problem: ProblemCreateOneWithoutEventsInput
  activity: ActivityCreateOneWithoutEventsInput
  events: EventCreateManyInput
  reporterDefinition: EventReporterDefinitionCreateOneInput
}

input EventCreateWithoutObservationInput {
  name: String!
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCECreateOneInput!
  well: WellCreateOneInput!
  rig: RigCreateOneInput
  depthMD: PhysicalQuantityCreateOneInput
  depthTVD: PhysicalQuantityCreateOneInput
  lifecycle: WellLifecycleCreateOneInput
  problem: ProblemCreateOneWithoutEventsInput
  activity: ActivityCreateOneWithoutEventsInput
  documentation: DocumentationCreateOneWithoutEventsInput
  events: EventCreateManyInput
  reporterDefinition: EventReporterDefinitionCreateOneInput
}

input EventCreateWithoutProblemInput {
  name: String!
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCECreateOneInput!
  well: WellCreateOneInput!
  rig: RigCreateOneInput
  depthMD: PhysicalQuantityCreateOneInput
  depthTVD: PhysicalQuantityCreateOneInput
  lifecycle: WellLifecycleCreateOneInput
  observation: ObservationCreateOneWithoutEventsInput
  activity: ActivityCreateOneWithoutEventsInput
  documentation: DocumentationCreateOneWithoutEventsInput
  events: EventCreateManyInput
  reporterDefinition: EventReporterDefinitionCreateOneInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  summary_ASC
  summary_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  importance_ASC
  importance_DESC
  code_ASC
  code_DESC
  subcode_ASC
  subcode_DESC
  reporter_ASC
  reporter_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
}

type EventReporterDefinition implements Node {
  id: ID!
  name: String!
  detailKindName: [String!]!
  externalReference: String
}

"""A connection to a list of items."""
type EventReporterDefinitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventReporterDefinitionEdge]!
  aggregate: AggregateEventReporterDefinition!
}

input EventReporterDefinitionCreatedetailKindNameInput {
  set: [String!]
}

input EventReporterDefinitionCreateInput {
  name: String!
  externalReference: String
  detailKindName: EventReporterDefinitionCreatedetailKindNameInput
}

input EventReporterDefinitionCreateOneInput {
  create: EventReporterDefinitionCreateInput
  connect: EventReporterDefinitionWhereUniqueInput
}

"""An edge in a connection."""
type EventReporterDefinitionEdge {
  """The item at the end of the edge."""
  node: EventReporterDefinition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventReporterDefinitionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  externalReference_ASC
  externalReference_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventReporterDefinitionPreviousValues {
  id: ID!
  name: String!
  detailKindName: [String!]!
  externalReference: String
}

type EventReporterDefinitionSubscriptionPayload {
  mutation: MutationType!
  node: EventReporterDefinition
  updatedFields: [String!]
  previousValues: EventReporterDefinitionPreviousValues
}

input EventReporterDefinitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventReporterDefinitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventReporterDefinitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventReporterDefinitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventReporterDefinitionWhereInput
}

input EventReporterDefinitionUpdateDataInput {
  name: String
  externalReference: String
  detailKindName: EventReporterDefinitionUpdatedetailKindNameInput
}

input EventReporterDefinitionUpdatedetailKindNameInput {
  set: [String!]
}

input EventReporterDefinitionUpdateInput {
  name: String
  externalReference: String
  detailKindName: EventReporterDefinitionUpdatedetailKindNameInput
}

input EventReporterDefinitionUpdateOneInput {
  create: EventReporterDefinitionCreateInput
  connect: EventReporterDefinitionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventReporterDefinitionUpdateDataInput
  upsert: EventReporterDefinitionUpsertNestedInput
}

input EventReporterDefinitionUpsertNestedInput {
  update: EventReporterDefinitionUpdateDataInput!
  create: EventReporterDefinitionCreateInput!
}

input EventReporterDefinitionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventReporterDefinitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventReporterDefinitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventReporterDefinitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  externalReference: String

  """All values that are not equal to given value."""
  externalReference_not: String

  """All values that are contained in given list."""
  externalReference_in: [String!]

  """All values that are not contained in given list."""
  externalReference_not_in: [String!]

  """All values less than the given value."""
  externalReference_lt: String

  """All values less than or equal the given value."""
  externalReference_lte: String

  """All values greater than the given value."""
  externalReference_gt: String

  """All values greater than or equal the given value."""
  externalReference_gte: String

  """All values containing the given string."""
  externalReference_contains: String

  """All values not containing the given string."""
  externalReference_not_contains: String

  """All values starting with the given string."""
  externalReference_starts_with: String

  """All values not starting with the given string."""
  externalReference_not_starts_with: String

  """All values ending with the given string."""
  externalReference_ends_with: String

  """All values not ending with the given string."""
  externalReference_not_ends_with: String
  _MagicalBackRelation_EventToEventReporterDefinition_every: EventWhereInput
  _MagicalBackRelation_EventToEventReporterDefinition_some: EventWhereInput
  _MagicalBackRelation_EventToEventReporterDefinition_none: EventWhereInput
}

input EventReporterDefinitionWhereUniqueInput {
  id: ID
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateDataInput {
  name: String
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCEUpdateOneInput
  well: WellUpdateOneInput
  rig: RigUpdateOneInput
  depthMD: PhysicalQuantityUpdateOneInput
  depthTVD: PhysicalQuantityUpdateOneInput
  lifecycle: WellLifecycleUpdateOneInput
  observation: ObservationUpdateOneWithoutEventsInput
  problem: ProblemUpdateOneWithoutEventsInput
  activity: ActivityUpdateOneWithoutEventsInput
  documentation: DocumentationUpdateOneWithoutEventsInput
  events: EventUpdateManyInput
  reporterDefinition: EventReporterDefinitionUpdateOneInput
}

input EventUpdateInput {
  name: String
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCEUpdateOneInput
  well: WellUpdateOneInput
  rig: RigUpdateOneInput
  depthMD: PhysicalQuantityUpdateOneInput
  depthTVD: PhysicalQuantityUpdateOneInput
  lifecycle: WellLifecycleUpdateOneInput
  observation: ObservationUpdateOneWithoutEventsInput
  problem: ProblemUpdateOneWithoutEventsInput
  activity: ActivityUpdateOneWithoutEventsInput
  documentation: DocumentationUpdateOneWithoutEventsInput
  events: EventUpdateManyInput
  reporterDefinition: EventReporterDefinitionUpdateOneInput
}

input EventUpdateManyInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueNestedInput!]
  upsert: [EventUpsertWithWhereUniqueNestedInput!]
}

input EventUpdateManyWithoutActivityInput {
  create: [EventCreateWithoutActivityInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutActivityInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutActivityInput!]
}

input EventUpdateManyWithoutDocumentationInput {
  create: [EventCreateWithoutDocumentationInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutDocumentationInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutDocumentationInput!]
}

input EventUpdateManyWithoutObservationInput {
  create: [EventCreateWithoutObservationInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutObservationInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutObservationInput!]
}

input EventUpdateManyWithoutProblemInput {
  create: [EventCreateWithoutProblemInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutProblemInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutProblemInput!]
}

input EventUpdateWithoutActivityDataInput {
  name: String
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCEUpdateOneInput
  well: WellUpdateOneInput
  rig: RigUpdateOneInput
  depthMD: PhysicalQuantityUpdateOneInput
  depthTVD: PhysicalQuantityUpdateOneInput
  lifecycle: WellLifecycleUpdateOneInput
  observation: ObservationUpdateOneWithoutEventsInput
  problem: ProblemUpdateOneWithoutEventsInput
  documentation: DocumentationUpdateOneWithoutEventsInput
  events: EventUpdateManyInput
  reporterDefinition: EventReporterDefinitionUpdateOneInput
}

input EventUpdateWithoutDocumentationDataInput {
  name: String
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCEUpdateOneInput
  well: WellUpdateOneInput
  rig: RigUpdateOneInput
  depthMD: PhysicalQuantityUpdateOneInput
  depthTVD: PhysicalQuantityUpdateOneInput
  lifecycle: WellLifecycleUpdateOneInput
  observation: ObservationUpdateOneWithoutEventsInput
  problem: ProblemUpdateOneWithoutEventsInput
  activity: ActivityUpdateOneWithoutEventsInput
  events: EventUpdateManyInput
  reporterDefinition: EventReporterDefinitionUpdateOneInput
}

input EventUpdateWithoutObservationDataInput {
  name: String
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCEUpdateOneInput
  well: WellUpdateOneInput
  rig: RigUpdateOneInput
  depthMD: PhysicalQuantityUpdateOneInput
  depthTVD: PhysicalQuantityUpdateOneInput
  lifecycle: WellLifecycleUpdateOneInput
  problem: ProblemUpdateOneWithoutEventsInput
  activity: ActivityUpdateOneWithoutEventsInput
  documentation: DocumentationUpdateOneWithoutEventsInput
  events: EventUpdateManyInput
  reporterDefinition: EventReporterDefinitionUpdateOneInput
}

input EventUpdateWithoutProblemDataInput {
  name: String
  summary: String
  start: DateTime
  end: DateTime
  importance: Int
  code: String
  subcode: String
  reporter: ID
  source: R_SOURCEUpdateOneInput
  well: WellUpdateOneInput
  rig: RigUpdateOneInput
  depthMD: PhysicalQuantityUpdateOneInput
  depthTVD: PhysicalQuantityUpdateOneInput
  lifecycle: WellLifecycleUpdateOneInput
  observation: ObservationUpdateOneWithoutEventsInput
  activity: ActivityUpdateOneWithoutEventsInput
  documentation: DocumentationUpdateOneWithoutEventsInput
  events: EventUpdateManyInput
  reporterDefinition: EventReporterDefinitionUpdateOneInput
}

input EventUpdateWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput!
  data: EventUpdateDataInput!
}

input EventUpdateWithWhereUniqueWithoutActivityInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutActivityDataInput!
}

input EventUpdateWithWhereUniqueWithoutDocumentationInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutDocumentationDataInput!
}

input EventUpdateWithWhereUniqueWithoutObservationInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutObservationDataInput!
}

input EventUpdateWithWhereUniqueWithoutProblemInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutProblemDataInput!
}

input EventUpsertWithWhereUniqueNestedInput {
  where: EventWhereUniqueInput!
  update: EventUpdateDataInput!
  create: EventCreateInput!
}

input EventUpsertWithWhereUniqueWithoutActivityInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutActivityDataInput!
  create: EventCreateWithoutActivityInput!
}

input EventUpsertWithWhereUniqueWithoutDocumentationInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutDocumentationDataInput!
  create: EventCreateWithoutDocumentationInput!
}

input EventUpsertWithWhereUniqueWithoutObservationInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutObservationDataInput!
  create: EventCreateWithoutObservationInput!
}

input EventUpsertWithWhereUniqueWithoutProblemInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutProblemDataInput!
  create: EventCreateWithoutProblemInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  summary: String

  """All values that are not equal to given value."""
  summary_not: String

  """All values that are contained in given list."""
  summary_in: [String!]

  """All values that are not contained in given list."""
  summary_not_in: [String!]

  """All values less than the given value."""
  summary_lt: String

  """All values less than or equal the given value."""
  summary_lte: String

  """All values greater than the given value."""
  summary_gt: String

  """All values greater than or equal the given value."""
  summary_gte: String

  """All values containing the given string."""
  summary_contains: String

  """All values not containing the given string."""
  summary_not_contains: String

  """All values starting with the given string."""
  summary_starts_with: String

  """All values not starting with the given string."""
  summary_not_starts_with: String

  """All values ending with the given string."""
  summary_ends_with: String

  """All values not ending with the given string."""
  summary_not_ends_with: String
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
  importance: Int

  """All values that are not equal to given value."""
  importance_not: Int

  """All values that are contained in given list."""
  importance_in: [Int!]

  """All values that are not contained in given list."""
  importance_not_in: [Int!]

  """All values less than the given value."""
  importance_lt: Int

  """All values less than or equal the given value."""
  importance_lte: Int

  """All values greater than the given value."""
  importance_gt: Int

  """All values greater than or equal the given value."""
  importance_gte: Int
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  subcode: String

  """All values that are not equal to given value."""
  subcode_not: String

  """All values that are contained in given list."""
  subcode_in: [String!]

  """All values that are not contained in given list."""
  subcode_not_in: [String!]

  """All values less than the given value."""
  subcode_lt: String

  """All values less than or equal the given value."""
  subcode_lte: String

  """All values greater than the given value."""
  subcode_gt: String

  """All values greater than or equal the given value."""
  subcode_gte: String

  """All values containing the given string."""
  subcode_contains: String

  """All values not containing the given string."""
  subcode_not_contains: String

  """All values starting with the given string."""
  subcode_starts_with: String

  """All values not starting with the given string."""
  subcode_not_starts_with: String

  """All values ending with the given string."""
  subcode_ends_with: String

  """All values not ending with the given string."""
  subcode_not_ends_with: String
  reporter: ID

  """All values that are not equal to given value."""
  reporter_not: ID

  """All values that are contained in given list."""
  reporter_in: [ID!]

  """All values that are not contained in given list."""
  reporter_not_in: [ID!]

  """All values less than the given value."""
  reporter_lt: ID

  """All values less than or equal the given value."""
  reporter_lte: ID

  """All values greater than the given value."""
  reporter_gt: ID

  """All values greater than or equal the given value."""
  reporter_gte: ID

  """All values containing the given string."""
  reporter_contains: ID

  """All values not containing the given string."""
  reporter_not_contains: ID

  """All values starting with the given string."""
  reporter_starts_with: ID

  """All values not starting with the given string."""
  reporter_not_starts_with: ID

  """All values ending with the given string."""
  reporter_ends_with: ID

  """All values not ending with the given string."""
  reporter_not_ends_with: ID
  source: R_SOURCEWhereInput
  well: WellWhereInput
  rig: RigWhereInput
  depthMD: PhysicalQuantityWhereInput
  depthTVD: PhysicalQuantityWhereInput
  lifecycle: WellLifecycleWhereInput
  observation: ObservationWhereInput
  problem: ProblemWhereInput
  activity: ActivityWhereInput
  documentation: DocumentationWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  reporterDefinition: EventReporterDefinitionWhereInput
  _MagicalBackRelation_EventToProblemDefinition_every: ProblemDefinitionWhereInput
  _MagicalBackRelation_EventToProblemDefinition_some: ProblemDefinitionWhereInput
  _MagicalBackRelation_EventToProblemDefinition_none: ProblemDefinitionWhereInput
  _MagicalBackRelation_EventToEvent_every: EventWhereInput
  _MagicalBackRelation_EventToEvent_some: EventWhereInput
  _MagicalBackRelation_EventToEvent_none: EventWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type Field implements Node {
  id: ID!
  name: String!
  DISCOVERY_DATE: DateTime
  FIELD_ABBREVIATION: String
}

"""A connection to a list of items."""
type FieldConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FieldEdge]!
  aggregate: AggregateField!
}

input FieldCreateInput {
  name: String!
  DISCOVERY_DATE: DateTime
  FIELD_ABBREVIATION: String
}

input FieldCreateOneInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
}

"""An edge in a connection."""
type FieldEdge {
  """The item at the end of the edge."""
  node: Field!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FieldOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  DISCOVERY_DATE_ASC
  DISCOVERY_DATE_DESC
  FIELD_ABBREVIATION_ASC
  FIELD_ABBREVIATION_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FieldPreviousValues {
  id: ID!
  name: String!
  DISCOVERY_DATE: DateTime
  FIELD_ABBREVIATION: String
}

type FieldSubscriptionPayload {
  mutation: MutationType!
  node: Field
  updatedFields: [String!]
  previousValues: FieldPreviousValues
}

input FieldSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FieldWhereInput
}

input FieldUpdateDataInput {
  name: String
  DISCOVERY_DATE: DateTime
  FIELD_ABBREVIATION: String
}

input FieldUpdateInput {
  name: String
  DISCOVERY_DATE: DateTime
  FIELD_ABBREVIATION: String
}

input FieldUpdateOneInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FieldUpdateDataInput
  upsert: FieldUpsertNestedInput
}

input FieldUpsertNestedInput {
  update: FieldUpdateDataInput!
  create: FieldCreateInput!
}

input FieldWhereInput {
  """Logical AND on all given filters."""
  AND: [FieldWhereInput!]

  """Logical OR on all given filters."""
  OR: [FieldWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FieldWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  DISCOVERY_DATE: DateTime

  """All values that are not equal to given value."""
  DISCOVERY_DATE_not: DateTime

  """All values that are contained in given list."""
  DISCOVERY_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  DISCOVERY_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  DISCOVERY_DATE_lt: DateTime

  """All values less than or equal the given value."""
  DISCOVERY_DATE_lte: DateTime

  """All values greater than the given value."""
  DISCOVERY_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  DISCOVERY_DATE_gte: DateTime
  FIELD_ABBREVIATION: String

  """All values that are not equal to given value."""
  FIELD_ABBREVIATION_not: String

  """All values that are contained in given list."""
  FIELD_ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  FIELD_ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  FIELD_ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  FIELD_ABBREVIATION_lte: String

  """All values greater than the given value."""
  FIELD_ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  FIELD_ABBREVIATION_gte: String

  """All values containing the given string."""
  FIELD_ABBREVIATION_contains: String

  """All values not containing the given string."""
  FIELD_ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  FIELD_ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  FIELD_ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  FIELD_ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  FIELD_ABBREVIATION_not_ends_with: String
  _MagicalBackRelation_FieldToWell_every: WellWhereInput
  _MagicalBackRelation_FieldToWell_some: WellWhereInput
  _MagicalBackRelation_FieldToWell_none: WellWhereInput
}

input FieldWhereUniqueInput {
  id: ID
}

type FishingProblemDetail implements Node {
  id: ID!
  name: String!
  depth(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type FishingProblemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FishingProblemDetailEdge]!
  aggregate: AggregateFishingProblemDetail!
}

input FishingProblemDetailCreateInput {
  name: String!
  depth: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type FishingProblemDetailEdge {
  """The item at the end of the edge."""
  node: FishingProblemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FishingProblemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FishingProblemDetailPreviousValues {
  id: ID!
  name: String!
}

type FishingProblemDetailSubscriptionPayload {
  mutation: MutationType!
  node: FishingProblemDetail
  updatedFields: [String!]
  previousValues: FishingProblemDetailPreviousValues
}

input FishingProblemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FishingProblemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FishingProblemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FishingProblemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FishingProblemDetailWhereInput
}

input FishingProblemDetailUpdateInput {
  name: String
  depth: PhysicalQuantityUpdateOneInput
}

input FishingProblemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [FishingProblemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [FishingProblemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FishingProblemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  depth: PhysicalQuantityWhereInput
}

input FishingProblemDetailWhereUniqueInput {
  id: ID
}

type KickProblemDetail implements Node {
  id: ID!
  name: String!
  depth(where: PhysicalQuantityWhereInput): PhysicalQuantity
  volume(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type KickProblemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [KickProblemDetailEdge]!
  aggregate: AggregateKickProblemDetail!
}

input KickProblemDetailCreateInput {
  name: String!
  depth: PhysicalQuantityCreateOneInput
  volume: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type KickProblemDetailEdge {
  """The item at the end of the edge."""
  node: KickProblemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum KickProblemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type KickProblemDetailPreviousValues {
  id: ID!
  name: String!
}

type KickProblemDetailSubscriptionPayload {
  mutation: MutationType!
  node: KickProblemDetail
  updatedFields: [String!]
  previousValues: KickProblemDetailPreviousValues
}

input KickProblemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [KickProblemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [KickProblemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [KickProblemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: KickProblemDetailWhereInput
}

input KickProblemDetailUpdateInput {
  name: String
  depth: PhysicalQuantityUpdateOneInput
  volume: PhysicalQuantityUpdateOneInput
}

input KickProblemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [KickProblemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [KickProblemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [KickProblemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  depth: PhysicalQuantityWhereInput
  volume: PhysicalQuantityWhereInput
}

input KickProblemDetailWhereUniqueInput {
  id: ID
}

type LoggingActivityDetail implements Node {
  id: ID!
  name: String!
  topOfInterval(where: PhysicalQuantityWhereInput): PhysicalQuantity
  bottomOfInterval(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type LoggingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LoggingActivityDetailEdge]!
  aggregate: AggregateLoggingActivityDetail!
}

input LoggingActivityDetailCreateInput {
  name: String!
  topOfInterval: PhysicalQuantityCreateOneInput
  bottomOfInterval: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type LoggingActivityDetailEdge {
  """The item at the end of the edge."""
  node: LoggingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LoggingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LoggingActivityDetailPreviousValues {
  id: ID!
  name: String!
}

type LoggingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: LoggingActivityDetail
  updatedFields: [String!]
  previousValues: LoggingActivityDetailPreviousValues
}

input LoggingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LoggingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LoggingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LoggingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LoggingActivityDetailWhereInput
}

input LoggingActivityDetailUpdateInput {
  name: String
  topOfInterval: PhysicalQuantityUpdateOneInput
  bottomOfInterval: PhysicalQuantityUpdateOneInput
}

input LoggingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [LoggingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [LoggingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LoggingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  topOfInterval: PhysicalQuantityWhereInput
  bottomOfInterval: PhysicalQuantityWhereInput
}

input LoggingActivityDetailWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type LostCirculationProblemDetail implements Node {
  id: ID!
  name: String!
  depth(where: PhysicalQuantityWhereInput): PhysicalQuantity
  volume(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type LostCirculationProblemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LostCirculationProblemDetailEdge]!
  aggregate: AggregateLostCirculationProblemDetail!
}

input LostCirculationProblemDetailCreateInput {
  name: String!
  depth: PhysicalQuantityCreateOneInput
  volume: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type LostCirculationProblemDetailEdge {
  """The item at the end of the edge."""
  node: LostCirculationProblemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LostCirculationProblemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LostCirculationProblemDetailPreviousValues {
  id: ID!
  name: String!
}

type LostCirculationProblemDetailSubscriptionPayload {
  mutation: MutationType!
  node: LostCirculationProblemDetail
  updatedFields: [String!]
  previousValues: LostCirculationProblemDetailPreviousValues
}

input LostCirculationProblemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LostCirculationProblemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LostCirculationProblemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LostCirculationProblemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LostCirculationProblemDetailWhereInput
}

input LostCirculationProblemDetailUpdateInput {
  name: String
  depth: PhysicalQuantityUpdateOneInput
  volume: PhysicalQuantityUpdateOneInput
}

input LostCirculationProblemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [LostCirculationProblemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [LostCirculationProblemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LostCirculationProblemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  depth: PhysicalQuantityWhereInput
  volume: PhysicalQuantityWhereInput
}

input LostCirculationProblemDetailWhereUniqueInput {
  id: ID
}

type Mechanism implements Node {
  id: ID!
  name: String!
  summary: String
  externalReference: String
}

"""A connection to a list of items."""
type MechanismConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MechanismEdge]!
  aggregate: AggregateMechanism!
}

input MechanismCreateInput {
  name: String!
  summary: String
  externalReference: String
}

input MechanismCreateManyInput {
  create: [MechanismCreateInput!]
  connect: [MechanismWhereUniqueInput!]
}

"""An edge in a connection."""
type MechanismEdge {
  """The item at the end of the edge."""
  node: Mechanism!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MechanismOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  summary_ASC
  summary_DESC
  externalReference_ASC
  externalReference_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MechanismPreviousValues {
  id: ID!
  name: String!
  summary: String
  externalReference: String
}

type MechanismSubscriptionPayload {
  mutation: MutationType!
  node: Mechanism
  updatedFields: [String!]
  previousValues: MechanismPreviousValues
}

input MechanismSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MechanismSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MechanismSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MechanismSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MechanismWhereInput
}

input MechanismUpdateDataInput {
  name: String
  summary: String
  externalReference: String
}

input MechanismUpdateInput {
  name: String
  summary: String
  externalReference: String
}

input MechanismUpdateManyInput {
  create: [MechanismCreateInput!]
  connect: [MechanismWhereUniqueInput!]
  disconnect: [MechanismWhereUniqueInput!]
  delete: [MechanismWhereUniqueInput!]
  update: [MechanismUpdateWithWhereUniqueNestedInput!]
  upsert: [MechanismUpsertWithWhereUniqueNestedInput!]
}

input MechanismUpdateWithWhereUniqueNestedInput {
  where: MechanismWhereUniqueInput!
  data: MechanismUpdateDataInput!
}

input MechanismUpsertWithWhereUniqueNestedInput {
  where: MechanismWhereUniqueInput!
  update: MechanismUpdateDataInput!
  create: MechanismCreateInput!
}

input MechanismWhereInput {
  """Logical AND on all given filters."""
  AND: [MechanismWhereInput!]

  """Logical OR on all given filters."""
  OR: [MechanismWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MechanismWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  summary: String

  """All values that are not equal to given value."""
  summary_not: String

  """All values that are contained in given list."""
  summary_in: [String!]

  """All values that are not contained in given list."""
  summary_not_in: [String!]

  """All values less than the given value."""
  summary_lt: String

  """All values less than or equal the given value."""
  summary_lte: String

  """All values greater than the given value."""
  summary_gt: String

  """All values greater than or equal the given value."""
  summary_gte: String

  """All values containing the given string."""
  summary_contains: String

  """All values not containing the given string."""
  summary_not_contains: String

  """All values starting with the given string."""
  summary_starts_with: String

  """All values not starting with the given string."""
  summary_not_starts_with: String

  """All values ending with the given string."""
  summary_ends_with: String

  """All values not ending with the given string."""
  summary_not_ends_with: String
  externalReference: String

  """All values that are not equal to given value."""
  externalReference_not: String

  """All values that are contained in given list."""
  externalReference_in: [String!]

  """All values that are not contained in given list."""
  externalReference_not_in: [String!]

  """All values less than the given value."""
  externalReference_lt: String

  """All values less than or equal the given value."""
  externalReference_lte: String

  """All values greater than the given value."""
  externalReference_gt: String

  """All values greater than or equal the given value."""
  externalReference_gte: String

  """All values containing the given string."""
  externalReference_contains: String

  """All values not containing the given string."""
  externalReference_not_contains: String

  """All values starting with the given string."""
  externalReference_starts_with: String

  """All values not starting with the given string."""
  externalReference_not_starts_with: String

  """All values ending with the given string."""
  externalReference_ends_with: String

  """All values not ending with the given string."""
  externalReference_not_ends_with: String
  _MagicalBackRelation_MechanismToProblemDefinition_every: ProblemDefinitionWhereInput
  _MagicalBackRelation_MechanismToProblemDefinition_some: ProblemDefinitionWhereInput
  _MagicalBackRelation_MechanismToProblemDefinition_none: ProblemDefinitionWhereInput
}

input MechanismWhereUniqueInput {
  id: ID
}

type Mutation {
  createMyThing(data: MyThingCreateInput!): MyThing!
  createSurfaceForm(data: SurfaceFormCreateInput!): SurfaceForm!
  createPerson(data: PersonCreateInput!): Person!
  createProblem(data: ProblemCreateInput!): Problem!
  createStuckPipeProblemDetail(data: StuckPipeProblemDetailCreateInput!): StuckPipeProblemDetail!
  createLostCirculationProblemDetail(data: LostCirculationProblemDetailCreateInput!): LostCirculationProblemDetail!
  createKickProblemDetail(data: KickProblemDetailCreateInput!): KickProblemDetail!
  createFishingProblemDetail(data: FishingProblemDetailCreateInput!): FishingProblemDetail!
  createBallooningProblemDetail(data: BallooningProblemDetailCreateInput!): BallooningProblemDetail!
  createWaitingOnProblemDetail(data: WaitingOnProblemDetailCreateInput!): WaitingOnProblemDetail!
  createActivity(data: ActivityCreateInput!): Activity!
  createTrippingActivityDetail(data: TrippingActivityDetailCreateInput!): TrippingActivityDetail!
  createCirculatingActivityDetail(data: CirculatingActivityDetailCreateInput!): CirculatingActivityDetail!
  createDrillingActivityDetail(data: DrillingActivityDetailCreateInput!): DrillingActivityDetail!
  createCementingActivityDetail(data: CementingActivityDetailCreateInput!): CementingActivityDetail!
  createLoggingActivityDetail(data: LoggingActivityDetailCreateInput!): LoggingActivityDetail!
  createPerforatingActivityDetail(data: PerforatingActivityDetailCreateInput!): PerforatingActivityDetail!
  createTestingActivityDetail(data: TestingActivityDetailCreateInput!): TestingActivityDetail!
  createRiggingActivityDetail(data: RiggingActivityDetailCreateInput!): RiggingActivityDetail!
  createCasingActivityDetail(data: CasingActivityDetailCreateInput!): CasingActivityDetail!
  createChangeMudWeightActivityDetail(data: ChangeMudWeightActivityDetailCreateInput!): ChangeMudWeightActivityDetail!
  createDocumentation(data: DocumentationCreateInput!): Documentation!
  createR_ADDITIVE_TYPE(data: R_ADDITIVE_TYPECreateInput!): R_ADDITIVE_TYPE!
  createR_CEMENT_TYPE(data: R_CEMENT_TYPECreateInput!): R_CEMENT_TYPE!
  createR_COMPLETION_METHOD(data: R_COMPLETION_METHODCreateInput!): R_COMPLETION_METHOD!
  createR_COMPLETION_TYPE(data: R_COMPLETION_TYPECreateInput!): R_COMPLETION_TYPE!
  createR_DOCUMENT_TYPE(data: R_DOCUMENT_TYPECreateInput!): R_DOCUMENT_TYPE!
  createR_DRILL_BIT_TYPE(data: R_DRILL_BIT_TYPECreateInput!): R_DRILL_BIT_TYPE!
  createR_DRILL_TOOL_TYPE(data: R_DRILL_TOOL_TYPECreateInput!): R_DRILL_TOOL_TYPE!
  createR_DRILLING_MEDIA(data: R_DRILLING_MEDIACreateInput!): R_DRILLING_MEDIA!
  createR_LINER_TYPE(data: R_LINER_TYPECreateInput!): R_LINER_TYPE!
  createR_LITH_ROCK_TYPE(data: R_LITH_ROCK_TYPECreateInput!): R_LITH_ROCK_TYPE!
  createR_LITHOLOGY(data: R_LITHOLOGYCreateInput!): R_LITHOLOGY!
  createR_LOG_TOOL_TYPE(data: R_LOG_TOOL_TYPECreateInput!): R_LOG_TOOL_TYPE!
  createR_PROPPANT_TYPE(data: R_PROPPANT_TYPECreateInput!): R_PROPPANT_TYPE!
  createR_RIG_BLOWOUT_PREVENTER(data: R_RIG_BLOWOUT_PREVENTERCreateInput!): R_RIG_BLOWOUT_PREVENTER!
  createR_RIG_TYPE(data: R_RIG_TYPECreateInput!): R_RIG_TYPE!
  createR_WELL_CLASS(data: R_WELL_CLASSCreateInput!): R_WELL_CLASS!
  createR_WELL_DRILL_OP_TYPE(data: R_WELL_DRILL_OP_TYPECreateInput!): R_WELL_DRILL_OP_TYPE!
  createR_WELL_STATUS(data: R_WELL_STATUSCreateInput!): R_WELL_STATUS!
  createR_WELL_TEST_TYPE(data: R_WELL_TEST_TYPECreateInput!): R_WELL_TEST_TYPE!
  createUS_OFFSHORE_LEASE(data: US_OFFSHORE_LEASECreateInput!): US_OFFSHORE_LEASE!
  createField(data: FieldCreateInput!): Field!
  createWellSourceDetail(data: WellSourceDetailCreateInput!): WellSourceDetail!
  createRig(data: RigCreateInput!): Rig!
  createEventReporterDefinition(data: EventReporterDefinitionCreateInput!): EventReporterDefinition!
  createWellLifecycle(data: WellLifecycleCreateInput!): WellLifecycle!
  createEvent(data: EventCreateInput!): Event!
  createObservation(data: ObservationCreateInput!): Observation!
  createMyOtherThing: MyOtherThing!
  createEquipment(data: EquipmentCreateInput!): Equipment!
  createActivityDefinition(data: ActivityDefinitionCreateInput!): ActivityDefinition!
  createProblemDefinition(data: ProblemDefinitionCreateInput!): ProblemDefinition!
  createWell(data: WellCreateInput!): Well!
  createObservationDefinition(data: ObservationDefinitionCreateInput!): ObservationDefinition!
  createMechanism(data: MechanismCreateInput!): Mechanism!
  createCause(data: CauseCreateInput!): Cause!
  createR_SOURCE(data: R_SOURCECreateInput!): R_SOURCE!
  createOrganization(data: OrganizationCreateInput!): Organization!
  createPhysicalQuantity(data: PhysicalQuantityCreateInput!): PhysicalQuantity!
  updateMyThing(data: MyThingUpdateInput!, where: MyThingWhereUniqueInput!): MyThing
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
  updateProblem(data: ProblemUpdateInput!, where: ProblemWhereUniqueInput!): Problem
  updateStuckPipeProblemDetail(data: StuckPipeProblemDetailUpdateInput!, where: StuckPipeProblemDetailWhereUniqueInput!): StuckPipeProblemDetail
  updateLostCirculationProblemDetail(data: LostCirculationProblemDetailUpdateInput!, where: LostCirculationProblemDetailWhereUniqueInput!): LostCirculationProblemDetail
  updateKickProblemDetail(data: KickProblemDetailUpdateInput!, where: KickProblemDetailWhereUniqueInput!): KickProblemDetail
  updateFishingProblemDetail(data: FishingProblemDetailUpdateInput!, where: FishingProblemDetailWhereUniqueInput!): FishingProblemDetail
  updateBallooningProblemDetail(data: BallooningProblemDetailUpdateInput!, where: BallooningProblemDetailWhereUniqueInput!): BallooningProblemDetail
  updateWaitingOnProblemDetail(data: WaitingOnProblemDetailUpdateInput!, where: WaitingOnProblemDetailWhereUniqueInput!): WaitingOnProblemDetail
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateTrippingActivityDetail(data: TrippingActivityDetailUpdateInput!, where: TrippingActivityDetailWhereUniqueInput!): TrippingActivityDetail
  updateCirculatingActivityDetail(data: CirculatingActivityDetailUpdateInput!, where: CirculatingActivityDetailWhereUniqueInput!): CirculatingActivityDetail
  updateDrillingActivityDetail(data: DrillingActivityDetailUpdateInput!, where: DrillingActivityDetailWhereUniqueInput!): DrillingActivityDetail
  updateCementingActivityDetail(data: CementingActivityDetailUpdateInput!, where: CementingActivityDetailWhereUniqueInput!): CementingActivityDetail
  updateLoggingActivityDetail(data: LoggingActivityDetailUpdateInput!, where: LoggingActivityDetailWhereUniqueInput!): LoggingActivityDetail
  updatePerforatingActivityDetail(data: PerforatingActivityDetailUpdateInput!, where: PerforatingActivityDetailWhereUniqueInput!): PerforatingActivityDetail
  updateTestingActivityDetail(data: TestingActivityDetailUpdateInput!, where: TestingActivityDetailWhereUniqueInput!): TestingActivityDetail
  updateRiggingActivityDetail(data: RiggingActivityDetailUpdateInput!, where: RiggingActivityDetailWhereUniqueInput!): RiggingActivityDetail
  updateCasingActivityDetail(data: CasingActivityDetailUpdateInput!, where: CasingActivityDetailWhereUniqueInput!): CasingActivityDetail
  updateChangeMudWeightActivityDetail(data: ChangeMudWeightActivityDetailUpdateInput!, where: ChangeMudWeightActivityDetailWhereUniqueInput!): ChangeMudWeightActivityDetail
  updateDocumentation(data: DocumentationUpdateInput!, where: DocumentationWhereUniqueInput!): Documentation
  updateR_ADDITIVE_TYPE(data: R_ADDITIVE_TYPEUpdateInput!, where: R_ADDITIVE_TYPEWhereUniqueInput!): R_ADDITIVE_TYPE
  updateR_CEMENT_TYPE(data: R_CEMENT_TYPEUpdateInput!, where: R_CEMENT_TYPEWhereUniqueInput!): R_CEMENT_TYPE
  updateR_COMPLETION_METHOD(data: R_COMPLETION_METHODUpdateInput!, where: R_COMPLETION_METHODWhereUniqueInput!): R_COMPLETION_METHOD
  updateR_COMPLETION_TYPE(data: R_COMPLETION_TYPEUpdateInput!, where: R_COMPLETION_TYPEWhereUniqueInput!): R_COMPLETION_TYPE
  updateR_DOCUMENT_TYPE(data: R_DOCUMENT_TYPEUpdateInput!, where: R_DOCUMENT_TYPEWhereUniqueInput!): R_DOCUMENT_TYPE
  updateR_DRILL_BIT_TYPE(data: R_DRILL_BIT_TYPEUpdateInput!, where: R_DRILL_BIT_TYPEWhereUniqueInput!): R_DRILL_BIT_TYPE
  updateR_DRILL_TOOL_TYPE(data: R_DRILL_TOOL_TYPEUpdateInput!, where: R_DRILL_TOOL_TYPEWhereUniqueInput!): R_DRILL_TOOL_TYPE
  updateR_DRILLING_MEDIA(data: R_DRILLING_MEDIAUpdateInput!, where: R_DRILLING_MEDIAWhereUniqueInput!): R_DRILLING_MEDIA
  updateR_LINER_TYPE(data: R_LINER_TYPEUpdateInput!, where: R_LINER_TYPEWhereUniqueInput!): R_LINER_TYPE
  updateR_LITH_ROCK_TYPE(data: R_LITH_ROCK_TYPEUpdateInput!, where: R_LITH_ROCK_TYPEWhereUniqueInput!): R_LITH_ROCK_TYPE
  updateR_LITHOLOGY(data: R_LITHOLOGYUpdateInput!, where: R_LITHOLOGYWhereUniqueInput!): R_LITHOLOGY
  updateR_LOG_TOOL_TYPE(data: R_LOG_TOOL_TYPEUpdateInput!, where: R_LOG_TOOL_TYPEWhereUniqueInput!): R_LOG_TOOL_TYPE
  updateR_PROPPANT_TYPE(data: R_PROPPANT_TYPEUpdateInput!, where: R_PROPPANT_TYPEWhereUniqueInput!): R_PROPPANT_TYPE
  updateR_RIG_BLOWOUT_PREVENTER(data: R_RIG_BLOWOUT_PREVENTERUpdateInput!, where: R_RIG_BLOWOUT_PREVENTERWhereUniqueInput!): R_RIG_BLOWOUT_PREVENTER
  updateR_RIG_TYPE(data: R_RIG_TYPEUpdateInput!, where: R_RIG_TYPEWhereUniqueInput!): R_RIG_TYPE
  updateR_WELL_CLASS(data: R_WELL_CLASSUpdateInput!, where: R_WELL_CLASSWhereUniqueInput!): R_WELL_CLASS
  updateR_WELL_DRILL_OP_TYPE(data: R_WELL_DRILL_OP_TYPEUpdateInput!, where: R_WELL_DRILL_OP_TYPEWhereUniqueInput!): R_WELL_DRILL_OP_TYPE
  updateR_WELL_STATUS(data: R_WELL_STATUSUpdateInput!, where: R_WELL_STATUSWhereUniqueInput!): R_WELL_STATUS
  updateR_WELL_TEST_TYPE(data: R_WELL_TEST_TYPEUpdateInput!, where: R_WELL_TEST_TYPEWhereUniqueInput!): R_WELL_TEST_TYPE
  updateUS_OFFSHORE_LEASE(data: US_OFFSHORE_LEASEUpdateInput!, where: US_OFFSHORE_LEASEWhereUniqueInput!): US_OFFSHORE_LEASE
  updateField(data: FieldUpdateInput!, where: FieldWhereUniqueInput!): Field
  updateWellSourceDetail(data: WellSourceDetailUpdateInput!, where: WellSourceDetailWhereUniqueInput!): WellSourceDetail
  updateRig(data: RigUpdateInput!, where: RigWhereUniqueInput!): Rig
  updateEventReporterDefinition(data: EventReporterDefinitionUpdateInput!, where: EventReporterDefinitionWhereUniqueInput!): EventReporterDefinition
  updateWellLifecycle(data: WellLifecycleUpdateInput!, where: WellLifecycleWhereUniqueInput!): WellLifecycle
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateObservation(data: ObservationUpdateInput!, where: ObservationWhereUniqueInput!): Observation
  updateEquipment(data: EquipmentUpdateInput!, where: EquipmentWhereUniqueInput!): Equipment
  updateActivityDefinition(data: ActivityDefinitionUpdateInput!, where: ActivityDefinitionWhereUniqueInput!): ActivityDefinition
  updateProblemDefinition(data: ProblemDefinitionUpdateInput!, where: ProblemDefinitionWhereUniqueInput!): ProblemDefinition
  updateWell(data: WellUpdateInput!, where: WellWhereUniqueInput!): Well
  updateObservationDefinition(data: ObservationDefinitionUpdateInput!, where: ObservationDefinitionWhereUniqueInput!): ObservationDefinition
  updateMechanism(data: MechanismUpdateInput!, where: MechanismWhereUniqueInput!): Mechanism
  updateCause(data: CauseUpdateInput!, where: CauseWhereUniqueInput!): Cause
  updateR_SOURCE(data: R_SOURCEUpdateInput!, where: R_SOURCEWhereUniqueInput!): R_SOURCE
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updatePhysicalQuantity(data: PhysicalQuantityUpdateInput!, where: PhysicalQuantityWhereUniqueInput!): PhysicalQuantity
  deleteMyThing(where: MyThingWhereUniqueInput!): MyThing
  deletePerson(where: PersonWhereUniqueInput!): Person
  deleteProblem(where: ProblemWhereUniqueInput!): Problem
  deleteStuckPipeProblemDetail(where: StuckPipeProblemDetailWhereUniqueInput!): StuckPipeProblemDetail
  deleteLostCirculationProblemDetail(where: LostCirculationProblemDetailWhereUniqueInput!): LostCirculationProblemDetail
  deleteKickProblemDetail(where: KickProblemDetailWhereUniqueInput!): KickProblemDetail
  deleteFishingProblemDetail(where: FishingProblemDetailWhereUniqueInput!): FishingProblemDetail
  deleteBallooningProblemDetail(where: BallooningProblemDetailWhereUniqueInput!): BallooningProblemDetail
  deleteWaitingOnProblemDetail(where: WaitingOnProblemDetailWhereUniqueInput!): WaitingOnProblemDetail
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteTrippingActivityDetail(where: TrippingActivityDetailWhereUniqueInput!): TrippingActivityDetail
  deleteCirculatingActivityDetail(where: CirculatingActivityDetailWhereUniqueInput!): CirculatingActivityDetail
  deleteDrillingActivityDetail(where: DrillingActivityDetailWhereUniqueInput!): DrillingActivityDetail
  deleteCementingActivityDetail(where: CementingActivityDetailWhereUniqueInput!): CementingActivityDetail
  deleteLoggingActivityDetail(where: LoggingActivityDetailWhereUniqueInput!): LoggingActivityDetail
  deletePerforatingActivityDetail(where: PerforatingActivityDetailWhereUniqueInput!): PerforatingActivityDetail
  deleteTestingActivityDetail(where: TestingActivityDetailWhereUniqueInput!): TestingActivityDetail
  deleteRiggingActivityDetail(where: RiggingActivityDetailWhereUniqueInput!): RiggingActivityDetail
  deleteCasingActivityDetail(where: CasingActivityDetailWhereUniqueInput!): CasingActivityDetail
  deleteChangeMudWeightActivityDetail(where: ChangeMudWeightActivityDetailWhereUniqueInput!): ChangeMudWeightActivityDetail
  deleteDocumentation(where: DocumentationWhereUniqueInput!): Documentation
  deleteR_ADDITIVE_TYPE(where: R_ADDITIVE_TYPEWhereUniqueInput!): R_ADDITIVE_TYPE
  deleteR_CEMENT_TYPE(where: R_CEMENT_TYPEWhereUniqueInput!): R_CEMENT_TYPE
  deleteR_COMPLETION_METHOD(where: R_COMPLETION_METHODWhereUniqueInput!): R_COMPLETION_METHOD
  deleteR_COMPLETION_TYPE(where: R_COMPLETION_TYPEWhereUniqueInput!): R_COMPLETION_TYPE
  deleteR_DOCUMENT_TYPE(where: R_DOCUMENT_TYPEWhereUniqueInput!): R_DOCUMENT_TYPE
  deleteR_DRILL_BIT_TYPE(where: R_DRILL_BIT_TYPEWhereUniqueInput!): R_DRILL_BIT_TYPE
  deleteR_DRILL_TOOL_TYPE(where: R_DRILL_TOOL_TYPEWhereUniqueInput!): R_DRILL_TOOL_TYPE
  deleteR_DRILLING_MEDIA(where: R_DRILLING_MEDIAWhereUniqueInput!): R_DRILLING_MEDIA
  deleteR_LINER_TYPE(where: R_LINER_TYPEWhereUniqueInput!): R_LINER_TYPE
  deleteR_LITH_ROCK_TYPE(where: R_LITH_ROCK_TYPEWhereUniqueInput!): R_LITH_ROCK_TYPE
  deleteR_LITHOLOGY(where: R_LITHOLOGYWhereUniqueInput!): R_LITHOLOGY
  deleteR_LOG_TOOL_TYPE(where: R_LOG_TOOL_TYPEWhereUniqueInput!): R_LOG_TOOL_TYPE
  deleteR_PROPPANT_TYPE(where: R_PROPPANT_TYPEWhereUniqueInput!): R_PROPPANT_TYPE
  deleteR_RIG_BLOWOUT_PREVENTER(where: R_RIG_BLOWOUT_PREVENTERWhereUniqueInput!): R_RIG_BLOWOUT_PREVENTER
  deleteR_RIG_TYPE(where: R_RIG_TYPEWhereUniqueInput!): R_RIG_TYPE
  deleteR_WELL_CLASS(where: R_WELL_CLASSWhereUniqueInput!): R_WELL_CLASS
  deleteR_WELL_DRILL_OP_TYPE(where: R_WELL_DRILL_OP_TYPEWhereUniqueInput!): R_WELL_DRILL_OP_TYPE
  deleteR_WELL_STATUS(where: R_WELL_STATUSWhereUniqueInput!): R_WELL_STATUS
  deleteR_WELL_TEST_TYPE(where: R_WELL_TEST_TYPEWhereUniqueInput!): R_WELL_TEST_TYPE
  deleteUS_OFFSHORE_LEASE(where: US_OFFSHORE_LEASEWhereUniqueInput!): US_OFFSHORE_LEASE
  deleteField(where: FieldWhereUniqueInput!): Field
  deleteWellSourceDetail(where: WellSourceDetailWhereUniqueInput!): WellSourceDetail
  deleteRig(where: RigWhereUniqueInput!): Rig
  deleteEventReporterDefinition(where: EventReporterDefinitionWhereUniqueInput!): EventReporterDefinition
  deleteWellLifecycle(where: WellLifecycleWhereUniqueInput!): WellLifecycle
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteObservation(where: ObservationWhereUniqueInput!): Observation
  deleteMyOtherThing(where: MyOtherThingWhereUniqueInput!): MyOtherThing
  deleteEquipment(where: EquipmentWhereUniqueInput!): Equipment
  deleteActivityDefinition(where: ActivityDefinitionWhereUniqueInput!): ActivityDefinition
  deleteProblemDefinition(where: ProblemDefinitionWhereUniqueInput!): ProblemDefinition
  deleteWell(where: WellWhereUniqueInput!): Well
  deleteObservationDefinition(where: ObservationDefinitionWhereUniqueInput!): ObservationDefinition
  deleteMechanism(where: MechanismWhereUniqueInput!): Mechanism
  deleteCause(where: CauseWhereUniqueInput!): Cause
  deleteR_SOURCE(where: R_SOURCEWhereUniqueInput!): R_SOURCE
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deletePhysicalQuantity(where: PhysicalQuantityWhereUniqueInput!): PhysicalQuantity
  upsertMyThing(where: MyThingWhereUniqueInput!, create: MyThingCreateInput!, update: MyThingUpdateInput!): MyThing!
  upsertPerson(where: PersonWhereUniqueInput!, create: PersonCreateInput!, update: PersonUpdateInput!): Person!
  upsertProblem(where: ProblemWhereUniqueInput!, create: ProblemCreateInput!, update: ProblemUpdateInput!): Problem!
  upsertStuckPipeProblemDetail(where: StuckPipeProblemDetailWhereUniqueInput!, create: StuckPipeProblemDetailCreateInput!, update: StuckPipeProblemDetailUpdateInput!): StuckPipeProblemDetail!
  upsertLostCirculationProblemDetail(where: LostCirculationProblemDetailWhereUniqueInput!, create: LostCirculationProblemDetailCreateInput!, update: LostCirculationProblemDetailUpdateInput!): LostCirculationProblemDetail!
  upsertKickProblemDetail(where: KickProblemDetailWhereUniqueInput!, create: KickProblemDetailCreateInput!, update: KickProblemDetailUpdateInput!): KickProblemDetail!
  upsertFishingProblemDetail(where: FishingProblemDetailWhereUniqueInput!, create: FishingProblemDetailCreateInput!, update: FishingProblemDetailUpdateInput!): FishingProblemDetail!
  upsertBallooningProblemDetail(where: BallooningProblemDetailWhereUniqueInput!, create: BallooningProblemDetailCreateInput!, update: BallooningProblemDetailUpdateInput!): BallooningProblemDetail!
  upsertWaitingOnProblemDetail(where: WaitingOnProblemDetailWhereUniqueInput!, create: WaitingOnProblemDetailCreateInput!, update: WaitingOnProblemDetailUpdateInput!): WaitingOnProblemDetail!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  upsertTrippingActivityDetail(where: TrippingActivityDetailWhereUniqueInput!, create: TrippingActivityDetailCreateInput!, update: TrippingActivityDetailUpdateInput!): TrippingActivityDetail!
  upsertCirculatingActivityDetail(where: CirculatingActivityDetailWhereUniqueInput!, create: CirculatingActivityDetailCreateInput!, update: CirculatingActivityDetailUpdateInput!): CirculatingActivityDetail!
  upsertDrillingActivityDetail(where: DrillingActivityDetailWhereUniqueInput!, create: DrillingActivityDetailCreateInput!, update: DrillingActivityDetailUpdateInput!): DrillingActivityDetail!
  upsertCementingActivityDetail(where: CementingActivityDetailWhereUniqueInput!, create: CementingActivityDetailCreateInput!, update: CementingActivityDetailUpdateInput!): CementingActivityDetail!
  upsertLoggingActivityDetail(where: LoggingActivityDetailWhereUniqueInput!, create: LoggingActivityDetailCreateInput!, update: LoggingActivityDetailUpdateInput!): LoggingActivityDetail!
  upsertPerforatingActivityDetail(where: PerforatingActivityDetailWhereUniqueInput!, create: PerforatingActivityDetailCreateInput!, update: PerforatingActivityDetailUpdateInput!): PerforatingActivityDetail!
  upsertTestingActivityDetail(where: TestingActivityDetailWhereUniqueInput!, create: TestingActivityDetailCreateInput!, update: TestingActivityDetailUpdateInput!): TestingActivityDetail!
  upsertRiggingActivityDetail(where: RiggingActivityDetailWhereUniqueInput!, create: RiggingActivityDetailCreateInput!, update: RiggingActivityDetailUpdateInput!): RiggingActivityDetail!
  upsertCasingActivityDetail(where: CasingActivityDetailWhereUniqueInput!, create: CasingActivityDetailCreateInput!, update: CasingActivityDetailUpdateInput!): CasingActivityDetail!
  upsertChangeMudWeightActivityDetail(where: ChangeMudWeightActivityDetailWhereUniqueInput!, create: ChangeMudWeightActivityDetailCreateInput!, update: ChangeMudWeightActivityDetailUpdateInput!): ChangeMudWeightActivityDetail!
  upsertDocumentation(where: DocumentationWhereUniqueInput!, create: DocumentationCreateInput!, update: DocumentationUpdateInput!): Documentation!
  upsertR_ADDITIVE_TYPE(where: R_ADDITIVE_TYPEWhereUniqueInput!, create: R_ADDITIVE_TYPECreateInput!, update: R_ADDITIVE_TYPEUpdateInput!): R_ADDITIVE_TYPE!
  upsertR_CEMENT_TYPE(where: R_CEMENT_TYPEWhereUniqueInput!, create: R_CEMENT_TYPECreateInput!, update: R_CEMENT_TYPEUpdateInput!): R_CEMENT_TYPE!
  upsertR_COMPLETION_METHOD(where: R_COMPLETION_METHODWhereUniqueInput!, create: R_COMPLETION_METHODCreateInput!, update: R_COMPLETION_METHODUpdateInput!): R_COMPLETION_METHOD!
  upsertR_COMPLETION_TYPE(where: R_COMPLETION_TYPEWhereUniqueInput!, create: R_COMPLETION_TYPECreateInput!, update: R_COMPLETION_TYPEUpdateInput!): R_COMPLETION_TYPE!
  upsertR_DOCUMENT_TYPE(where: R_DOCUMENT_TYPEWhereUniqueInput!, create: R_DOCUMENT_TYPECreateInput!, update: R_DOCUMENT_TYPEUpdateInput!): R_DOCUMENT_TYPE!
  upsertR_DRILL_BIT_TYPE(where: R_DRILL_BIT_TYPEWhereUniqueInput!, create: R_DRILL_BIT_TYPECreateInput!, update: R_DRILL_BIT_TYPEUpdateInput!): R_DRILL_BIT_TYPE!
  upsertR_DRILL_TOOL_TYPE(where: R_DRILL_TOOL_TYPEWhereUniqueInput!, create: R_DRILL_TOOL_TYPECreateInput!, update: R_DRILL_TOOL_TYPEUpdateInput!): R_DRILL_TOOL_TYPE!
  upsertR_DRILLING_MEDIA(where: R_DRILLING_MEDIAWhereUniqueInput!, create: R_DRILLING_MEDIACreateInput!, update: R_DRILLING_MEDIAUpdateInput!): R_DRILLING_MEDIA!
  upsertR_LINER_TYPE(where: R_LINER_TYPEWhereUniqueInput!, create: R_LINER_TYPECreateInput!, update: R_LINER_TYPEUpdateInput!): R_LINER_TYPE!
  upsertR_LITH_ROCK_TYPE(where: R_LITH_ROCK_TYPEWhereUniqueInput!, create: R_LITH_ROCK_TYPECreateInput!, update: R_LITH_ROCK_TYPEUpdateInput!): R_LITH_ROCK_TYPE!
  upsertR_LITHOLOGY(where: R_LITHOLOGYWhereUniqueInput!, create: R_LITHOLOGYCreateInput!, update: R_LITHOLOGYUpdateInput!): R_LITHOLOGY!
  upsertR_LOG_TOOL_TYPE(where: R_LOG_TOOL_TYPEWhereUniqueInput!, create: R_LOG_TOOL_TYPECreateInput!, update: R_LOG_TOOL_TYPEUpdateInput!): R_LOG_TOOL_TYPE!
  upsertR_PROPPANT_TYPE(where: R_PROPPANT_TYPEWhereUniqueInput!, create: R_PROPPANT_TYPECreateInput!, update: R_PROPPANT_TYPEUpdateInput!): R_PROPPANT_TYPE!
  upsertR_RIG_BLOWOUT_PREVENTER(where: R_RIG_BLOWOUT_PREVENTERWhereUniqueInput!, create: R_RIG_BLOWOUT_PREVENTERCreateInput!, update: R_RIG_BLOWOUT_PREVENTERUpdateInput!): R_RIG_BLOWOUT_PREVENTER!
  upsertR_RIG_TYPE(where: R_RIG_TYPEWhereUniqueInput!, create: R_RIG_TYPECreateInput!, update: R_RIG_TYPEUpdateInput!): R_RIG_TYPE!
  upsertR_WELL_CLASS(where: R_WELL_CLASSWhereUniqueInput!, create: R_WELL_CLASSCreateInput!, update: R_WELL_CLASSUpdateInput!): R_WELL_CLASS!
  upsertR_WELL_DRILL_OP_TYPE(where: R_WELL_DRILL_OP_TYPEWhereUniqueInput!, create: R_WELL_DRILL_OP_TYPECreateInput!, update: R_WELL_DRILL_OP_TYPEUpdateInput!): R_WELL_DRILL_OP_TYPE!
  upsertR_WELL_STATUS(where: R_WELL_STATUSWhereUniqueInput!, create: R_WELL_STATUSCreateInput!, update: R_WELL_STATUSUpdateInput!): R_WELL_STATUS!
  upsertR_WELL_TEST_TYPE(where: R_WELL_TEST_TYPEWhereUniqueInput!, create: R_WELL_TEST_TYPECreateInput!, update: R_WELL_TEST_TYPEUpdateInput!): R_WELL_TEST_TYPE!
  upsertUS_OFFSHORE_LEASE(where: US_OFFSHORE_LEASEWhereUniqueInput!, create: US_OFFSHORE_LEASECreateInput!, update: US_OFFSHORE_LEASEUpdateInput!): US_OFFSHORE_LEASE!
  upsertField(where: FieldWhereUniqueInput!, create: FieldCreateInput!, update: FieldUpdateInput!): Field!
  upsertWellSourceDetail(where: WellSourceDetailWhereUniqueInput!, create: WellSourceDetailCreateInput!, update: WellSourceDetailUpdateInput!): WellSourceDetail!
  upsertRig(where: RigWhereUniqueInput!, create: RigCreateInput!, update: RigUpdateInput!): Rig!
  upsertEventReporterDefinition(where: EventReporterDefinitionWhereUniqueInput!, create: EventReporterDefinitionCreateInput!, update: EventReporterDefinitionUpdateInput!): EventReporterDefinition!
  upsertWellLifecycle(where: WellLifecycleWhereUniqueInput!, create: WellLifecycleCreateInput!, update: WellLifecycleUpdateInput!): WellLifecycle!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertObservation(where: ObservationWhereUniqueInput!, create: ObservationCreateInput!, update: ObservationUpdateInput!): Observation!
  upsertEquipment(where: EquipmentWhereUniqueInput!, create: EquipmentCreateInput!, update: EquipmentUpdateInput!): Equipment!
  upsertActivityDefinition(where: ActivityDefinitionWhereUniqueInput!, create: ActivityDefinitionCreateInput!, update: ActivityDefinitionUpdateInput!): ActivityDefinition!
  upsertProblemDefinition(where: ProblemDefinitionWhereUniqueInput!, create: ProblemDefinitionCreateInput!, update: ProblemDefinitionUpdateInput!): ProblemDefinition!
  upsertWell(where: WellWhereUniqueInput!, create: WellCreateInput!, update: WellUpdateInput!): Well!
  upsertObservationDefinition(where: ObservationDefinitionWhereUniqueInput!, create: ObservationDefinitionCreateInput!, update: ObservationDefinitionUpdateInput!): ObservationDefinition!
  upsertMechanism(where: MechanismWhereUniqueInput!, create: MechanismCreateInput!, update: MechanismUpdateInput!): Mechanism!
  upsertCause(where: CauseWhereUniqueInput!, create: CauseCreateInput!, update: CauseUpdateInput!): Cause!
  upsertR_SOURCE(where: R_SOURCEWhereUniqueInput!, create: R_SOURCECreateInput!, update: R_SOURCEUpdateInput!): R_SOURCE!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  upsertPhysicalQuantity(where: PhysicalQuantityWhereUniqueInput!, create: PhysicalQuantityCreateInput!, update: PhysicalQuantityUpdateInput!): PhysicalQuantity!
  updateManyMyThings(data: MyThingUpdateInput!, where: MyThingWhereInput): BatchPayload!
  updateManySurfaceForms(data: SurfaceFormUpdateInput!, where: SurfaceFormWhereInput): BatchPayload!
  updateManyPersons(data: PersonUpdateInput!, where: PersonWhereInput): BatchPayload!
  updateManyProblems(data: ProblemUpdateInput!, where: ProblemWhereInput): BatchPayload!
  updateManyStuckPipeProblemDetails(data: StuckPipeProblemDetailUpdateInput!, where: StuckPipeProblemDetailWhereInput): BatchPayload!
  updateManyLostCirculationProblemDetails(data: LostCirculationProblemDetailUpdateInput!, where: LostCirculationProblemDetailWhereInput): BatchPayload!
  updateManyKickProblemDetails(data: KickProblemDetailUpdateInput!, where: KickProblemDetailWhereInput): BatchPayload!
  updateManyFishingProblemDetails(data: FishingProblemDetailUpdateInput!, where: FishingProblemDetailWhereInput): BatchPayload!
  updateManyBallooningProblemDetails(data: BallooningProblemDetailUpdateInput!, where: BallooningProblemDetailWhereInput): BatchPayload!
  updateManyWaitingOnProblemDetails(data: WaitingOnProblemDetailUpdateInput!, where: WaitingOnProblemDetailWhereInput): BatchPayload!
  updateManyActivities(data: ActivityUpdateInput!, where: ActivityWhereInput): BatchPayload!
  updateManyTrippingActivityDetails(data: TrippingActivityDetailUpdateInput!, where: TrippingActivityDetailWhereInput): BatchPayload!
  updateManyCirculatingActivityDetails(data: CirculatingActivityDetailUpdateInput!, where: CirculatingActivityDetailWhereInput): BatchPayload!
  updateManyDrillingActivityDetails(data: DrillingActivityDetailUpdateInput!, where: DrillingActivityDetailWhereInput): BatchPayload!
  updateManyCementingActivityDetails(data: CementingActivityDetailUpdateInput!, where: CementingActivityDetailWhereInput): BatchPayload!
  updateManyLoggingActivityDetails(data: LoggingActivityDetailUpdateInput!, where: LoggingActivityDetailWhereInput): BatchPayload!
  updateManyPerforatingActivityDetails(data: PerforatingActivityDetailUpdateInput!, where: PerforatingActivityDetailWhereInput): BatchPayload!
  updateManyTestingActivityDetails(data: TestingActivityDetailUpdateInput!, where: TestingActivityDetailWhereInput): BatchPayload!
  updateManyRiggingActivityDetails(data: RiggingActivityDetailUpdateInput!, where: RiggingActivityDetailWhereInput): BatchPayload!
  updateManyCasingActivityDetails(data: CasingActivityDetailUpdateInput!, where: CasingActivityDetailWhereInput): BatchPayload!
  updateManyChangeMudWeightActivityDetails(data: ChangeMudWeightActivityDetailUpdateInput!, where: ChangeMudWeightActivityDetailWhereInput): BatchPayload!
  updateManyDocumentations(data: DocumentationUpdateInput!, where: DocumentationWhereInput): BatchPayload!
  updateManyR_ADDITIVE_TYPEs(data: R_ADDITIVE_TYPEUpdateInput!, where: R_ADDITIVE_TYPEWhereInput): BatchPayload!
  updateManyR_CEMENT_TYPEs(data: R_CEMENT_TYPEUpdateInput!, where: R_CEMENT_TYPEWhereInput): BatchPayload!
  updateManyR_COMPLETION_METHODs(data: R_COMPLETION_METHODUpdateInput!, where: R_COMPLETION_METHODWhereInput): BatchPayload!
  updateManyR_COMPLETION_TYPEs(data: R_COMPLETION_TYPEUpdateInput!, where: R_COMPLETION_TYPEWhereInput): BatchPayload!
  updateManyR_DOCUMENT_TYPEs(data: R_DOCUMENT_TYPEUpdateInput!, where: R_DOCUMENT_TYPEWhereInput): BatchPayload!
  updateManyR_DRILL_BIT_TYPEs(data: R_DRILL_BIT_TYPEUpdateInput!, where: R_DRILL_BIT_TYPEWhereInput): BatchPayload!
  updateManyR_DRILL_TOOL_TYPEs(data: R_DRILL_TOOL_TYPEUpdateInput!, where: R_DRILL_TOOL_TYPEWhereInput): BatchPayload!
  updateManyR_DRILLING_MEDIAs(data: R_DRILLING_MEDIAUpdateInput!, where: R_DRILLING_MEDIAWhereInput): BatchPayload!
  updateManyR_LINER_TYPEs(data: R_LINER_TYPEUpdateInput!, where: R_LINER_TYPEWhereInput): BatchPayload!
  updateManyR_LITH_ROCK_TYPEs(data: R_LITH_ROCK_TYPEUpdateInput!, where: R_LITH_ROCK_TYPEWhereInput): BatchPayload!
  updateManyR_LITHOLOGies(data: R_LITHOLOGYUpdateInput!, where: R_LITHOLOGYWhereInput): BatchPayload!
  updateManyR_LOG_TOOL_TYPEs(data: R_LOG_TOOL_TYPEUpdateInput!, where: R_LOG_TOOL_TYPEWhereInput): BatchPayload!
  updateManyR_PROPPANT_TYPEs(data: R_PROPPANT_TYPEUpdateInput!, where: R_PROPPANT_TYPEWhereInput): BatchPayload!
  updateManyR_RIG_BLOWOUT_PREVENTERs(data: R_RIG_BLOWOUT_PREVENTERUpdateInput!, where: R_RIG_BLOWOUT_PREVENTERWhereInput): BatchPayload!
  updateManyR_RIG_TYPEs(data: R_RIG_TYPEUpdateInput!, where: R_RIG_TYPEWhereInput): BatchPayload!
  updateManyR_WELL_CLAsses(data: R_WELL_CLASSUpdateInput!, where: R_WELL_CLASSWhereInput): BatchPayload!
  updateManyR_WELL_DRILL_OP_TYPEs(data: R_WELL_DRILL_OP_TYPEUpdateInput!, where: R_WELL_DRILL_OP_TYPEWhereInput): BatchPayload!
  updateManyR_WELL_STATUSes(data: R_WELL_STATUSUpdateInput!, where: R_WELL_STATUSWhereInput): BatchPayload!
  updateManyR_WELL_TEST_TYPEs(data: R_WELL_TEST_TYPEUpdateInput!, where: R_WELL_TEST_TYPEWhereInput): BatchPayload!
  updateManyUS_OFFSHORE_LEASEs(data: US_OFFSHORE_LEASEUpdateInput!, where: US_OFFSHORE_LEASEWhereInput): BatchPayload!
  updateManyFields(data: FieldUpdateInput!, where: FieldWhereInput): BatchPayload!
  updateManyWellSourceDetails(data: WellSourceDetailUpdateInput!, where: WellSourceDetailWhereInput): BatchPayload!
  updateManyRigs(data: RigUpdateInput!, where: RigWhereInput): BatchPayload!
  updateManyEventReporterDefinitions(data: EventReporterDefinitionUpdateInput!, where: EventReporterDefinitionWhereInput): BatchPayload!
  updateManyWellLifecycles(data: WellLifecycleUpdateInput!, where: WellLifecycleWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  updateManyObservations(data: ObservationUpdateInput!, where: ObservationWhereInput): BatchPayload!
  updateManyEquipments(data: EquipmentUpdateInput!, where: EquipmentWhereInput): BatchPayload!
  updateManyActivityDefinitions(data: ActivityDefinitionUpdateInput!, where: ActivityDefinitionWhereInput): BatchPayload!
  updateManyProblemDefinitions(data: ProblemDefinitionUpdateInput!, where: ProblemDefinitionWhereInput): BatchPayload!
  updateManyWells(data: WellUpdateInput!, where: WellWhereInput): BatchPayload!
  updateManyObservationDefinitions(data: ObservationDefinitionUpdateInput!, where: ObservationDefinitionWhereInput): BatchPayload!
  updateManyMechanisms(data: MechanismUpdateInput!, where: MechanismWhereInput): BatchPayload!
  updateManyCauses(data: CauseUpdateInput!, where: CauseWhereInput): BatchPayload!
  updateManyR_SOURCEs(data: R_SOURCEUpdateInput!, where: R_SOURCEWhereInput): BatchPayload!
  updateManyOrganizations(data: OrganizationUpdateInput!, where: OrganizationWhereInput): BatchPayload!
  updateManyPhysicalQuantities(data: PhysicalQuantityUpdateInput!, where: PhysicalQuantityWhereInput): BatchPayload!
  deleteManyMyThings(where: MyThingWhereInput): BatchPayload!
  deleteManySurfaceForms(where: SurfaceFormWhereInput): BatchPayload!
  deleteManyPersons(where: PersonWhereInput): BatchPayload!
  deleteManyProblems(where: ProblemWhereInput): BatchPayload!
  deleteManyStuckPipeProblemDetails(where: StuckPipeProblemDetailWhereInput): BatchPayload!
  deleteManyLostCirculationProblemDetails(where: LostCirculationProblemDetailWhereInput): BatchPayload!
  deleteManyKickProblemDetails(where: KickProblemDetailWhereInput): BatchPayload!
  deleteManyFishingProblemDetails(where: FishingProblemDetailWhereInput): BatchPayload!
  deleteManyBallooningProblemDetails(where: BallooningProblemDetailWhereInput): BatchPayload!
  deleteManyWaitingOnProblemDetails(where: WaitingOnProblemDetailWhereInput): BatchPayload!
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
  deleteManyTrippingActivityDetails(where: TrippingActivityDetailWhereInput): BatchPayload!
  deleteManyCirculatingActivityDetails(where: CirculatingActivityDetailWhereInput): BatchPayload!
  deleteManyDrillingActivityDetails(where: DrillingActivityDetailWhereInput): BatchPayload!
  deleteManyCementingActivityDetails(where: CementingActivityDetailWhereInput): BatchPayload!
  deleteManyLoggingActivityDetails(where: LoggingActivityDetailWhereInput): BatchPayload!
  deleteManyPerforatingActivityDetails(where: PerforatingActivityDetailWhereInput): BatchPayload!
  deleteManyTestingActivityDetails(where: TestingActivityDetailWhereInput): BatchPayload!
  deleteManyRiggingActivityDetails(where: RiggingActivityDetailWhereInput): BatchPayload!
  deleteManyCasingActivityDetails(where: CasingActivityDetailWhereInput): BatchPayload!
  deleteManyChangeMudWeightActivityDetails(where: ChangeMudWeightActivityDetailWhereInput): BatchPayload!
  deleteManyDocumentations(where: DocumentationWhereInput): BatchPayload!
  deleteManyR_ADDITIVE_TYPEs(where: R_ADDITIVE_TYPEWhereInput): BatchPayload!
  deleteManyR_CEMENT_TYPEs(where: R_CEMENT_TYPEWhereInput): BatchPayload!
  deleteManyR_COMPLETION_METHODs(where: R_COMPLETION_METHODWhereInput): BatchPayload!
  deleteManyR_COMPLETION_TYPEs(where: R_COMPLETION_TYPEWhereInput): BatchPayload!
  deleteManyR_DOCUMENT_TYPEs(where: R_DOCUMENT_TYPEWhereInput): BatchPayload!
  deleteManyR_DRILL_BIT_TYPEs(where: R_DRILL_BIT_TYPEWhereInput): BatchPayload!
  deleteManyR_DRILL_TOOL_TYPEs(where: R_DRILL_TOOL_TYPEWhereInput): BatchPayload!
  deleteManyR_DRILLING_MEDIAs(where: R_DRILLING_MEDIAWhereInput): BatchPayload!
  deleteManyR_LINER_TYPEs(where: R_LINER_TYPEWhereInput): BatchPayload!
  deleteManyR_LITH_ROCK_TYPEs(where: R_LITH_ROCK_TYPEWhereInput): BatchPayload!
  deleteManyR_LITHOLOGies(where: R_LITHOLOGYWhereInput): BatchPayload!
  deleteManyR_LOG_TOOL_TYPEs(where: R_LOG_TOOL_TYPEWhereInput): BatchPayload!
  deleteManyR_PROPPANT_TYPEs(where: R_PROPPANT_TYPEWhereInput): BatchPayload!
  deleteManyR_RIG_BLOWOUT_PREVENTERs(where: R_RIG_BLOWOUT_PREVENTERWhereInput): BatchPayload!
  deleteManyR_RIG_TYPEs(where: R_RIG_TYPEWhereInput): BatchPayload!
  deleteManyR_WELL_CLAsses(where: R_WELL_CLASSWhereInput): BatchPayload!
  deleteManyR_WELL_DRILL_OP_TYPEs(where: R_WELL_DRILL_OP_TYPEWhereInput): BatchPayload!
  deleteManyR_WELL_STATUSes(where: R_WELL_STATUSWhereInput): BatchPayload!
  deleteManyR_WELL_TEST_TYPEs(where: R_WELL_TEST_TYPEWhereInput): BatchPayload!
  deleteManyUS_OFFSHORE_LEASEs(where: US_OFFSHORE_LEASEWhereInput): BatchPayload!
  deleteManyFields(where: FieldWhereInput): BatchPayload!
  deleteManyWellSourceDetails(where: WellSourceDetailWhereInput): BatchPayload!
  deleteManyRigs(where: RigWhereInput): BatchPayload!
  deleteManyEventReporterDefinitions(where: EventReporterDefinitionWhereInput): BatchPayload!
  deleteManyWellLifecycles(where: WellLifecycleWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyObservations(where: ObservationWhereInput): BatchPayload!
  deleteManyMyOtherThings(where: MyOtherThingWhereInput): BatchPayload!
  deleteManyEquipments(where: EquipmentWhereInput): BatchPayload!
  deleteManyActivityDefinitions(where: ActivityDefinitionWhereInput): BatchPayload!
  deleteManyProblemDefinitions(where: ProblemDefinitionWhereInput): BatchPayload!
  deleteManyWells(where: WellWhereInput): BatchPayload!
  deleteManyObservationDefinitions(where: ObservationDefinitionWhereInput): BatchPayload!
  deleteManyMechanisms(where: MechanismWhereInput): BatchPayload!
  deleteManyCauses(where: CauseWhereInput): BatchPayload!
  deleteManyR_SOURCEs(where: R_SOURCEWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyPhysicalQuantities(where: PhysicalQuantityWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type MyOtherThing implements Node {
  id: ID!
}

"""A connection to a list of items."""
type MyOtherThingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyOtherThingEdge]!
  aggregate: AggregateMyOtherThing!
}

input MyOtherThingCreateManyInput {
  connect: [MyOtherThingWhereUniqueInput!]
}

"""An edge in a connection."""
type MyOtherThingEdge {
  """The item at the end of the edge."""
  node: MyOtherThing!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MyOtherThingOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MyOtherThingPreviousValues {
  id: ID!
}

type MyOtherThingSubscriptionPayload {
  mutation: MutationType!
  node: MyOtherThing
  updatedFields: [String!]
  previousValues: MyOtherThingPreviousValues
}

input MyOtherThingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MyOtherThingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MyOtherThingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MyOtherThingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MyOtherThingWhereInput
}

input MyOtherThingUpdateManyInput {
  connect: [MyOtherThingWhereUniqueInput!]
  disconnect: [MyOtherThingWhereUniqueInput!]
  delete: [MyOtherThingWhereUniqueInput!]
}

input MyOtherThingWhereInput {
  """Logical AND on all given filters."""
  AND: [MyOtherThingWhereInput!]

  """Logical OR on all given filters."""
  OR: [MyOtherThingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MyOtherThingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  _MagicalBackRelation_MyOtherThingToMyThing_every: MyThingWhereInput
  _MagicalBackRelation_MyOtherThingToMyThing_some: MyThingWhereInput
  _MagicalBackRelation_MyOtherThingToMyThing_none: MyThingWhereInput
}

input MyOtherThingWhereUniqueInput {
  id: ID
}

type MyThing implements Node {
  id: ID!
  refs(where: MyOtherThingWhereInput, orderBy: MyOtherThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MyOtherThing!]
}

"""A connection to a list of items."""
type MyThingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyThingEdge]!
  aggregate: AggregateMyThing!
}

input MyThingCreateInput {
  refs: MyOtherThingCreateManyInput
}

"""An edge in a connection."""
type MyThingEdge {
  """The item at the end of the edge."""
  node: MyThing!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MyThingOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type MyThingPreviousValues {
  id: ID!
}

type MyThingSubscriptionPayload {
  mutation: MutationType!
  node: MyThing
  updatedFields: [String!]
  previousValues: MyThingPreviousValues
}

input MyThingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MyThingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MyThingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MyThingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MyThingWhereInput
}

input MyThingUpdateInput {
  refs: MyOtherThingUpdateManyInput
}

input MyThingWhereInput {
  """Logical AND on all given filters."""
  AND: [MyThingWhereInput!]

  """Logical OR on all given filters."""
  OR: [MyThingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MyThingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  refs_every: MyOtherThingWhereInput
  refs_some: MyOtherThingWhereInput
  refs_none: MyOtherThingWhereInput
}

input MyThingWhereUniqueInput {
  id: ID
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Observation implements Node {
  id: ID!
  name: String!
  definition(where: ObservationDefinitionWhereInput): ObservationDefinition!
  detailInstance: ID
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type ObservationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ObservationEdge]!
  aggregate: AggregateObservation!
}

input ObservationCreateInput {
  name: String!
  detailInstance: ID
  definition: ObservationDefinitionCreateOneInput!
  events: EventCreateManyWithoutObservationInput
}

input ObservationCreateManyInput {
  create: [ObservationCreateInput!]
  connect: [ObservationWhereUniqueInput!]
}

input ObservationCreateOneWithoutEventsInput {
  create: ObservationCreateWithoutEventsInput
  connect: ObservationWhereUniqueInput
}

input ObservationCreateWithoutEventsInput {
  name: String!
  detailInstance: ID
  definition: ObservationDefinitionCreateOneInput!
}

type ObservationDefinition implements Node {
  id: ID!
  name: String!
  detailKindName: String
  externalReference: String
}

"""A connection to a list of items."""
type ObservationDefinitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ObservationDefinitionEdge]!
  aggregate: AggregateObservationDefinition!
}

input ObservationDefinitionCreateInput {
  name: String!
  detailKindName: String
  externalReference: String
}

input ObservationDefinitionCreateOneInput {
  create: ObservationDefinitionCreateInput
  connect: ObservationDefinitionWhereUniqueInput
}

"""An edge in a connection."""
type ObservationDefinitionEdge {
  """The item at the end of the edge."""
  node: ObservationDefinition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ObservationDefinitionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  detailKindName_ASC
  detailKindName_DESC
  externalReference_ASC
  externalReference_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ObservationDefinitionPreviousValues {
  id: ID!
  name: String!
  detailKindName: String
  externalReference: String
}

type ObservationDefinitionSubscriptionPayload {
  mutation: MutationType!
  node: ObservationDefinition
  updatedFields: [String!]
  previousValues: ObservationDefinitionPreviousValues
}

input ObservationDefinitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ObservationDefinitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ObservationDefinitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ObservationDefinitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ObservationDefinitionWhereInput
}

input ObservationDefinitionUpdateDataInput {
  name: String
  detailKindName: String
  externalReference: String
}

input ObservationDefinitionUpdateInput {
  name: String
  detailKindName: String
  externalReference: String
}

input ObservationDefinitionUpdateOneInput {
  create: ObservationDefinitionCreateInput
  connect: ObservationDefinitionWhereUniqueInput
  delete: Boolean
  update: ObservationDefinitionUpdateDataInput
  upsert: ObservationDefinitionUpsertNestedInput
}

input ObservationDefinitionUpsertNestedInput {
  update: ObservationDefinitionUpdateDataInput!
  create: ObservationDefinitionCreateInput!
}

input ObservationDefinitionWhereInput {
  """Logical AND on all given filters."""
  AND: [ObservationDefinitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ObservationDefinitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ObservationDefinitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  detailKindName: String

  """All values that are not equal to given value."""
  detailKindName_not: String

  """All values that are contained in given list."""
  detailKindName_in: [String!]

  """All values that are not contained in given list."""
  detailKindName_not_in: [String!]

  """All values less than the given value."""
  detailKindName_lt: String

  """All values less than or equal the given value."""
  detailKindName_lte: String

  """All values greater than the given value."""
  detailKindName_gt: String

  """All values greater than or equal the given value."""
  detailKindName_gte: String

  """All values containing the given string."""
  detailKindName_contains: String

  """All values not containing the given string."""
  detailKindName_not_contains: String

  """All values starting with the given string."""
  detailKindName_starts_with: String

  """All values not starting with the given string."""
  detailKindName_not_starts_with: String

  """All values ending with the given string."""
  detailKindName_ends_with: String

  """All values not ending with the given string."""
  detailKindName_not_ends_with: String
  externalReference: String

  """All values that are not equal to given value."""
  externalReference_not: String

  """All values that are contained in given list."""
  externalReference_in: [String!]

  """All values that are not contained in given list."""
  externalReference_not_in: [String!]

  """All values less than the given value."""
  externalReference_lt: String

  """All values less than or equal the given value."""
  externalReference_lte: String

  """All values greater than the given value."""
  externalReference_gt: String

  """All values greater than or equal the given value."""
  externalReference_gte: String

  """All values containing the given string."""
  externalReference_contains: String

  """All values not containing the given string."""
  externalReference_not_contains: String

  """All values starting with the given string."""
  externalReference_starts_with: String

  """All values not starting with the given string."""
  externalReference_not_starts_with: String

  """All values ending with the given string."""
  externalReference_ends_with: String

  """All values not ending with the given string."""
  externalReference_not_ends_with: String
  _MagicalBackRelation_ObservationToObservationDefinition_every: ObservationWhereInput
  _MagicalBackRelation_ObservationToObservationDefinition_some: ObservationWhereInput
  _MagicalBackRelation_ObservationToObservationDefinition_none: ObservationWhereInput
}

input ObservationDefinitionWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type ObservationEdge {
  """The item at the end of the edge."""
  node: Observation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ObservationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  detailInstance_ASC
  detailInstance_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ObservationPreviousValues {
  id: ID!
  name: String!
  detailInstance: ID
}

type ObservationSubscriptionPayload {
  mutation: MutationType!
  node: Observation
  updatedFields: [String!]
  previousValues: ObservationPreviousValues
}

input ObservationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ObservationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ObservationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ObservationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ObservationWhereInput
}

input ObservationUpdateDataInput {
  name: String
  detailInstance: ID
  definition: ObservationDefinitionUpdateOneInput
  events: EventUpdateManyWithoutObservationInput
}

input ObservationUpdateInput {
  name: String
  detailInstance: ID
  definition: ObservationDefinitionUpdateOneInput
  events: EventUpdateManyWithoutObservationInput
}

input ObservationUpdateManyInput {
  create: [ObservationCreateInput!]
  connect: [ObservationWhereUniqueInput!]
  disconnect: [ObservationWhereUniqueInput!]
  delete: [ObservationWhereUniqueInput!]
  update: [ObservationUpdateWithWhereUniqueNestedInput!]
  upsert: [ObservationUpsertWithWhereUniqueNestedInput!]
}

input ObservationUpdateOneWithoutEventsInput {
  create: ObservationCreateWithoutEventsInput
  connect: ObservationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ObservationUpdateWithoutEventsDataInput
  upsert: ObservationUpsertWithoutEventsInput
}

input ObservationUpdateWithoutEventsDataInput {
  name: String
  detailInstance: ID
  definition: ObservationDefinitionUpdateOneInput
}

input ObservationUpdateWithWhereUniqueNestedInput {
  where: ObservationWhereUniqueInput!
  data: ObservationUpdateDataInput!
}

input ObservationUpsertWithoutEventsInput {
  update: ObservationUpdateWithoutEventsDataInput!
  create: ObservationCreateWithoutEventsInput!
}

input ObservationUpsertWithWhereUniqueNestedInput {
  where: ObservationWhereUniqueInput!
  update: ObservationUpdateDataInput!
  create: ObservationCreateInput!
}

input ObservationWhereInput {
  """Logical AND on all given filters."""
  AND: [ObservationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ObservationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ObservationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  detailInstance: ID

  """All values that are not equal to given value."""
  detailInstance_not: ID

  """All values that are contained in given list."""
  detailInstance_in: [ID!]

  """All values that are not contained in given list."""
  detailInstance_not_in: [ID!]

  """All values less than the given value."""
  detailInstance_lt: ID

  """All values less than or equal the given value."""
  detailInstance_lte: ID

  """All values greater than the given value."""
  detailInstance_gt: ID

  """All values greater than or equal the given value."""
  detailInstance_gte: ID

  """All values containing the given string."""
  detailInstance_contains: ID

  """All values not containing the given string."""
  detailInstance_not_contains: ID

  """All values starting with the given string."""
  detailInstance_starts_with: ID

  """All values not starting with the given string."""
  detailInstance_not_starts_with: ID

  """All values ending with the given string."""
  detailInstance_ends_with: ID

  """All values not ending with the given string."""
  detailInstance_not_ends_with: ID
  definition: ObservationDefinitionWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  _MagicalBackRelation_ObservationToProblem_every: ProblemWhereInput
  _MagicalBackRelation_ObservationToProblem_some: ProblemWhereInput
  _MagicalBackRelation_ObservationToProblem_none: ProblemWhereInput
}

input ObservationWhereUniqueInput {
  id: ID
}

type Organization implements Node {
  id: ID!
  name: String
}

"""A connection to a list of items."""
type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  name: String
}

input OrganizationCreateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
}

input OrganizationUpdateDataInput {
  name: String
}

input OrganizationUpdateInput {
  name: String
}

input OrganizationUpdateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganizationUpdateDataInput
  upsert: OrganizationUpsertNestedInput
}

input OrganizationUpsertNestedInput {
  update: OrganizationUpdateDataInput!
  create: OrganizationCreateInput!
}

input OrganizationWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  _MagicalBackRelation_OrganizationToProblem_every: ProblemWhereInput
  _MagicalBackRelation_OrganizationToProblem_some: ProblemWhereInput
  _MagicalBackRelation_OrganizationToProblem_none: ProblemWhereInput
  _MagicalBackRelation_OrganizationToWell_every: WellWhereInput
  _MagicalBackRelation_OrganizationToWell_some: WellWhereInput
  _MagicalBackRelation_OrganizationToWell_none: WellWhereInput
  _MagicalBackRelation_EquipmentToOrganization_every: EquipmentWhereInput
  _MagicalBackRelation_EquipmentToOrganization_some: EquipmentWhereInput
  _MagicalBackRelation_EquipmentToOrganization_none: EquipmentWhereInput
  _MagicalBackRelation_OrganizationToRig_every: RigWhereInput
  _MagicalBackRelation_OrganizationToRig_some: RigWhereInput
  _MagicalBackRelation_OrganizationToRig_none: RigWhereInput
  _MagicalBackRelation_ActivityToOrganization_every: ActivityWhereInput
  _MagicalBackRelation_ActivityToOrganization_some: ActivityWhereInput
  _MagicalBackRelation_ActivityToOrganization_none: ActivityWhereInput
}

input OrganizationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PerforatingActivityDetail implements Node {
  id: ID!
  name: String!
  from(where: PhysicalQuantityWhereInput): PhysicalQuantity
  to(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type PerforatingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PerforatingActivityDetailEdge]!
  aggregate: AggregatePerforatingActivityDetail!
}

input PerforatingActivityDetailCreateInput {
  name: String!
  from: PhysicalQuantityCreateOneInput
  to: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type PerforatingActivityDetailEdge {
  """The item at the end of the edge."""
  node: PerforatingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PerforatingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PerforatingActivityDetailPreviousValues {
  id: ID!
  name: String!
}

type PerforatingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: PerforatingActivityDetail
  updatedFields: [String!]
  previousValues: PerforatingActivityDetailPreviousValues
}

input PerforatingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PerforatingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerforatingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerforatingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PerforatingActivityDetailWhereInput
}

input PerforatingActivityDetailUpdateInput {
  name: String
  from: PhysicalQuantityUpdateOneInput
  to: PhysicalQuantityUpdateOneInput
}

input PerforatingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [PerforatingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerforatingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerforatingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  from: PhysicalQuantityWhereInput
  to: PhysicalQuantityWhereInput
}

input PerforatingActivityDetailWhereUniqueInput {
  id: ID
}

type Person implements Node {
  id: ID!
  name: String!
  phone: String
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]!
  aggregate: AggregatePerson!
}

input PersonCreateInput {
  name: String!
  phone: String
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PersonPreviousValues {
  id: ID!
  name: String!
  phone: String
}

type PersonSubscriptionPayload {
  mutation: MutationType!
  node: Person
  updatedFields: [String!]
  previousValues: PersonPreviousValues
}

input PersonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonWhereInput
}

input PersonUpdateInput {
  name: String
  phone: String
}

input PersonWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
}

input PersonWhereUniqueInput {
  id: ID
}

type PhysicalQuantity implements Node {
  id: ID!
  name: String!
  magnitude: Float!
  unitOfMeasure: String!
}

"""A connection to a list of items."""
type PhysicalQuantityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhysicalQuantityEdge]!
  aggregate: AggregatePhysicalQuantity!
}

input PhysicalQuantityCreateInput {
  name: String!
  magnitude: Float!
  unitOfMeasure: String!
}

input PhysicalQuantityCreateOneInput {
  create: PhysicalQuantityCreateInput
  connect: PhysicalQuantityWhereUniqueInput
}

"""An edge in a connection."""
type PhysicalQuantityEdge {
  """The item at the end of the edge."""
  node: PhysicalQuantity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhysicalQuantityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  magnitude_ASC
  magnitude_DESC
  unitOfMeasure_ASC
  unitOfMeasure_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhysicalQuantityPreviousValues {
  id: ID!
  name: String!
  magnitude: Float!
  unitOfMeasure: String!
}

type PhysicalQuantitySubscriptionPayload {
  mutation: MutationType!
  node: PhysicalQuantity
  updatedFields: [String!]
  previousValues: PhysicalQuantityPreviousValues
}

input PhysicalQuantitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalQuantitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalQuantitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalQuantitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalQuantityWhereInput
}

input PhysicalQuantityUpdateDataInput {
  name: String
  magnitude: Float
  unitOfMeasure: String
}

input PhysicalQuantityUpdateInput {
  name: String
  magnitude: Float
  unitOfMeasure: String
}

input PhysicalQuantityUpdateOneInput {
  create: PhysicalQuantityCreateInput
  connect: PhysicalQuantityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PhysicalQuantityUpdateDataInput
  upsert: PhysicalQuantityUpsertNestedInput
}

input PhysicalQuantityUpsertNestedInput {
  update: PhysicalQuantityUpdateDataInput!
  create: PhysicalQuantityCreateInput!
}

input PhysicalQuantityWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalQuantityWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalQuantityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalQuantityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  magnitude: Float

  """All values that are not equal to given value."""
  magnitude_not: Float

  """All values that are contained in given list."""
  magnitude_in: [Float!]

  """All values that are not contained in given list."""
  magnitude_not_in: [Float!]

  """All values less than the given value."""
  magnitude_lt: Float

  """All values less than or equal the given value."""
  magnitude_lte: Float

  """All values greater than the given value."""
  magnitude_gt: Float

  """All values greater than or equal the given value."""
  magnitude_gte: Float
  unitOfMeasure: String

  """All values that are not equal to given value."""
  unitOfMeasure_not: String

  """All values that are contained in given list."""
  unitOfMeasure_in: [String!]

  """All values that are not contained in given list."""
  unitOfMeasure_not_in: [String!]

  """All values less than the given value."""
  unitOfMeasure_lt: String

  """All values less than or equal the given value."""
  unitOfMeasure_lte: String

  """All values greater than the given value."""
  unitOfMeasure_gt: String

  """All values greater than or equal the given value."""
  unitOfMeasure_gte: String

  """All values containing the given string."""
  unitOfMeasure_contains: String

  """All values not containing the given string."""
  unitOfMeasure_not_contains: String

  """All values starting with the given string."""
  unitOfMeasure_starts_with: String

  """All values not starting with the given string."""
  unitOfMeasure_not_starts_with: String

  """All values ending with the given string."""
  unitOfMeasure_ends_with: String

  """All values not ending with the given string."""
  unitOfMeasure_not_ends_with: String
  _MagicalBackRelation_StuckPipeProblemDetail_depth_every: StuckPipeProblemDetailWhereInput
  _MagicalBackRelation_StuckPipeProblemDetail_depth_some: StuckPipeProblemDetailWhereInput
  _MagicalBackRelation_StuckPipeProblemDetail_depth_none: StuckPipeProblemDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_holeSize_every: DrillingActivityDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_holeSize_some: DrillingActivityDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_holeSize_none: DrillingActivityDetailWhereInput
  _MagicalBackRelation_CirculatingActivityDetailToPhysicalQuantity_every: CirculatingActivityDetailWhereInput
  _MagicalBackRelation_CirculatingActivityDetailToPhysicalQuantity_some: CirculatingActivityDetailWhereInput
  _MagicalBackRelation_CirculatingActivityDetailToPhysicalQuantity_none: CirculatingActivityDetailWhereInput
  _MagicalBackRelation_PhysicalQuantityToProblem_every: ProblemWhereInput
  _MagicalBackRelation_PhysicalQuantityToProblem_some: ProblemWhereInput
  _MagicalBackRelation_PhysicalQuantityToProblem_none: ProblemWhereInput
  _MagicalBackRelation_BallooningProblemDetail_volume_every: BallooningProblemDetailWhereInput
  _MagicalBackRelation_BallooningProblemDetail_volume_some: BallooningProblemDetailWhereInput
  _MagicalBackRelation_BallooningProblemDetail_volume_none: BallooningProblemDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_from_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_from_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_from_none: CasingActivityDetailWhereInput
  _MagicalBackRelation_Event_depthMD_every: EventWhereInput
  _MagicalBackRelation_Event_depthMD_some: EventWhereInput
  _MagicalBackRelation_Event_depthMD_none: EventWhereInput
  _MagicalBackRelation_ActivityToPhysicalQuantity_every: ActivityWhereInput
  _MagicalBackRelation_ActivityToPhysicalQuantity_some: ActivityWhereInput
  _MagicalBackRelation_ActivityToPhysicalQuantity_none: ActivityWhereInput
  _MagicalBackRelation_CasingActivityDetail_shoeTestPressure_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_shoeTestPressure_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_shoeTestPressure_none: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_casingSize_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_casingSize_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_casingSize_none: CasingActivityDetailWhereInput
  _MagicalBackRelation_LostCirculationProblemDetail_depth_every: LostCirculationProblemDetailWhereInput
  _MagicalBackRelation_LostCirculationProblemDetail_depth_some: LostCirculationProblemDetailWhereInput
  _MagicalBackRelation_LostCirculationProblemDetail_depth_none: LostCirculationProblemDetailWhereInput
  _MagicalBackRelation_PerforatingActivityDetail_to_every: PerforatingActivityDetailWhereInput
  _MagicalBackRelation_PerforatingActivityDetail_to_some: PerforatingActivityDetailWhereInput
  _MagicalBackRelation_PerforatingActivityDetail_to_none: PerforatingActivityDetailWhereInput
  _MagicalBackRelation_Well_WATER_DEPTH_every: WellWhereInput
  _MagicalBackRelation_Well_WATER_DEPTH_some: WellWhereInput
  _MagicalBackRelation_Well_WATER_DEPTH_none: WellWhereInput
  _MagicalBackRelation_TestingActivityDetail_pressure_every: TestingActivityDetailWhereInput
  _MagicalBackRelation_TestingActivityDetail_pressure_some: TestingActivityDetailWhereInput
  _MagicalBackRelation_TestingActivityDetail_pressure_none: TestingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_linerTestPressure_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_linerTestPressure_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_linerTestPressure_none: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_cementVolumePumped_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_cementVolumePumped_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_cementVolumePumped_none: CasingActivityDetailWhereInput
  _MagicalBackRelation_KickProblemDetail_depth_every: KickProblemDetailWhereInput
  _MagicalBackRelation_KickProblemDetail_depth_some: KickProblemDetailWhereInput
  _MagicalBackRelation_KickProblemDetail_depth_none: KickProblemDetailWhereInput
  _MagicalBackRelation_Well_FINAL_TD_every: WellWhereInput
  _MagicalBackRelation_Well_FINAL_TD_some: WellWhereInput
  _MagicalBackRelation_Well_FINAL_TD_none: WellWhereInput
  _MagicalBackRelation_KickProblemDetail_volume_every: KickProblemDetailWhereInput
  _MagicalBackRelation_KickProblemDetail_volume_some: KickProblemDetailWhereInput
  _MagicalBackRelation_KickProblemDetail_volume_none: KickProblemDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_from_every: DrillingActivityDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_from_some: DrillingActivityDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_from_none: DrillingActivityDetailWhereInput
  _MagicalBackRelation_StuckPipeProblemDetail_jarForce_every: StuckPipeProblemDetailWhereInput
  _MagicalBackRelation_StuckPipeProblemDetail_jarForce_some: StuckPipeProblemDetailWhereInput
  _MagicalBackRelation_StuckPipeProblemDetail_jarForce_none: StuckPipeProblemDetailWhereInput
  _MagicalBackRelation_TrippingActivityDetail_to_every: TrippingActivityDetailWhereInput
  _MagicalBackRelation_TrippingActivityDetail_to_some: TrippingActivityDetailWhereInput
  _MagicalBackRelation_TrippingActivityDetail_to_none: TrippingActivityDetailWhereInput
  _MagicalBackRelation_CementingActivityDetail_topOfCement_every: CementingActivityDetailWhereInput
  _MagicalBackRelation_CementingActivityDetail_topOfCement_some: CementingActivityDetailWhereInput
  _MagicalBackRelation_CementingActivityDetail_topOfCement_none: CementingActivityDetailWhereInput
  _MagicalBackRelation_LoggingActivityDetail_bottomOfInterval_every: LoggingActivityDetailWhereInput
  _MagicalBackRelation_LoggingActivityDetail_bottomOfInterval_some: LoggingActivityDetailWhereInput
  _MagicalBackRelation_LoggingActivityDetail_bottomOfInterval_none: LoggingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_weight_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_weight_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_weight_none: CasingActivityDetailWhereInput
  _MagicalBackRelation_TrippingActivityDetail_from_every: TrippingActivityDetailWhereInput
  _MagicalBackRelation_TrippingActivityDetail_from_some: TrippingActivityDetailWhereInput
  _MagicalBackRelation_TrippingActivityDetail_from_none: TrippingActivityDetailWhereInput
  _MagicalBackRelation_LoggingActivityDetail_topOfInterval_every: LoggingActivityDetailWhereInput
  _MagicalBackRelation_LoggingActivityDetail_topOfInterval_some: LoggingActivityDetailWhereInput
  _MagicalBackRelation_LoggingActivityDetail_topOfInterval_none: LoggingActivityDetailWhereInput
  _MagicalBackRelation_Event_depthTVD_every: EventWhereInput
  _MagicalBackRelation_Event_depthTVD_some: EventWhereInput
  _MagicalBackRelation_Event_depthTVD_none: EventWhereInput
  _MagicalBackRelation_CasingActivityDetail_to_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_to_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_to_none: CasingActivityDetailWhereInput
  _MagicalBackRelation_FishingProblemDetailToPhysicalQuantity_every: FishingProblemDetailWhereInput
  _MagicalBackRelation_FishingProblemDetailToPhysicalQuantity_some: FishingProblemDetailWhereInput
  _MagicalBackRelation_FishingProblemDetailToPhysicalQuantity_none: FishingProblemDetailWhereInput
  _MagicalBackRelation_ChangeMudWeightActivityDetailToPhysicalQuantity_every: ChangeMudWeightActivityDetailWhereInput
  _MagicalBackRelation_ChangeMudWeightActivityDetailToPhysicalQuantity_some: ChangeMudWeightActivityDetailWhereInput
  _MagicalBackRelation_ChangeMudWeightActivityDetailToPhysicalQuantity_none: ChangeMudWeightActivityDetailWhereInput
  _MagicalBackRelation_CementingActivityDetail_bottomOfCement_every: CementingActivityDetailWhereInput
  _MagicalBackRelation_CementingActivityDetail_bottomOfCement_some: CementingActivityDetailWhereInput
  _MagicalBackRelation_CementingActivityDetail_bottomOfCement_none: CementingActivityDetailWhereInput
  _MagicalBackRelation_BallooningProblemDetail_depth_every: BallooningProblemDetailWhereInput
  _MagicalBackRelation_BallooningProblemDetail_depth_some: BallooningProblemDetailWhereInput
  _MagicalBackRelation_BallooningProblemDetail_depth_none: BallooningProblemDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_to_every: DrillingActivityDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_to_some: DrillingActivityDetailWhereInput
  _MagicalBackRelation_DrillingActivityDetail_to_none: DrillingActivityDetailWhereInput
  _MagicalBackRelation_TestingActivityDetail_timeHeld_every: TestingActivityDetailWhereInput
  _MagicalBackRelation_TestingActivityDetail_timeHeld_some: TestingActivityDetailWhereInput
  _MagicalBackRelation_TestingActivityDetail_timeHeld_none: TestingActivityDetailWhereInput
  _MagicalBackRelation_LostCirculationProblemDetail_volume_every: LostCirculationProblemDetailWhereInput
  _MagicalBackRelation_LostCirculationProblemDetail_volume_some: LostCirculationProblemDetailWhereInput
  _MagicalBackRelation_LostCirculationProblemDetail_volume_none: LostCirculationProblemDetailWhereInput
  _MagicalBackRelation_PhysicalQuantityToRig_every: RigWhereInput
  _MagicalBackRelation_PhysicalQuantityToRig_some: RigWhereInput
  _MagicalBackRelation_PhysicalQuantityToRig_none: RigWhereInput
  _MagicalBackRelation_PerforatingActivityDetail_from_every: PerforatingActivityDetailWhereInput
  _MagicalBackRelation_PerforatingActivityDetail_from_some: PerforatingActivityDetailWhereInput
  _MagicalBackRelation_PerforatingActivityDetail_from_none: PerforatingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_holeSize_every: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_holeSize_some: CasingActivityDetailWhereInput
  _MagicalBackRelation_CasingActivityDetail_holeSize_none: CasingActivityDetailWhereInput
}

input PhysicalQuantityWhereUniqueInput {
  id: ID
}

type Problem implements Node {
  id: ID!
  name: String!
  duration(where: PhysicalQuantityWhereInput): PhysicalQuantity
  responsibleOrganization(where: OrganizationWhereInput): Organization
  definition(where: ProblemDefinitionWhereInput): ProblemDefinition
  detailInstance: ID
  severity: Int
  observations(where: ObservationWhereInput, orderBy: ObservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Observation!]
  affectedEquipment(where: EquipmentWhereInput): Equipment
  causes(where: CauseWhereInput, orderBy: CauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cause!]
  nptLevel: Int
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type ProblemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProblemEdge]!
  aggregate: AggregateProblem!
}

input ProblemCreateInput {
  name: String!
  detailInstance: ID
  severity: Int
  nptLevel: Int
  duration: PhysicalQuantityCreateOneInput
  responsibleOrganization: OrganizationCreateOneInput
  definition: ProblemDefinitionCreateOneInput
  observations: ObservationCreateManyInput
  affectedEquipment: EquipmentCreateOneInput
  causes: CauseCreateManyInput
  events: EventCreateManyWithoutProblemInput
}

input ProblemCreateOneWithoutEventsInput {
  create: ProblemCreateWithoutEventsInput
  connect: ProblemWhereUniqueInput
}

input ProblemCreateWithoutEventsInput {
  name: String!
  detailInstance: ID
  severity: Int
  nptLevel: Int
  duration: PhysicalQuantityCreateOneInput
  responsibleOrganization: OrganizationCreateOneInput
  definition: ProblemDefinitionCreateOneInput
  observations: ObservationCreateManyInput
  affectedEquipment: EquipmentCreateOneInput
  causes: CauseCreateManyInput
}

type ProblemDefinition implements Node {
  id: ID!
  name: String!
  detailKindName: String
  externalReference: String
  mechanisms(where: MechanismWhereInput, orderBy: MechanismOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mechanism!]
  resolutions(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

"""A connection to a list of items."""
type ProblemDefinitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProblemDefinitionEdge]!
  aggregate: AggregateProblemDefinition!
}

input ProblemDefinitionCreateInput {
  name: String!
  detailKindName: String
  externalReference: String
  mechanisms: MechanismCreateManyInput
  resolutions: EventCreateManyInput
}

input ProblemDefinitionCreateOneInput {
  create: ProblemDefinitionCreateInput
  connect: ProblemDefinitionWhereUniqueInput
}

"""An edge in a connection."""
type ProblemDefinitionEdge {
  """The item at the end of the edge."""
  node: ProblemDefinition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProblemDefinitionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  detailKindName_ASC
  detailKindName_DESC
  externalReference_ASC
  externalReference_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProblemDefinitionPreviousValues {
  id: ID!
  name: String!
  detailKindName: String
  externalReference: String
}

type ProblemDefinitionSubscriptionPayload {
  mutation: MutationType!
  node: ProblemDefinition
  updatedFields: [String!]
  previousValues: ProblemDefinitionPreviousValues
}

input ProblemDefinitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProblemDefinitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProblemDefinitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProblemDefinitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProblemDefinitionWhereInput
}

input ProblemDefinitionUpdateDataInput {
  name: String
  detailKindName: String
  externalReference: String
  mechanisms: MechanismUpdateManyInput
  resolutions: EventUpdateManyInput
}

input ProblemDefinitionUpdateInput {
  name: String
  detailKindName: String
  externalReference: String
  mechanisms: MechanismUpdateManyInput
  resolutions: EventUpdateManyInput
}

input ProblemDefinitionUpdateOneInput {
  create: ProblemDefinitionCreateInput
  connect: ProblemDefinitionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProblemDefinitionUpdateDataInput
  upsert: ProblemDefinitionUpsertNestedInput
}

input ProblemDefinitionUpsertNestedInput {
  update: ProblemDefinitionUpdateDataInput!
  create: ProblemDefinitionCreateInput!
}

input ProblemDefinitionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProblemDefinitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProblemDefinitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProblemDefinitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  detailKindName: String

  """All values that are not equal to given value."""
  detailKindName_not: String

  """All values that are contained in given list."""
  detailKindName_in: [String!]

  """All values that are not contained in given list."""
  detailKindName_not_in: [String!]

  """All values less than the given value."""
  detailKindName_lt: String

  """All values less than or equal the given value."""
  detailKindName_lte: String

  """All values greater than the given value."""
  detailKindName_gt: String

  """All values greater than or equal the given value."""
  detailKindName_gte: String

  """All values containing the given string."""
  detailKindName_contains: String

  """All values not containing the given string."""
  detailKindName_not_contains: String

  """All values starting with the given string."""
  detailKindName_starts_with: String

  """All values not starting with the given string."""
  detailKindName_not_starts_with: String

  """All values ending with the given string."""
  detailKindName_ends_with: String

  """All values not ending with the given string."""
  detailKindName_not_ends_with: String
  externalReference: String

  """All values that are not equal to given value."""
  externalReference_not: String

  """All values that are contained in given list."""
  externalReference_in: [String!]

  """All values that are not contained in given list."""
  externalReference_not_in: [String!]

  """All values less than the given value."""
  externalReference_lt: String

  """All values less than or equal the given value."""
  externalReference_lte: String

  """All values greater than the given value."""
  externalReference_gt: String

  """All values greater than or equal the given value."""
  externalReference_gte: String

  """All values containing the given string."""
  externalReference_contains: String

  """All values not containing the given string."""
  externalReference_not_contains: String

  """All values starting with the given string."""
  externalReference_starts_with: String

  """All values not starting with the given string."""
  externalReference_not_starts_with: String

  """All values ending with the given string."""
  externalReference_ends_with: String

  """All values not ending with the given string."""
  externalReference_not_ends_with: String
  mechanisms_every: MechanismWhereInput
  mechanisms_some: MechanismWhereInput
  mechanisms_none: MechanismWhereInput
  resolutions_every: EventWhereInput
  resolutions_some: EventWhereInput
  resolutions_none: EventWhereInput
  _MagicalBackRelation_ProblemToProblemDefinition_every: ProblemWhereInput
  _MagicalBackRelation_ProblemToProblemDefinition_some: ProblemWhereInput
  _MagicalBackRelation_ProblemToProblemDefinition_none: ProblemWhereInput
}

input ProblemDefinitionWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type ProblemEdge {
  """The item at the end of the edge."""
  node: Problem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProblemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  detailInstance_ASC
  detailInstance_DESC
  severity_ASC
  severity_DESC
  nptLevel_ASC
  nptLevel_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProblemPreviousValues {
  id: ID!
  name: String!
  detailInstance: ID
  severity: Int
  nptLevel: Int
}

type ProblemSubscriptionPayload {
  mutation: MutationType!
  node: Problem
  updatedFields: [String!]
  previousValues: ProblemPreviousValues
}

input ProblemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProblemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProblemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProblemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProblemWhereInput
}

input ProblemUpdateInput {
  name: String
  detailInstance: ID
  severity: Int
  nptLevel: Int
  duration: PhysicalQuantityUpdateOneInput
  responsibleOrganization: OrganizationUpdateOneInput
  definition: ProblemDefinitionUpdateOneInput
  observations: ObservationUpdateManyInput
  affectedEquipment: EquipmentUpdateOneInput
  causes: CauseUpdateManyInput
  events: EventUpdateManyWithoutProblemInput
}

input ProblemUpdateOneWithoutEventsInput {
  create: ProblemCreateWithoutEventsInput
  connect: ProblemWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProblemUpdateWithoutEventsDataInput
  upsert: ProblemUpsertWithoutEventsInput
}

input ProblemUpdateWithoutEventsDataInput {
  name: String
  detailInstance: ID
  severity: Int
  nptLevel: Int
  duration: PhysicalQuantityUpdateOneInput
  responsibleOrganization: OrganizationUpdateOneInput
  definition: ProblemDefinitionUpdateOneInput
  observations: ObservationUpdateManyInput
  affectedEquipment: EquipmentUpdateOneInput
  causes: CauseUpdateManyInput
}

input ProblemUpsertWithoutEventsInput {
  update: ProblemUpdateWithoutEventsDataInput!
  create: ProblemCreateWithoutEventsInput!
}

input ProblemWhereInput {
  """Logical AND on all given filters."""
  AND: [ProblemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProblemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProblemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  detailInstance: ID

  """All values that are not equal to given value."""
  detailInstance_not: ID

  """All values that are contained in given list."""
  detailInstance_in: [ID!]

  """All values that are not contained in given list."""
  detailInstance_not_in: [ID!]

  """All values less than the given value."""
  detailInstance_lt: ID

  """All values less than or equal the given value."""
  detailInstance_lte: ID

  """All values greater than the given value."""
  detailInstance_gt: ID

  """All values greater than or equal the given value."""
  detailInstance_gte: ID

  """All values containing the given string."""
  detailInstance_contains: ID

  """All values not containing the given string."""
  detailInstance_not_contains: ID

  """All values starting with the given string."""
  detailInstance_starts_with: ID

  """All values not starting with the given string."""
  detailInstance_not_starts_with: ID

  """All values ending with the given string."""
  detailInstance_ends_with: ID

  """All values not ending with the given string."""
  detailInstance_not_ends_with: ID
  severity: Int

  """All values that are not equal to given value."""
  severity_not: Int

  """All values that are contained in given list."""
  severity_in: [Int!]

  """All values that are not contained in given list."""
  severity_not_in: [Int!]

  """All values less than the given value."""
  severity_lt: Int

  """All values less than or equal the given value."""
  severity_lte: Int

  """All values greater than the given value."""
  severity_gt: Int

  """All values greater than or equal the given value."""
  severity_gte: Int
  nptLevel: Int

  """All values that are not equal to given value."""
  nptLevel_not: Int

  """All values that are contained in given list."""
  nptLevel_in: [Int!]

  """All values that are not contained in given list."""
  nptLevel_not_in: [Int!]

  """All values less than the given value."""
  nptLevel_lt: Int

  """All values less than or equal the given value."""
  nptLevel_lte: Int

  """All values greater than the given value."""
  nptLevel_gt: Int

  """All values greater than or equal the given value."""
  nptLevel_gte: Int
  duration: PhysicalQuantityWhereInput
  responsibleOrganization: OrganizationWhereInput
  definition: ProblemDefinitionWhereInput
  observations_every: ObservationWhereInput
  observations_some: ObservationWhereInput
  observations_none: ObservationWhereInput
  affectedEquipment: EquipmentWhereInput
  causes_every: CauseWhereInput
  causes_some: CauseWhereInput
  causes_none: CauseWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
}

input ProblemWhereUniqueInput {
  id: ID
}

type Query {
  myThings(where: MyThingWhereInput, orderBy: MyThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MyThing]!
  surfaceForms(where: SurfaceFormWhereInput, orderBy: SurfaceFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SurfaceForm]!
  persons(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Person]!
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem]!
  stuckPipeProblemDetails(where: StuckPipeProblemDetailWhereInput, orderBy: StuckPipeProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StuckPipeProblemDetail]!
  lostCirculationProblemDetails(where: LostCirculationProblemDetailWhereInput, orderBy: LostCirculationProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LostCirculationProblemDetail]!
  kickProblemDetails(where: KickProblemDetailWhereInput, orderBy: KickProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KickProblemDetail]!
  fishingProblemDetails(where: FishingProblemDetailWhereInput, orderBy: FishingProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FishingProblemDetail]!
  ballooningProblemDetails(where: BallooningProblemDetailWhereInput, orderBy: BallooningProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BallooningProblemDetail]!
  waitingOnProblemDetails(where: WaitingOnProblemDetailWhereInput, orderBy: WaitingOnProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WaitingOnProblemDetail]!
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  trippingActivityDetails(where: TrippingActivityDetailWhereInput, orderBy: TrippingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TrippingActivityDetail]!
  circulatingActivityDetails(where: CirculatingActivityDetailWhereInput, orderBy: CirculatingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CirculatingActivityDetail]!
  drillingActivityDetails(where: DrillingActivityDetailWhereInput, orderBy: DrillingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DrillingActivityDetail]!
  cementingActivityDetails(where: CementingActivityDetailWhereInput, orderBy: CementingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CementingActivityDetail]!
  loggingActivityDetails(where: LoggingActivityDetailWhereInput, orderBy: LoggingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LoggingActivityDetail]!
  perforatingActivityDetails(where: PerforatingActivityDetailWhereInput, orderBy: PerforatingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PerforatingActivityDetail]!
  testingActivityDetails(where: TestingActivityDetailWhereInput, orderBy: TestingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestingActivityDetail]!
  riggingActivityDetails(where: RiggingActivityDetailWhereInput, orderBy: RiggingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RiggingActivityDetail]!
  casingActivityDetails(where: CasingActivityDetailWhereInput, orderBy: CasingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CasingActivityDetail]!
  changeMudWeightActivityDetails(where: ChangeMudWeightActivityDetailWhereInput, orderBy: ChangeMudWeightActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChangeMudWeightActivityDetail]!
  documentations(where: DocumentationWhereInput, orderBy: DocumentationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Documentation]!
  r_ADDITIVE_TYPEs(where: R_ADDITIVE_TYPEWhereInput, orderBy: R_ADDITIVE_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_ADDITIVE_TYPE]!
  r_CEMENT_TYPEs(where: R_CEMENT_TYPEWhereInput, orderBy: R_CEMENT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_CEMENT_TYPE]!
  r_COMPLETION_METHODs(where: R_COMPLETION_METHODWhereInput, orderBy: R_COMPLETION_METHODOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_COMPLETION_METHOD]!
  r_COMPLETION_TYPEs(where: R_COMPLETION_TYPEWhereInput, orderBy: R_COMPLETION_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_COMPLETION_TYPE]!
  r_DOCUMENT_TYPEs(where: R_DOCUMENT_TYPEWhereInput, orderBy: R_DOCUMENT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_DOCUMENT_TYPE]!
  r_DRILL_BIT_TYPEs(where: R_DRILL_BIT_TYPEWhereInput, orderBy: R_DRILL_BIT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_DRILL_BIT_TYPE]!
  r_DRILL_TOOL_TYPEs(where: R_DRILL_TOOL_TYPEWhereInput, orderBy: R_DRILL_TOOL_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_DRILL_TOOL_TYPE]!
  r_DRILLING_MEDIAs(where: R_DRILLING_MEDIAWhereInput, orderBy: R_DRILLING_MEDIAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_DRILLING_MEDIA]!
  r_LINER_TYPEs(where: R_LINER_TYPEWhereInput, orderBy: R_LINER_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_LINER_TYPE]!
  r_LITH_ROCK_TYPEs(where: R_LITH_ROCK_TYPEWhereInput, orderBy: R_LITH_ROCK_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_LITH_ROCK_TYPE]!
  r_LITHOLOGies(where: R_LITHOLOGYWhereInput, orderBy: R_LITHOLOGYOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_LITHOLOGY]!
  r_LOG_TOOL_TYPEs(where: R_LOG_TOOL_TYPEWhereInput, orderBy: R_LOG_TOOL_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_LOG_TOOL_TYPE]!
  r_PROPPANT_TYPEs(where: R_PROPPANT_TYPEWhereInput, orderBy: R_PROPPANT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_PROPPANT_TYPE]!
  r_RIG_BLOWOUT_PREVENTERs(where: R_RIG_BLOWOUT_PREVENTERWhereInput, orderBy: R_RIG_BLOWOUT_PREVENTEROrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_RIG_BLOWOUT_PREVENTER]!
  r_RIG_TYPEs(where: R_RIG_TYPEWhereInput, orderBy: R_RIG_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_RIG_TYPE]!
  r_WELL_CLAsses(where: R_WELL_CLASSWhereInput, orderBy: R_WELL_CLASSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_WELL_CLASS]!
  r_WELL_DRILL_OP_TYPEs(where: R_WELL_DRILL_OP_TYPEWhereInput, orderBy: R_WELL_DRILL_OP_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_WELL_DRILL_OP_TYPE]!
  r_WELL_STATUSes(where: R_WELL_STATUSWhereInput, orderBy: R_WELL_STATUSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_WELL_STATUS]!
  r_WELL_TEST_TYPEs(where: R_WELL_TEST_TYPEWhereInput, orderBy: R_WELL_TEST_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_WELL_TEST_TYPE]!
  uS_OFFSHORE_LEASEs(where: US_OFFSHORE_LEASEWhereInput, orderBy: US_OFFSHORE_LEASEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [US_OFFSHORE_LEASE]!
  fields(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Field]!
  wellSourceDetails(where: WellSourceDetailWhereInput, orderBy: WellSourceDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WellSourceDetail]!
  rigs(where: RigWhereInput, orderBy: RigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rig]!
  eventReporterDefinitions(where: EventReporterDefinitionWhereInput, orderBy: EventReporterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventReporterDefinition]!
  wellLifecycles(where: WellLifecycleWhereInput, orderBy: WellLifecycleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WellLifecycle]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  observations(where: ObservationWhereInput, orderBy: ObservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Observation]!
  myOtherThings(where: MyOtherThingWhereInput, orderBy: MyOtherThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MyOtherThing]!
  equipments(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment]!
  activityDefinitions(where: ActivityDefinitionWhereInput, orderBy: ActivityDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActivityDefinition]!
  problemDefinitions(where: ProblemDefinitionWhereInput, orderBy: ProblemDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProblemDefinition]!
  wells(where: WellWhereInput, orderBy: WellOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Well]!
  observationDefinitions(where: ObservationDefinitionWhereInput, orderBy: ObservationDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ObservationDefinition]!
  mechanisms(where: MechanismWhereInput, orderBy: MechanismOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Mechanism]!
  causes(where: CauseWhereInput, orderBy: CauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cause]!
  r_SOURCEs(where: R_SOURCEWhereInput, orderBy: R_SOURCEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [R_SOURCE]!
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  physicalQuantities(where: PhysicalQuantityWhereInput, orderBy: PhysicalQuantityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalQuantity]!
  myThing(where: MyThingWhereUniqueInput!): MyThing
  person(where: PersonWhereUniqueInput!): Person
  problem(where: ProblemWhereUniqueInput!): Problem
  stuckPipeProblemDetail(where: StuckPipeProblemDetailWhereUniqueInput!): StuckPipeProblemDetail
  lostCirculationProblemDetail(where: LostCirculationProblemDetailWhereUniqueInput!): LostCirculationProblemDetail
  kickProblemDetail(where: KickProblemDetailWhereUniqueInput!): KickProblemDetail
  fishingProblemDetail(where: FishingProblemDetailWhereUniqueInput!): FishingProblemDetail
  ballooningProblemDetail(where: BallooningProblemDetailWhereUniqueInput!): BallooningProblemDetail
  waitingOnProblemDetail(where: WaitingOnProblemDetailWhereUniqueInput!): WaitingOnProblemDetail
  activity(where: ActivityWhereUniqueInput!): Activity
  trippingActivityDetail(where: TrippingActivityDetailWhereUniqueInput!): TrippingActivityDetail
  circulatingActivityDetail(where: CirculatingActivityDetailWhereUniqueInput!): CirculatingActivityDetail
  drillingActivityDetail(where: DrillingActivityDetailWhereUniqueInput!): DrillingActivityDetail
  cementingActivityDetail(where: CementingActivityDetailWhereUniqueInput!): CementingActivityDetail
  loggingActivityDetail(where: LoggingActivityDetailWhereUniqueInput!): LoggingActivityDetail
  perforatingActivityDetail(where: PerforatingActivityDetailWhereUniqueInput!): PerforatingActivityDetail
  testingActivityDetail(where: TestingActivityDetailWhereUniqueInput!): TestingActivityDetail
  riggingActivityDetail(where: RiggingActivityDetailWhereUniqueInput!): RiggingActivityDetail
  casingActivityDetail(where: CasingActivityDetailWhereUniqueInput!): CasingActivityDetail
  changeMudWeightActivityDetail(where: ChangeMudWeightActivityDetailWhereUniqueInput!): ChangeMudWeightActivityDetail
  documentation(where: DocumentationWhereUniqueInput!): Documentation
  r_ADDITIVE_TYPE(where: R_ADDITIVE_TYPEWhereUniqueInput!): R_ADDITIVE_TYPE
  r_CEMENT_TYPE(where: R_CEMENT_TYPEWhereUniqueInput!): R_CEMENT_TYPE
  r_COMPLETION_METHOD(where: R_COMPLETION_METHODWhereUniqueInput!): R_COMPLETION_METHOD
  r_COMPLETION_TYPE(where: R_COMPLETION_TYPEWhereUniqueInput!): R_COMPLETION_TYPE
  r_DOCUMENT_TYPE(where: R_DOCUMENT_TYPEWhereUniqueInput!): R_DOCUMENT_TYPE
  r_DRILL_BIT_TYPE(where: R_DRILL_BIT_TYPEWhereUniqueInput!): R_DRILL_BIT_TYPE
  r_DRILL_TOOL_TYPE(where: R_DRILL_TOOL_TYPEWhereUniqueInput!): R_DRILL_TOOL_TYPE
  r_DRILLING_MEDIA(where: R_DRILLING_MEDIAWhereUniqueInput!): R_DRILLING_MEDIA
  r_LINER_TYPE(where: R_LINER_TYPEWhereUniqueInput!): R_LINER_TYPE
  r_LITH_ROCK_TYPE(where: R_LITH_ROCK_TYPEWhereUniqueInput!): R_LITH_ROCK_TYPE
  r_LITHOLOGY(where: R_LITHOLOGYWhereUniqueInput!): R_LITHOLOGY
  r_LOG_TOOL_TYPE(where: R_LOG_TOOL_TYPEWhereUniqueInput!): R_LOG_TOOL_TYPE
  r_PROPPANT_TYPE(where: R_PROPPANT_TYPEWhereUniqueInput!): R_PROPPANT_TYPE
  r_RIG_BLOWOUT_PREVENTER(where: R_RIG_BLOWOUT_PREVENTERWhereUniqueInput!): R_RIG_BLOWOUT_PREVENTER
  r_RIG_TYPE(where: R_RIG_TYPEWhereUniqueInput!): R_RIG_TYPE
  r_WELL_CLASS(where: R_WELL_CLASSWhereUniqueInput!): R_WELL_CLASS
  r_WELL_DRILL_OP_TYPE(where: R_WELL_DRILL_OP_TYPEWhereUniqueInput!): R_WELL_DRILL_OP_TYPE
  r_WELL_STATUS(where: R_WELL_STATUSWhereUniqueInput!): R_WELL_STATUS
  r_WELL_TEST_TYPE(where: R_WELL_TEST_TYPEWhereUniqueInput!): R_WELL_TEST_TYPE
  uS_OFFSHORE_LEASE(where: US_OFFSHORE_LEASEWhereUniqueInput!): US_OFFSHORE_LEASE
  field(where: FieldWhereUniqueInput!): Field
  wellSourceDetail(where: WellSourceDetailWhereUniqueInput!): WellSourceDetail
  rig(where: RigWhereUniqueInput!): Rig
  eventReporterDefinition(where: EventReporterDefinitionWhereUniqueInput!): EventReporterDefinition
  wellLifecycle(where: WellLifecycleWhereUniqueInput!): WellLifecycle
  event(where: EventWhereUniqueInput!): Event
  observation(where: ObservationWhereUniqueInput!): Observation
  myOtherThing(where: MyOtherThingWhereUniqueInput!): MyOtherThing
  equipment(where: EquipmentWhereUniqueInput!): Equipment
  activityDefinition(where: ActivityDefinitionWhereUniqueInput!): ActivityDefinition
  problemDefinition(where: ProblemDefinitionWhereUniqueInput!): ProblemDefinition
  well(where: WellWhereUniqueInput!): Well
  observationDefinition(where: ObservationDefinitionWhereUniqueInput!): ObservationDefinition
  mechanism(where: MechanismWhereUniqueInput!): Mechanism
  cause(where: CauseWhereUniqueInput!): Cause
  r_SOURCE(where: R_SOURCEWhereUniqueInput!): R_SOURCE
  organization(where: OrganizationWhereUniqueInput!): Organization
  physicalQuantity(where: PhysicalQuantityWhereUniqueInput!): PhysicalQuantity
  myThingsConnection(where: MyThingWhereInput, orderBy: MyThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MyThingConnection!
  surfaceFormsConnection(where: SurfaceFormWhereInput, orderBy: SurfaceFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SurfaceFormConnection!
  personsConnection(where: PersonWhereInput, orderBy: PersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  problemsConnection(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemConnection!
  stuckPipeProblemDetailsConnection(where: StuckPipeProblemDetailWhereInput, orderBy: StuckPipeProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StuckPipeProblemDetailConnection!
  lostCirculationProblemDetailsConnection(where: LostCirculationProblemDetailWhereInput, orderBy: LostCirculationProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LostCirculationProblemDetailConnection!
  kickProblemDetailsConnection(where: KickProblemDetailWhereInput, orderBy: KickProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KickProblemDetailConnection!
  fishingProblemDetailsConnection(where: FishingProblemDetailWhereInput, orderBy: FishingProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FishingProblemDetailConnection!
  ballooningProblemDetailsConnection(where: BallooningProblemDetailWhereInput, orderBy: BallooningProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BallooningProblemDetailConnection!
  waitingOnProblemDetailsConnection(where: WaitingOnProblemDetailWhereInput, orderBy: WaitingOnProblemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WaitingOnProblemDetailConnection!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  trippingActivityDetailsConnection(where: TrippingActivityDetailWhereInput, orderBy: TrippingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrippingActivityDetailConnection!
  circulatingActivityDetailsConnection(where: CirculatingActivityDetailWhereInput, orderBy: CirculatingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CirculatingActivityDetailConnection!
  drillingActivityDetailsConnection(where: DrillingActivityDetailWhereInput, orderBy: DrillingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DrillingActivityDetailConnection!
  cementingActivityDetailsConnection(where: CementingActivityDetailWhereInput, orderBy: CementingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CementingActivityDetailConnection!
  loggingActivityDetailsConnection(where: LoggingActivityDetailWhereInput, orderBy: LoggingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LoggingActivityDetailConnection!
  perforatingActivityDetailsConnection(where: PerforatingActivityDetailWhereInput, orderBy: PerforatingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PerforatingActivityDetailConnection!
  testingActivityDetailsConnection(where: TestingActivityDetailWhereInput, orderBy: TestingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestingActivityDetailConnection!
  riggingActivityDetailsConnection(where: RiggingActivityDetailWhereInput, orderBy: RiggingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RiggingActivityDetailConnection!
  casingActivityDetailsConnection(where: CasingActivityDetailWhereInput, orderBy: CasingActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CasingActivityDetailConnection!
  changeMudWeightActivityDetailsConnection(where: ChangeMudWeightActivityDetailWhereInput, orderBy: ChangeMudWeightActivityDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChangeMudWeightActivityDetailConnection!
  documentationsConnection(where: DocumentationWhereInput, orderBy: DocumentationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DocumentationConnection!
  r_ADDITIVE_TYPEsConnection(where: R_ADDITIVE_TYPEWhereInput, orderBy: R_ADDITIVE_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_ADDITIVE_TYPEConnection!
  r_CEMENT_TYPEsConnection(where: R_CEMENT_TYPEWhereInput, orderBy: R_CEMENT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_CEMENT_TYPEConnection!
  r_COMPLETION_METHODsConnection(where: R_COMPLETION_METHODWhereInput, orderBy: R_COMPLETION_METHODOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_COMPLETION_METHODConnection!
  r_COMPLETION_TYPEsConnection(where: R_COMPLETION_TYPEWhereInput, orderBy: R_COMPLETION_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_COMPLETION_TYPEConnection!
  r_DOCUMENT_TYPEsConnection(where: R_DOCUMENT_TYPEWhereInput, orderBy: R_DOCUMENT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_DOCUMENT_TYPEConnection!
  r_DRILL_BIT_TYPEsConnection(where: R_DRILL_BIT_TYPEWhereInput, orderBy: R_DRILL_BIT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_DRILL_BIT_TYPEConnection!
  r_DRILL_TOOL_TYPEsConnection(where: R_DRILL_TOOL_TYPEWhereInput, orderBy: R_DRILL_TOOL_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_DRILL_TOOL_TYPEConnection!
  r_DRILLING_MEDIAsConnection(where: R_DRILLING_MEDIAWhereInput, orderBy: R_DRILLING_MEDIAOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_DRILLING_MEDIAConnection!
  r_LINER_TYPEsConnection(where: R_LINER_TYPEWhereInput, orderBy: R_LINER_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_LINER_TYPEConnection!
  r_LITH_ROCK_TYPEsConnection(where: R_LITH_ROCK_TYPEWhereInput, orderBy: R_LITH_ROCK_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_LITH_ROCK_TYPEConnection!
  r_LITHOLOGiesConnection(where: R_LITHOLOGYWhereInput, orderBy: R_LITHOLOGYOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_LITHOLOGYConnection!
  r_LOG_TOOL_TYPEsConnection(where: R_LOG_TOOL_TYPEWhereInput, orderBy: R_LOG_TOOL_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_LOG_TOOL_TYPEConnection!
  r_PROPPANT_TYPEsConnection(where: R_PROPPANT_TYPEWhereInput, orderBy: R_PROPPANT_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_PROPPANT_TYPEConnection!
  r_RIG_BLOWOUT_PREVENTERsConnection(where: R_RIG_BLOWOUT_PREVENTERWhereInput, orderBy: R_RIG_BLOWOUT_PREVENTEROrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_RIG_BLOWOUT_PREVENTERConnection!
  r_RIG_TYPEsConnection(where: R_RIG_TYPEWhereInput, orderBy: R_RIG_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_RIG_TYPEConnection!
  r_WELL_CLAssesConnection(where: R_WELL_CLASSWhereInput, orderBy: R_WELL_CLASSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_WELL_CLASSConnection!
  r_WELL_DRILL_OP_TYPEsConnection(where: R_WELL_DRILL_OP_TYPEWhereInput, orderBy: R_WELL_DRILL_OP_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_WELL_DRILL_OP_TYPEConnection!
  r_WELL_STATUSesConnection(where: R_WELL_STATUSWhereInput, orderBy: R_WELL_STATUSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_WELL_STATUSConnection!
  r_WELL_TEST_TYPEsConnection(where: R_WELL_TEST_TYPEWhereInput, orderBy: R_WELL_TEST_TYPEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_WELL_TEST_TYPEConnection!
  uS_OFFSHORE_LEASEsConnection(where: US_OFFSHORE_LEASEWhereInput, orderBy: US_OFFSHORE_LEASEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): US_OFFSHORE_LEASEConnection!
  fieldsConnection(where: FieldWhereInput, orderBy: FieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FieldConnection!
  wellSourceDetailsConnection(where: WellSourceDetailWhereInput, orderBy: WellSourceDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WellSourceDetailConnection!
  rigsConnection(where: RigWhereInput, orderBy: RigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RigConnection!
  eventReporterDefinitionsConnection(where: EventReporterDefinitionWhereInput, orderBy: EventReporterDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventReporterDefinitionConnection!
  wellLifecyclesConnection(where: WellLifecycleWhereInput, orderBy: WellLifecycleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WellLifecycleConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  observationsConnection(where: ObservationWhereInput, orderBy: ObservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ObservationConnection!
  myOtherThingsConnection(where: MyOtherThingWhereInput, orderBy: MyOtherThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MyOtherThingConnection!
  equipmentsConnection(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentConnection!
  activityDefinitionsConnection(where: ActivityDefinitionWhereInput, orderBy: ActivityDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityDefinitionConnection!
  problemDefinitionsConnection(where: ProblemDefinitionWhereInput, orderBy: ProblemDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemDefinitionConnection!
  wellsConnection(where: WellWhereInput, orderBy: WellOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WellConnection!
  observationDefinitionsConnection(where: ObservationDefinitionWhereInput, orderBy: ObservationDefinitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ObservationDefinitionConnection!
  mechanismsConnection(where: MechanismWhereInput, orderBy: MechanismOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MechanismConnection!
  causesConnection(where: CauseWhereInput, orderBy: CauseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CauseConnection!
  r_SOURCEsConnection(where: R_SOURCEWhereInput, orderBy: R_SOURCEOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): R_SOURCEConnection!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  physicalQuantitiesConnection(where: PhysicalQuantityWhereInput, orderBy: PhysicalQuantityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhysicalQuantityConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type R_ADDITIVE_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_ADDITIVE_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_ADDITIVE_TYPEEdge]!
  aggregate: AggregateR_ADDITIVE_TYPE!
}

input R_ADDITIVE_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_ADDITIVE_TYPEEdge {
  """The item at the end of the edge."""
  node: R_ADDITIVE_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_ADDITIVE_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_ADDITIVE_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_ADDITIVE_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_ADDITIVE_TYPE
  updatedFields: [String!]
  previousValues: R_ADDITIVE_TYPEPreviousValues
}

input R_ADDITIVE_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_ADDITIVE_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_ADDITIVE_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_ADDITIVE_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_ADDITIVE_TYPEWhereInput
}

input R_ADDITIVE_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_ADDITIVE_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_ADDITIVE_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_ADDITIVE_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_ADDITIVE_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_ADDITIVE_TYPEWhereUniqueInput {
  id: ID
}

type R_CEMENT_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_CEMENT_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_CEMENT_TYPEEdge]!
  aggregate: AggregateR_CEMENT_TYPE!
}

input R_CEMENT_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_CEMENT_TYPEEdge {
  """The item at the end of the edge."""
  node: R_CEMENT_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_CEMENT_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_CEMENT_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_CEMENT_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_CEMENT_TYPE
  updatedFields: [String!]
  previousValues: R_CEMENT_TYPEPreviousValues
}

input R_CEMENT_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_CEMENT_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_CEMENT_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_CEMENT_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_CEMENT_TYPEWhereInput
}

input R_CEMENT_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_CEMENT_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_CEMENT_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_CEMENT_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_CEMENT_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_CEMENT_TYPEWhereUniqueInput {
  id: ID
}

type R_COMPLETION_METHOD implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_COMPLETION_METHODConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_COMPLETION_METHODEdge]!
  aggregate: AggregateR_COMPLETION_METHOD!
}

input R_COMPLETION_METHODCreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_COMPLETION_METHODEdge {
  """The item at the end of the edge."""
  node: R_COMPLETION_METHOD!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_COMPLETION_METHODOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_COMPLETION_METHODPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_COMPLETION_METHODSubscriptionPayload {
  mutation: MutationType!
  node: R_COMPLETION_METHOD
  updatedFields: [String!]
  previousValues: R_COMPLETION_METHODPreviousValues
}

input R_COMPLETION_METHODSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_COMPLETION_METHODSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_COMPLETION_METHODSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_COMPLETION_METHODSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_COMPLETION_METHODWhereInput
}

input R_COMPLETION_METHODUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_COMPLETION_METHODWhereInput {
  """Logical AND on all given filters."""
  AND: [R_COMPLETION_METHODWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_COMPLETION_METHODWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_COMPLETION_METHODWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_COMPLETION_METHODWhereUniqueInput {
  id: ID
}

type R_COMPLETION_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_COMPLETION_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_COMPLETION_TYPEEdge]!
  aggregate: AggregateR_COMPLETION_TYPE!
}

input R_COMPLETION_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_COMPLETION_TYPEEdge {
  """The item at the end of the edge."""
  node: R_COMPLETION_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_COMPLETION_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_COMPLETION_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_COMPLETION_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_COMPLETION_TYPE
  updatedFields: [String!]
  previousValues: R_COMPLETION_TYPEPreviousValues
}

input R_COMPLETION_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_COMPLETION_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_COMPLETION_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_COMPLETION_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_COMPLETION_TYPEWhereInput
}

input R_COMPLETION_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_COMPLETION_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_COMPLETION_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_COMPLETION_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_COMPLETION_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_COMPLETION_TYPEWhereUniqueInput {
  id: ID
}

type R_DOCUMENT_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_DOCUMENT_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_DOCUMENT_TYPEEdge]!
  aggregate: AggregateR_DOCUMENT_TYPE!
}

input R_DOCUMENT_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_DOCUMENT_TYPEEdge {
  """The item at the end of the edge."""
  node: R_DOCUMENT_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_DOCUMENT_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_DOCUMENT_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_DOCUMENT_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_DOCUMENT_TYPE
  updatedFields: [String!]
  previousValues: R_DOCUMENT_TYPEPreviousValues
}

input R_DOCUMENT_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DOCUMENT_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DOCUMENT_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DOCUMENT_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_DOCUMENT_TYPEWhereInput
}

input R_DOCUMENT_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_DOCUMENT_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DOCUMENT_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DOCUMENT_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DOCUMENT_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_DOCUMENT_TYPEWhereUniqueInput {
  id: ID
}

type R_DRILL_BIT_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_DRILL_BIT_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_DRILL_BIT_TYPEEdge]!
  aggregate: AggregateR_DRILL_BIT_TYPE!
}

input R_DRILL_BIT_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_DRILL_BIT_TYPEEdge {
  """The item at the end of the edge."""
  node: R_DRILL_BIT_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_DRILL_BIT_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_DRILL_BIT_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_DRILL_BIT_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_DRILL_BIT_TYPE
  updatedFields: [String!]
  previousValues: R_DRILL_BIT_TYPEPreviousValues
}

input R_DRILL_BIT_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DRILL_BIT_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DRILL_BIT_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DRILL_BIT_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_DRILL_BIT_TYPEWhereInput
}

input R_DRILL_BIT_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_DRILL_BIT_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DRILL_BIT_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DRILL_BIT_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DRILL_BIT_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_DRILL_BIT_TYPEWhereUniqueInput {
  id: ID
}

type R_DRILL_TOOL_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_DRILL_TOOL_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_DRILL_TOOL_TYPEEdge]!
  aggregate: AggregateR_DRILL_TOOL_TYPE!
}

input R_DRILL_TOOL_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_DRILL_TOOL_TYPEEdge {
  """The item at the end of the edge."""
  node: R_DRILL_TOOL_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_DRILL_TOOL_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_DRILL_TOOL_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_DRILL_TOOL_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_DRILL_TOOL_TYPE
  updatedFields: [String!]
  previousValues: R_DRILL_TOOL_TYPEPreviousValues
}

input R_DRILL_TOOL_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DRILL_TOOL_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DRILL_TOOL_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DRILL_TOOL_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_DRILL_TOOL_TYPEWhereInput
}

input R_DRILL_TOOL_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_DRILL_TOOL_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DRILL_TOOL_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DRILL_TOOL_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DRILL_TOOL_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_DRILL_TOOL_TYPEWhereUniqueInput {
  id: ID
}

type R_DRILLING_MEDIA implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_DRILLING_MEDIAConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_DRILLING_MEDIAEdge]!
  aggregate: AggregateR_DRILLING_MEDIA!
}

input R_DRILLING_MEDIACreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_DRILLING_MEDIAEdge {
  """The item at the end of the edge."""
  node: R_DRILLING_MEDIA!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_DRILLING_MEDIAOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_DRILLING_MEDIAPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_DRILLING_MEDIASubscriptionPayload {
  mutation: MutationType!
  node: R_DRILLING_MEDIA
  updatedFields: [String!]
  previousValues: R_DRILLING_MEDIAPreviousValues
}

input R_DRILLING_MEDIASubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DRILLING_MEDIASubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DRILLING_MEDIASubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DRILLING_MEDIASubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_DRILLING_MEDIAWhereInput
}

input R_DRILLING_MEDIAUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_DRILLING_MEDIAWhereInput {
  """Logical AND on all given filters."""
  AND: [R_DRILLING_MEDIAWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_DRILLING_MEDIAWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_DRILLING_MEDIAWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_DRILLING_MEDIAWhereUniqueInput {
  id: ID
}

type R_LINER_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_LINER_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_LINER_TYPEEdge]!
  aggregate: AggregateR_LINER_TYPE!
}

input R_LINER_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_LINER_TYPEEdge {
  """The item at the end of the edge."""
  node: R_LINER_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_LINER_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_LINER_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_LINER_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_LINER_TYPE
  updatedFields: [String!]
  previousValues: R_LINER_TYPEPreviousValues
}

input R_LINER_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LINER_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LINER_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LINER_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_LINER_TYPEWhereInput
}

input R_LINER_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_LINER_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LINER_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LINER_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LINER_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_LINER_TYPEWhereUniqueInput {
  id: ID
}

type R_LITH_ROCK_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  rockType: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_LITH_ROCK_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_LITH_ROCK_TYPEEdge]!
  aggregate: AggregateR_LITH_ROCK_TYPE!
}

input R_LITH_ROCK_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  rockType: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_LITH_ROCK_TYPEEdge {
  """The item at the end of the edge."""
  node: R_LITH_ROCK_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_LITH_ROCK_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  rockType_ASC
  rockType_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_LITH_ROCK_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  rockType: String
  REMARK: String
  SHORT_NAME: String
}

type R_LITH_ROCK_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_LITH_ROCK_TYPE
  updatedFields: [String!]
  previousValues: R_LITH_ROCK_TYPEPreviousValues
}

input R_LITH_ROCK_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LITH_ROCK_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LITH_ROCK_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LITH_ROCK_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_LITH_ROCK_TYPEWhereInput
}

input R_LITH_ROCK_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  rockType: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_LITH_ROCK_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LITH_ROCK_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LITH_ROCK_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LITH_ROCK_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  rockType: String

  """All values that are not equal to given value."""
  rockType_not: String

  """All values that are contained in given list."""
  rockType_in: [String!]

  """All values that are not contained in given list."""
  rockType_not_in: [String!]

  """All values less than the given value."""
  rockType_lt: String

  """All values less than or equal the given value."""
  rockType_lte: String

  """All values greater than the given value."""
  rockType_gt: String

  """All values greater than or equal the given value."""
  rockType_gte: String

  """All values containing the given string."""
  rockType_contains: String

  """All values not containing the given string."""
  rockType_not_contains: String

  """All values starting with the given string."""
  rockType_starts_with: String

  """All values not starting with the given string."""
  rockType_not_starts_with: String

  """All values ending with the given string."""
  rockType_ends_with: String

  """All values not ending with the given string."""
  rockType_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_LITH_ROCK_TYPEWhereUniqueInput {
  id: ID
}

type R_LITHOLOGY implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_LITHOLOGYConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_LITHOLOGYEdge]!
  aggregate: AggregateR_LITHOLOGY!
}

input R_LITHOLOGYCreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_LITHOLOGYEdge {
  """The item at the end of the edge."""
  node: R_LITHOLOGY!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_LITHOLOGYOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_LITHOLOGYPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_LITHOLOGYSubscriptionPayload {
  mutation: MutationType!
  node: R_LITHOLOGY
  updatedFields: [String!]
  previousValues: R_LITHOLOGYPreviousValues
}

input R_LITHOLOGYSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LITHOLOGYSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LITHOLOGYSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LITHOLOGYSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_LITHOLOGYWhereInput
}

input R_LITHOLOGYUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_LITHOLOGYWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LITHOLOGYWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LITHOLOGYWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LITHOLOGYWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_LITHOLOGYWhereUniqueInput {
  id: ID
}

type R_LOG_TOOL_TYPE implements Node {
  id: ID!
  name: String
  type: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_LOG_TOOL_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_LOG_TOOL_TYPEEdge]!
  aggregate: AggregateR_LOG_TOOL_TYPE!
}

input R_LOG_TOOL_TYPECreateInput {
  name: String
  type: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_LOG_TOOL_TYPEEdge {
  """The item at the end of the edge."""
  node: R_LOG_TOOL_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_LOG_TOOL_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_LOG_TOOL_TYPEPreviousValues {
  id: ID!
  name: String
  type: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_LOG_TOOL_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_LOG_TOOL_TYPE
  updatedFields: [String!]
  previousValues: R_LOG_TOOL_TYPEPreviousValues
}

input R_LOG_TOOL_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LOG_TOOL_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LOG_TOOL_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LOG_TOOL_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_LOG_TOOL_TYPEWhereInput
}

input R_LOG_TOOL_TYPEUpdateInput {
  name: String
  type: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_LOG_TOOL_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_LOG_TOOL_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_LOG_TOOL_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_LOG_TOOL_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_LOG_TOOL_TYPEWhereUniqueInput {
  id: ID
}

type R_PROPPANT_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_PROPPANT_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_PROPPANT_TYPEEdge]!
  aggregate: AggregateR_PROPPANT_TYPE!
}

input R_PROPPANT_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_PROPPANT_TYPEEdge {
  """The item at the end of the edge."""
  node: R_PROPPANT_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_PROPPANT_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_PROPPANT_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_PROPPANT_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_PROPPANT_TYPE
  updatedFields: [String!]
  previousValues: R_PROPPANT_TYPEPreviousValues
}

input R_PROPPANT_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_PROPPANT_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_PROPPANT_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_PROPPANT_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_PROPPANT_TYPEWhereInput
}

input R_PROPPANT_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_PROPPANT_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_PROPPANT_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_PROPPANT_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_PROPPANT_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_PROPPANT_TYPEWhereUniqueInput {
  id: ID
}

type R_RIG_BLOWOUT_PREVENTER implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_RIG_BLOWOUT_PREVENTERConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_RIG_BLOWOUT_PREVENTEREdge]!
  aggregate: AggregateR_RIG_BLOWOUT_PREVENTER!
}

input R_RIG_BLOWOUT_PREVENTERCreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_RIG_BLOWOUT_PREVENTEREdge {
  """The item at the end of the edge."""
  node: R_RIG_BLOWOUT_PREVENTER!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_RIG_BLOWOUT_PREVENTEROrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_RIG_BLOWOUT_PREVENTERPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_RIG_BLOWOUT_PREVENTERSubscriptionPayload {
  mutation: MutationType!
  node: R_RIG_BLOWOUT_PREVENTER
  updatedFields: [String!]
  previousValues: R_RIG_BLOWOUT_PREVENTERPreviousValues
}

input R_RIG_BLOWOUT_PREVENTERSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_RIG_BLOWOUT_PREVENTERSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_RIG_BLOWOUT_PREVENTERSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_RIG_BLOWOUT_PREVENTERSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_RIG_BLOWOUT_PREVENTERWhereInput
}

input R_RIG_BLOWOUT_PREVENTERUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_RIG_BLOWOUT_PREVENTERWhereInput {
  """Logical AND on all given filters."""
  AND: [R_RIG_BLOWOUT_PREVENTERWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_RIG_BLOWOUT_PREVENTERWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_RIG_BLOWOUT_PREVENTERWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_RIG_BLOWOUT_PREVENTERWhereUniqueInput {
  id: ID
}

type R_RIG_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_RIG_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_RIG_TYPEEdge]!
  aggregate: AggregateR_RIG_TYPE!
}

input R_RIG_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_RIG_TYPEEdge {
  """The item at the end of the edge."""
  node: R_RIG_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_RIG_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_RIG_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_RIG_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_RIG_TYPE
  updatedFields: [String!]
  previousValues: R_RIG_TYPEPreviousValues
}

input R_RIG_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_RIG_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_RIG_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_RIG_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_RIG_TYPEWhereInput
}

input R_RIG_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_RIG_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_RIG_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_RIG_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_RIG_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_RIG_TYPEWhereUniqueInput {
  id: ID
}

type R_SOURCE implements Node {
  id: ID!
  name: String!
  ABBREVIATION: String
  remark: String
  EXPIRY_DATE: DateTime
}

"""A connection to a list of items."""
type R_SOURCEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_SOURCEEdge]!
  aggregate: AggregateR_SOURCE!
}

input R_SOURCECreateInput {
  name: String!
  ABBREVIATION: String
  remark: String
  EXPIRY_DATE: DateTime
}

input R_SOURCECreateOneInput {
  create: R_SOURCECreateInput
  connect: R_SOURCEWhereUniqueInput
}

"""An edge in a connection."""
type R_SOURCEEdge {
  """The item at the end of the edge."""
  node: R_SOURCE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_SOURCEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  remark_ASC
  remark_DESC
  EXPIRY_DATE_ASC
  EXPIRY_DATE_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_SOURCEPreviousValues {
  id: ID!
  name: String!
  ABBREVIATION: String
  remark: String
  EXPIRY_DATE: DateTime
}

type R_SOURCESubscriptionPayload {
  mutation: MutationType!
  node: R_SOURCE
  updatedFields: [String!]
  previousValues: R_SOURCEPreviousValues
}

input R_SOURCESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_SOURCESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_SOURCESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_SOURCESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_SOURCEWhereInput
}

input R_SOURCEUpdateDataInput {
  name: String
  ABBREVIATION: String
  remark: String
  EXPIRY_DATE: DateTime
}

input R_SOURCEUpdateInput {
  name: String
  ABBREVIATION: String
  remark: String
  EXPIRY_DATE: DateTime
}

input R_SOURCEUpdateOneInput {
  create: R_SOURCECreateInput
  connect: R_SOURCEWhereUniqueInput
  delete: Boolean
  update: R_SOURCEUpdateDataInput
  upsert: R_SOURCEUpsertNestedInput
}

input R_SOURCEUpsertNestedInput {
  update: R_SOURCEUpdateDataInput!
  create: R_SOURCECreateInput!
}

input R_SOURCEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_SOURCEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_SOURCEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_SOURCEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  remark: String

  """All values that are not equal to given value."""
  remark_not: String

  """All values that are contained in given list."""
  remark_in: [String!]

  """All values that are not contained in given list."""
  remark_not_in: [String!]

  """All values less than the given value."""
  remark_lt: String

  """All values less than or equal the given value."""
  remark_lte: String

  """All values greater than the given value."""
  remark_gt: String

  """All values greater than or equal the given value."""
  remark_gte: String

  """All values containing the given string."""
  remark_contains: String

  """All values not containing the given string."""
  remark_not_contains: String

  """All values starting with the given string."""
  remark_starts_with: String

  """All values not starting with the given string."""
  remark_not_starts_with: String

  """All values ending with the given string."""
  remark_ends_with: String

  """All values not ending with the given string."""
  remark_not_ends_with: String
  EXPIRY_DATE: DateTime

  """All values that are not equal to given value."""
  EXPIRY_DATE_not: DateTime

  """All values that are contained in given list."""
  EXPIRY_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  EXPIRY_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  EXPIRY_DATE_lt: DateTime

  """All values less than or equal the given value."""
  EXPIRY_DATE_lte: DateTime

  """All values greater than the given value."""
  EXPIRY_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  EXPIRY_DATE_gte: DateTime
  _MagicalBackRelation_R_RIG_TYPEToR_SOURCE_every: R_RIG_TYPEWhereInput
  _MagicalBackRelation_R_RIG_TYPEToR_SOURCE_some: R_RIG_TYPEWhereInput
  _MagicalBackRelation_R_RIG_TYPEToR_SOURCE_none: R_RIG_TYPEWhereInput
  _MagicalBackRelation_R_DRILL_TOOL_TYPEToR_SOURCE_every: R_DRILL_TOOL_TYPEWhereInput
  _MagicalBackRelation_R_DRILL_TOOL_TYPEToR_SOURCE_some: R_DRILL_TOOL_TYPEWhereInput
  _MagicalBackRelation_R_DRILL_TOOL_TYPEToR_SOURCE_none: R_DRILL_TOOL_TYPEWhereInput
  _MagicalBackRelation_R_DRILLING_MEDIAToR_SOURCE_every: R_DRILLING_MEDIAWhereInput
  _MagicalBackRelation_R_DRILLING_MEDIAToR_SOURCE_some: R_DRILLING_MEDIAWhereInput
  _MagicalBackRelation_R_DRILLING_MEDIAToR_SOURCE_none: R_DRILLING_MEDIAWhereInput
  _MagicalBackRelation_R_LITHOLOGYToR_SOURCE_every: R_LITHOLOGYWhereInput
  _MagicalBackRelation_R_LITHOLOGYToR_SOURCE_some: R_LITHOLOGYWhereInput
  _MagicalBackRelation_R_LITHOLOGYToR_SOURCE_none: R_LITHOLOGYWhereInput
  _MagicalBackRelation_R_DOCUMENT_TYPEToR_SOURCE_every: R_DOCUMENT_TYPEWhereInput
  _MagicalBackRelation_R_DOCUMENT_TYPEToR_SOURCE_some: R_DOCUMENT_TYPEWhereInput
  _MagicalBackRelation_R_DOCUMENT_TYPEToR_SOURCE_none: R_DOCUMENT_TYPEWhereInput
  _MagicalBackRelation_R_LITH_ROCK_TYPEToR_SOURCE_every: R_LITH_ROCK_TYPEWhereInput
  _MagicalBackRelation_R_LITH_ROCK_TYPEToR_SOURCE_some: R_LITH_ROCK_TYPEWhereInput
  _MagicalBackRelation_R_LITH_ROCK_TYPEToR_SOURCE_none: R_LITH_ROCK_TYPEWhereInput
  _MagicalBackRelation_R_ADDITIVE_TYPEToR_SOURCE_every: R_ADDITIVE_TYPEWhereInput
  _MagicalBackRelation_R_ADDITIVE_TYPEToR_SOURCE_some: R_ADDITIVE_TYPEWhereInput
  _MagicalBackRelation_R_ADDITIVE_TYPEToR_SOURCE_none: R_ADDITIVE_TYPEWhereInput
  _MagicalBackRelation_R_RIG_BLOWOUT_PREVENTERToR_SOURCE_every: R_RIG_BLOWOUT_PREVENTERWhereInput
  _MagicalBackRelation_R_RIG_BLOWOUT_PREVENTERToR_SOURCE_some: R_RIG_BLOWOUT_PREVENTERWhereInput
  _MagicalBackRelation_R_RIG_BLOWOUT_PREVENTERToR_SOURCE_none: R_RIG_BLOWOUT_PREVENTERWhereInput
  _MagicalBackRelation_R_SOURCEToWellSourceDetail_every: WellSourceDetailWhereInput
  _MagicalBackRelation_R_SOURCEToWellSourceDetail_some: WellSourceDetailWhereInput
  _MagicalBackRelation_R_SOURCEToWellSourceDetail_none: WellSourceDetailWhereInput
  _MagicalBackRelation_R_PROPPANT_TYPEToR_SOURCE_every: R_PROPPANT_TYPEWhereInput
  _MagicalBackRelation_R_PROPPANT_TYPEToR_SOURCE_some: R_PROPPANT_TYPEWhereInput
  _MagicalBackRelation_R_PROPPANT_TYPEToR_SOURCE_none: R_PROPPANT_TYPEWhereInput
  _MagicalBackRelation_CauseToR_SOURCE_every: CauseWhereInput
  _MagicalBackRelation_CauseToR_SOURCE_some: CauseWhereInput
  _MagicalBackRelation_CauseToR_SOURCE_none: CauseWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_STATUS_every: R_WELL_STATUSWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_STATUS_some: R_WELL_STATUSWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_STATUS_none: R_WELL_STATUSWhereInput
  _MagicalBackRelation_R_SOURCEToWell_every: WellWhereInput
  _MagicalBackRelation_R_SOURCEToWell_some: WellWhereInput
  _MagicalBackRelation_R_SOURCEToWell_none: WellWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_DRILL_OP_TYPE_every: R_WELL_DRILL_OP_TYPEWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_DRILL_OP_TYPE_some: R_WELL_DRILL_OP_TYPEWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_DRILL_OP_TYPE_none: R_WELL_DRILL_OP_TYPEWhereInput
  _MagicalBackRelation_R_COMPLETION_METHODToR_SOURCE_every: R_COMPLETION_METHODWhereInput
  _MagicalBackRelation_R_COMPLETION_METHODToR_SOURCE_some: R_COMPLETION_METHODWhereInput
  _MagicalBackRelation_R_COMPLETION_METHODToR_SOURCE_none: R_COMPLETION_METHODWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_TEST_TYPE_every: R_WELL_TEST_TYPEWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_TEST_TYPE_some: R_WELL_TEST_TYPEWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_TEST_TYPE_none: R_WELL_TEST_TYPEWhereInput
  _MagicalBackRelation_EventToR_SOURCE_every: EventWhereInput
  _MagicalBackRelation_EventToR_SOURCE_some: EventWhereInput
  _MagicalBackRelation_EventToR_SOURCE_none: EventWhereInput
  _MagicalBackRelation_R_SOURCEToUS_OFFSHORE_LEASE_every: US_OFFSHORE_LEASEWhereInput
  _MagicalBackRelation_R_SOURCEToUS_OFFSHORE_LEASE_some: US_OFFSHORE_LEASEWhereInput
  _MagicalBackRelation_R_SOURCEToUS_OFFSHORE_LEASE_none: US_OFFSHORE_LEASEWhereInput
  _MagicalBackRelation_R_LINER_TYPEToR_SOURCE_every: R_LINER_TYPEWhereInput
  _MagicalBackRelation_R_LINER_TYPEToR_SOURCE_some: R_LINER_TYPEWhereInput
  _MagicalBackRelation_R_LINER_TYPEToR_SOURCE_none: R_LINER_TYPEWhereInput
  _MagicalBackRelation_R_LOG_TOOL_TYPEToR_SOURCE_every: R_LOG_TOOL_TYPEWhereInput
  _MagicalBackRelation_R_LOG_TOOL_TYPEToR_SOURCE_some: R_LOG_TOOL_TYPEWhereInput
  _MagicalBackRelation_R_LOG_TOOL_TYPEToR_SOURCE_none: R_LOG_TOOL_TYPEWhereInput
  _MagicalBackRelation_EquipmentToR_SOURCE_every: EquipmentWhereInput
  _MagicalBackRelation_EquipmentToR_SOURCE_some: EquipmentWhereInput
  _MagicalBackRelation_EquipmentToR_SOURCE_none: EquipmentWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_CLASS_every: R_WELL_CLASSWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_CLASS_some: R_WELL_CLASSWhereInput
  _MagicalBackRelation_R_SOURCEToR_WELL_CLASS_none: R_WELL_CLASSWhereInput
  _MagicalBackRelation_R_CEMENT_TYPEToR_SOURCE_every: R_CEMENT_TYPEWhereInput
  _MagicalBackRelation_R_CEMENT_TYPEToR_SOURCE_some: R_CEMENT_TYPEWhereInput
  _MagicalBackRelation_R_CEMENT_TYPEToR_SOURCE_none: R_CEMENT_TYPEWhereInput
  _MagicalBackRelation_R_DRILL_BIT_TYPEToR_SOURCE_every: R_DRILL_BIT_TYPEWhereInput
  _MagicalBackRelation_R_DRILL_BIT_TYPEToR_SOURCE_some: R_DRILL_BIT_TYPEWhereInput
  _MagicalBackRelation_R_DRILL_BIT_TYPEToR_SOURCE_none: R_DRILL_BIT_TYPEWhereInput
  _MagicalBackRelation_R_COMPLETION_TYPEToR_SOURCE_every: R_COMPLETION_TYPEWhereInput
  _MagicalBackRelation_R_COMPLETION_TYPEToR_SOURCE_some: R_COMPLETION_TYPEWhereInput
  _MagicalBackRelation_R_COMPLETION_TYPEToR_SOURCE_none: R_COMPLETION_TYPEWhereInput
}

input R_SOURCEWhereUniqueInput {
  id: ID
}

type R_WELL_CLASS implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_WELL_CLASSConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_WELL_CLASSEdge]!
  aggregate: AggregateR_WELL_CLASS!
}

input R_WELL_CLASSCreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_WELL_CLASSEdge {
  """The item at the end of the edge."""
  node: R_WELL_CLASS!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_WELL_CLASSOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_WELL_CLASSPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_WELL_CLASSSubscriptionPayload {
  mutation: MutationType!
  node: R_WELL_CLASS
  updatedFields: [String!]
  previousValues: R_WELL_CLASSPreviousValues
}

input R_WELL_CLASSSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_CLASSSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_CLASSSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_CLASSSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_WELL_CLASSWhereInput
}

input R_WELL_CLASSUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_WELL_CLASSWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_CLASSWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_CLASSWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_CLASSWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_WELL_CLASSWhereUniqueInput {
  id: ID
}

type R_WELL_DRILL_OP_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_WELL_DRILL_OP_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_WELL_DRILL_OP_TYPEEdge]!
  aggregate: AggregateR_WELL_DRILL_OP_TYPE!
}

input R_WELL_DRILL_OP_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_WELL_DRILL_OP_TYPEEdge {
  """The item at the end of the edge."""
  node: R_WELL_DRILL_OP_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_WELL_DRILL_OP_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_WELL_DRILL_OP_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_WELL_DRILL_OP_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_WELL_DRILL_OP_TYPE
  updatedFields: [String!]
  previousValues: R_WELL_DRILL_OP_TYPEPreviousValues
}

input R_WELL_DRILL_OP_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_DRILL_OP_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_DRILL_OP_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_DRILL_OP_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_WELL_DRILL_OP_TYPEWhereInput
}

input R_WELL_DRILL_OP_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_WELL_DRILL_OP_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_DRILL_OP_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_DRILL_OP_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_DRILL_OP_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_WELL_DRILL_OP_TYPEWhereUniqueInput {
  id: ID
}

type R_WELL_STATUS implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_WELL_STATUSConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_WELL_STATUSEdge]!
  aggregate: AggregateR_WELL_STATUS!
}

input R_WELL_STATUSCreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_WELL_STATUSEdge {
  """The item at the end of the edge."""
  node: R_WELL_STATUS!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_WELL_STATUSOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_WELL_STATUSPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_WELL_STATUSSubscriptionPayload {
  mutation: MutationType!
  node: R_WELL_STATUS
  updatedFields: [String!]
  previousValues: R_WELL_STATUSPreviousValues
}

input R_WELL_STATUSSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_STATUSSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_STATUSSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_STATUSSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_WELL_STATUSWhereInput
}

input R_WELL_STATUSUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_WELL_STATUSWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_STATUSWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_STATUSWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_STATUSWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_WELL_STATUSWhereUniqueInput {
  id: ID
}

type R_WELL_TEST_TYPE implements Node {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type R_WELL_TEST_TYPEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [R_WELL_TEST_TYPEEdge]!
  aggregate: AggregateR_WELL_TEST_TYPE!
}

input R_WELL_TEST_TYPECreateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type R_WELL_TEST_TYPEEdge {
  """The item at the end of the edge."""
  node: R_WELL_TEST_TYPE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum R_WELL_TEST_TYPEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  LONG_NAME_ASC
  LONG_NAME_DESC
  REMARK_ASC
  REMARK_DESC
  SHORT_NAME_ASC
  SHORT_NAME_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type R_WELL_TEST_TYPEPreviousValues {
  id: ID!
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
}

type R_WELL_TEST_TYPESubscriptionPayload {
  mutation: MutationType!
  node: R_WELL_TEST_TYPE
  updatedFields: [String!]
  previousValues: R_WELL_TEST_TYPEPreviousValues
}

input R_WELL_TEST_TYPESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_TEST_TYPESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_TEST_TYPESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_TEST_TYPESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: R_WELL_TEST_TYPEWhereInput
}

input R_WELL_TEST_TYPEUpdateInput {
  name: String
  ABBREVIATION: String
  LONG_NAME: String
  REMARK: String
  SHORT_NAME: String
  SOURCE: R_SOURCEUpdateOneInput
}

input R_WELL_TEST_TYPEWhereInput {
  """Logical AND on all given filters."""
  AND: [R_WELL_TEST_TYPEWhereInput!]

  """Logical OR on all given filters."""
  OR: [R_WELL_TEST_TYPEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [R_WELL_TEST_TYPEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  ABBREVIATION: String

  """All values that are not equal to given value."""
  ABBREVIATION_not: String

  """All values that are contained in given list."""
  ABBREVIATION_in: [String!]

  """All values that are not contained in given list."""
  ABBREVIATION_not_in: [String!]

  """All values less than the given value."""
  ABBREVIATION_lt: String

  """All values less than or equal the given value."""
  ABBREVIATION_lte: String

  """All values greater than the given value."""
  ABBREVIATION_gt: String

  """All values greater than or equal the given value."""
  ABBREVIATION_gte: String

  """All values containing the given string."""
  ABBREVIATION_contains: String

  """All values not containing the given string."""
  ABBREVIATION_not_contains: String

  """All values starting with the given string."""
  ABBREVIATION_starts_with: String

  """All values not starting with the given string."""
  ABBREVIATION_not_starts_with: String

  """All values ending with the given string."""
  ABBREVIATION_ends_with: String

  """All values not ending with the given string."""
  ABBREVIATION_not_ends_with: String
  LONG_NAME: String

  """All values that are not equal to given value."""
  LONG_NAME_not: String

  """All values that are contained in given list."""
  LONG_NAME_in: [String!]

  """All values that are not contained in given list."""
  LONG_NAME_not_in: [String!]

  """All values less than the given value."""
  LONG_NAME_lt: String

  """All values less than or equal the given value."""
  LONG_NAME_lte: String

  """All values greater than the given value."""
  LONG_NAME_gt: String

  """All values greater than or equal the given value."""
  LONG_NAME_gte: String

  """All values containing the given string."""
  LONG_NAME_contains: String

  """All values not containing the given string."""
  LONG_NAME_not_contains: String

  """All values starting with the given string."""
  LONG_NAME_starts_with: String

  """All values not starting with the given string."""
  LONG_NAME_not_starts_with: String

  """All values ending with the given string."""
  LONG_NAME_ends_with: String

  """All values not ending with the given string."""
  LONG_NAME_not_ends_with: String
  REMARK: String

  """All values that are not equal to given value."""
  REMARK_not: String

  """All values that are contained in given list."""
  REMARK_in: [String!]

  """All values that are not contained in given list."""
  REMARK_not_in: [String!]

  """All values less than the given value."""
  REMARK_lt: String

  """All values less than or equal the given value."""
  REMARK_lte: String

  """All values greater than the given value."""
  REMARK_gt: String

  """All values greater than or equal the given value."""
  REMARK_gte: String

  """All values containing the given string."""
  REMARK_contains: String

  """All values not containing the given string."""
  REMARK_not_contains: String

  """All values starting with the given string."""
  REMARK_starts_with: String

  """All values not starting with the given string."""
  REMARK_not_starts_with: String

  """All values ending with the given string."""
  REMARK_ends_with: String

  """All values not ending with the given string."""
  REMARK_not_ends_with: String
  SHORT_NAME: String

  """All values that are not equal to given value."""
  SHORT_NAME_not: String

  """All values that are contained in given list."""
  SHORT_NAME_in: [String!]

  """All values that are not contained in given list."""
  SHORT_NAME_not_in: [String!]

  """All values less than the given value."""
  SHORT_NAME_lt: String

  """All values less than or equal the given value."""
  SHORT_NAME_lte: String

  """All values greater than the given value."""
  SHORT_NAME_gt: String

  """All values greater than or equal the given value."""
  SHORT_NAME_gte: String

  """All values containing the given string."""
  SHORT_NAME_contains: String

  """All values not containing the given string."""
  SHORT_NAME_not_contains: String

  """All values starting with the given string."""
  SHORT_NAME_starts_with: String

  """All values not starting with the given string."""
  SHORT_NAME_not_starts_with: String

  """All values ending with the given string."""
  SHORT_NAME_ends_with: String

  """All values not ending with the given string."""
  SHORT_NAME_not_ends_with: String
  SOURCE: R_SOURCEWhereInput
}

input R_WELL_TEST_TYPEWhereUniqueInput {
  id: ID
}

type Rig implements Node {
  id: ID!
  name: String!
  type: String
  owner(where: OrganizationWhereInput): Organization
  ratedWaterDepth(where: PhysicalQuantityWhereInput): PhysicalQuantity
  externalReference: String
}

"""A connection to a list of items."""
type RigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RigEdge]!
  aggregate: AggregateRig!
}

input RigCreateInput {
  name: String!
  type: String
  externalReference: String
  owner: OrganizationCreateOneInput
  ratedWaterDepth: PhysicalQuantityCreateOneInput
}

input RigCreateOneInput {
  create: RigCreateInput
  connect: RigWhereUniqueInput
}

"""An edge in a connection."""
type RigEdge {
  """The item at the end of the edge."""
  node: Rig!

  """A cursor for use in pagination."""
  cursor: String!
}

type RiggingActivityDetail implements Node {
  id: ID!
  name: String!
  equipment(where: EquipmentWhereInput): Equipment
}

"""A connection to a list of items."""
type RiggingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RiggingActivityDetailEdge]!
  aggregate: AggregateRiggingActivityDetail!
}

input RiggingActivityDetailCreateInput {
  name: String!
  equipment: EquipmentCreateOneInput
}

"""An edge in a connection."""
type RiggingActivityDetailEdge {
  """The item at the end of the edge."""
  node: RiggingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RiggingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RiggingActivityDetailPreviousValues {
  id: ID!
  name: String!
}

type RiggingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: RiggingActivityDetail
  updatedFields: [String!]
  previousValues: RiggingActivityDetailPreviousValues
}

input RiggingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RiggingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RiggingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RiggingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RiggingActivityDetailWhereInput
}

input RiggingActivityDetailUpdateInput {
  name: String
  equipment: EquipmentUpdateOneInput
}

input RiggingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [RiggingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [RiggingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RiggingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  equipment: EquipmentWhereInput
}

input RiggingActivityDetailWhereUniqueInput {
  id: ID
}

enum RigOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  externalReference_ASC
  externalReference_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RigPreviousValues {
  id: ID!
  name: String!
  type: String
  externalReference: String
}

type RigSubscriptionPayload {
  mutation: MutationType!
  node: Rig
  updatedFields: [String!]
  previousValues: RigPreviousValues
}

input RigSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RigSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RigSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RigSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RigWhereInput
}

input RigUpdateDataInput {
  name: String
  type: String
  externalReference: String
  owner: OrganizationUpdateOneInput
  ratedWaterDepth: PhysicalQuantityUpdateOneInput
}

input RigUpdateInput {
  name: String
  type: String
  externalReference: String
  owner: OrganizationUpdateOneInput
  ratedWaterDepth: PhysicalQuantityUpdateOneInput
}

input RigUpdateOneInput {
  create: RigCreateInput
  connect: RigWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RigUpdateDataInput
  upsert: RigUpsertNestedInput
}

input RigUpsertNestedInput {
  update: RigUpdateDataInput!
  create: RigCreateInput!
}

input RigWhereInput {
  """Logical AND on all given filters."""
  AND: [RigWhereInput!]

  """Logical OR on all given filters."""
  OR: [RigWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RigWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  externalReference: String

  """All values that are not equal to given value."""
  externalReference_not: String

  """All values that are contained in given list."""
  externalReference_in: [String!]

  """All values that are not contained in given list."""
  externalReference_not_in: [String!]

  """All values less than the given value."""
  externalReference_lt: String

  """All values less than or equal the given value."""
  externalReference_lte: String

  """All values greater than the given value."""
  externalReference_gt: String

  """All values greater than or equal the given value."""
  externalReference_gte: String

  """All values containing the given string."""
  externalReference_contains: String

  """All values not containing the given string."""
  externalReference_not_contains: String

  """All values starting with the given string."""
  externalReference_starts_with: String

  """All values not starting with the given string."""
  externalReference_not_starts_with: String

  """All values ending with the given string."""
  externalReference_ends_with: String

  """All values not ending with the given string."""
  externalReference_not_ends_with: String
  owner: OrganizationWhereInput
  ratedWaterDepth: PhysicalQuantityWhereInput
  _MagicalBackRelation_EventToRig_every: EventWhereInput
  _MagicalBackRelation_EventToRig_some: EventWhereInput
  _MagicalBackRelation_EventToRig_none: EventWhereInput
}

input RigWhereUniqueInput {
  id: ID
}

type StuckPipeProblemDetail implements Node {
  id: ID!
  name: String!
  depth(where: PhysicalQuantityWhereInput): PhysicalQuantity
  jarForce(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type StuckPipeProblemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StuckPipeProblemDetailEdge]!
  aggregate: AggregateStuckPipeProblemDetail!
}

input StuckPipeProblemDetailCreateInput {
  name: String!
  depth: PhysicalQuantityCreateOneInput
  jarForce: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type StuckPipeProblemDetailEdge {
  """The item at the end of the edge."""
  node: StuckPipeProblemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StuckPipeProblemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StuckPipeProblemDetailPreviousValues {
  id: ID!
  name: String!
}

type StuckPipeProblemDetailSubscriptionPayload {
  mutation: MutationType!
  node: StuckPipeProblemDetail
  updatedFields: [String!]
  previousValues: StuckPipeProblemDetailPreviousValues
}

input StuckPipeProblemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StuckPipeProblemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StuckPipeProblemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StuckPipeProblemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StuckPipeProblemDetailWhereInput
}

input StuckPipeProblemDetailUpdateInput {
  name: String
  depth: PhysicalQuantityUpdateOneInput
  jarForce: PhysicalQuantityUpdateOneInput
}

input StuckPipeProblemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [StuckPipeProblemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [StuckPipeProblemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StuckPipeProblemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  depth: PhysicalQuantityWhereInput
  jarForce: PhysicalQuantityWhereInput
}

input StuckPipeProblemDetailWhereUniqueInput {
  id: ID
}

type Subscription {
  myThing(where: MyThingSubscriptionWhereInput): MyThingSubscriptionPayload
  surfaceForm(where: SurfaceFormSubscriptionWhereInput): SurfaceFormSubscriptionPayload
  person(where: PersonSubscriptionWhereInput): PersonSubscriptionPayload
  problem(where: ProblemSubscriptionWhereInput): ProblemSubscriptionPayload
  stuckPipeProblemDetail(where: StuckPipeProblemDetailSubscriptionWhereInput): StuckPipeProblemDetailSubscriptionPayload
  lostCirculationProblemDetail(where: LostCirculationProblemDetailSubscriptionWhereInput): LostCirculationProblemDetailSubscriptionPayload
  kickProblemDetail(where: KickProblemDetailSubscriptionWhereInput): KickProblemDetailSubscriptionPayload
  fishingProblemDetail(where: FishingProblemDetailSubscriptionWhereInput): FishingProblemDetailSubscriptionPayload
  ballooningProblemDetail(where: BallooningProblemDetailSubscriptionWhereInput): BallooningProblemDetailSubscriptionPayload
  waitingOnProblemDetail(where: WaitingOnProblemDetailSubscriptionWhereInput): WaitingOnProblemDetailSubscriptionPayload
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
  trippingActivityDetail(where: TrippingActivityDetailSubscriptionWhereInput): TrippingActivityDetailSubscriptionPayload
  circulatingActivityDetail(where: CirculatingActivityDetailSubscriptionWhereInput): CirculatingActivityDetailSubscriptionPayload
  drillingActivityDetail(where: DrillingActivityDetailSubscriptionWhereInput): DrillingActivityDetailSubscriptionPayload
  cementingActivityDetail(where: CementingActivityDetailSubscriptionWhereInput): CementingActivityDetailSubscriptionPayload
  loggingActivityDetail(where: LoggingActivityDetailSubscriptionWhereInput): LoggingActivityDetailSubscriptionPayload
  perforatingActivityDetail(where: PerforatingActivityDetailSubscriptionWhereInput): PerforatingActivityDetailSubscriptionPayload
  testingActivityDetail(where: TestingActivityDetailSubscriptionWhereInput): TestingActivityDetailSubscriptionPayload
  riggingActivityDetail(where: RiggingActivityDetailSubscriptionWhereInput): RiggingActivityDetailSubscriptionPayload
  casingActivityDetail(where: CasingActivityDetailSubscriptionWhereInput): CasingActivityDetailSubscriptionPayload
  changeMudWeightActivityDetail(where: ChangeMudWeightActivityDetailSubscriptionWhereInput): ChangeMudWeightActivityDetailSubscriptionPayload
  documentation(where: DocumentationSubscriptionWhereInput): DocumentationSubscriptionPayload
  r_ADDITIVE_TYPE(where: R_ADDITIVE_TYPESubscriptionWhereInput): R_ADDITIVE_TYPESubscriptionPayload
  r_CEMENT_TYPE(where: R_CEMENT_TYPESubscriptionWhereInput): R_CEMENT_TYPESubscriptionPayload
  r_COMPLETION_METHOD(where: R_COMPLETION_METHODSubscriptionWhereInput): R_COMPLETION_METHODSubscriptionPayload
  r_COMPLETION_TYPE(where: R_COMPLETION_TYPESubscriptionWhereInput): R_COMPLETION_TYPESubscriptionPayload
  r_DOCUMENT_TYPE(where: R_DOCUMENT_TYPESubscriptionWhereInput): R_DOCUMENT_TYPESubscriptionPayload
  r_DRILL_BIT_TYPE(where: R_DRILL_BIT_TYPESubscriptionWhereInput): R_DRILL_BIT_TYPESubscriptionPayload
  r_DRILL_TOOL_TYPE(where: R_DRILL_TOOL_TYPESubscriptionWhereInput): R_DRILL_TOOL_TYPESubscriptionPayload
  r_DRILLING_MEDIA(where: R_DRILLING_MEDIASubscriptionWhereInput): R_DRILLING_MEDIASubscriptionPayload
  r_LINER_TYPE(where: R_LINER_TYPESubscriptionWhereInput): R_LINER_TYPESubscriptionPayload
  r_LITH_ROCK_TYPE(where: R_LITH_ROCK_TYPESubscriptionWhereInput): R_LITH_ROCK_TYPESubscriptionPayload
  r_LITHOLOGY(where: R_LITHOLOGYSubscriptionWhereInput): R_LITHOLOGYSubscriptionPayload
  r_LOG_TOOL_TYPE(where: R_LOG_TOOL_TYPESubscriptionWhereInput): R_LOG_TOOL_TYPESubscriptionPayload
  r_PROPPANT_TYPE(where: R_PROPPANT_TYPESubscriptionWhereInput): R_PROPPANT_TYPESubscriptionPayload
  r_RIG_BLOWOUT_PREVENTER(where: R_RIG_BLOWOUT_PREVENTERSubscriptionWhereInput): R_RIG_BLOWOUT_PREVENTERSubscriptionPayload
  r_RIG_TYPE(where: R_RIG_TYPESubscriptionWhereInput): R_RIG_TYPESubscriptionPayload
  r_WELL_CLASS(where: R_WELL_CLASSSubscriptionWhereInput): R_WELL_CLASSSubscriptionPayload
  r_WELL_DRILL_OP_TYPE(where: R_WELL_DRILL_OP_TYPESubscriptionWhereInput): R_WELL_DRILL_OP_TYPESubscriptionPayload
  r_WELL_STATUS(where: R_WELL_STATUSSubscriptionWhereInput): R_WELL_STATUSSubscriptionPayload
  r_WELL_TEST_TYPE(where: R_WELL_TEST_TYPESubscriptionWhereInput): R_WELL_TEST_TYPESubscriptionPayload
  uS_OFFSHORE_LEASE(where: US_OFFSHORE_LEASESubscriptionWhereInput): US_OFFSHORE_LEASESubscriptionPayload
  field(where: FieldSubscriptionWhereInput): FieldSubscriptionPayload
  wellSourceDetail(where: WellSourceDetailSubscriptionWhereInput): WellSourceDetailSubscriptionPayload
  rig(where: RigSubscriptionWhereInput): RigSubscriptionPayload
  eventReporterDefinition(where: EventReporterDefinitionSubscriptionWhereInput): EventReporterDefinitionSubscriptionPayload
  wellLifecycle(where: WellLifecycleSubscriptionWhereInput): WellLifecycleSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  observation(where: ObservationSubscriptionWhereInput): ObservationSubscriptionPayload
  myOtherThing(where: MyOtherThingSubscriptionWhereInput): MyOtherThingSubscriptionPayload
  equipment(where: EquipmentSubscriptionWhereInput): EquipmentSubscriptionPayload
  activityDefinition(where: ActivityDefinitionSubscriptionWhereInput): ActivityDefinitionSubscriptionPayload
  problemDefinition(where: ProblemDefinitionSubscriptionWhereInput): ProblemDefinitionSubscriptionPayload
  well(where: WellSubscriptionWhereInput): WellSubscriptionPayload
  observationDefinition(where: ObservationDefinitionSubscriptionWhereInput): ObservationDefinitionSubscriptionPayload
  mechanism(where: MechanismSubscriptionWhereInput): MechanismSubscriptionPayload
  cause(where: CauseSubscriptionWhereInput): CauseSubscriptionPayload
  r_SOURCE(where: R_SOURCESubscriptionWhereInput): R_SOURCESubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  physicalQuantity(where: PhysicalQuantitySubscriptionWhereInput): PhysicalQuantitySubscriptionPayload
}

type SurfaceForm {
  kindId: ID!
  instanceId: String!
  surfaceForms: String
}

"""A connection to a list of items."""
type SurfaceFormConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurfaceFormEdge]!
  aggregate: AggregateSurfaceForm!
}

input SurfaceFormCreateInput {
  kindId: ID!
  instanceId: String!
  surfaceForms: String
}

"""An edge in a connection."""
type SurfaceFormEdge {
  """The item at the end of the edge."""
  node: SurfaceForm!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SurfaceFormOrderByInput {
  kindId_ASC
  kindId_DESC
  instanceId_ASC
  instanceId_DESC
  surfaceForms_ASC
  surfaceForms_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SurfaceFormPreviousValues {
  kindId: ID!
  instanceId: String!
  surfaceForms: String
}

type SurfaceFormSubscriptionPayload {
  mutation: MutationType!
  node: SurfaceForm
  updatedFields: [String!]
  previousValues: SurfaceFormPreviousValues
}

input SurfaceFormSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SurfaceFormSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurfaceFormSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurfaceFormSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SurfaceFormWhereInput
}

input SurfaceFormUpdateInput {
  kindId: ID
  instanceId: String
  surfaceForms: String
}

input SurfaceFormWhereInput {
  """Logical AND on all given filters."""
  AND: [SurfaceFormWhereInput!]

  """Logical OR on all given filters."""
  OR: [SurfaceFormWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SurfaceFormWhereInput!]
  kindId: ID

  """All values that are not equal to given value."""
  kindId_not: ID

  """All values that are contained in given list."""
  kindId_in: [ID!]

  """All values that are not contained in given list."""
  kindId_not_in: [ID!]

  """All values less than the given value."""
  kindId_lt: ID

  """All values less than or equal the given value."""
  kindId_lte: ID

  """All values greater than the given value."""
  kindId_gt: ID

  """All values greater than or equal the given value."""
  kindId_gte: ID

  """All values containing the given string."""
  kindId_contains: ID

  """All values not containing the given string."""
  kindId_not_contains: ID

  """All values starting with the given string."""
  kindId_starts_with: ID

  """All values not starting with the given string."""
  kindId_not_starts_with: ID

  """All values ending with the given string."""
  kindId_ends_with: ID

  """All values not ending with the given string."""
  kindId_not_ends_with: ID
  instanceId: String

  """All values that are not equal to given value."""
  instanceId_not: String

  """All values that are contained in given list."""
  instanceId_in: [String!]

  """All values that are not contained in given list."""
  instanceId_not_in: [String!]

  """All values less than the given value."""
  instanceId_lt: String

  """All values less than or equal the given value."""
  instanceId_lte: String

  """All values greater than the given value."""
  instanceId_gt: String

  """All values greater than or equal the given value."""
  instanceId_gte: String

  """All values containing the given string."""
  instanceId_contains: String

  """All values not containing the given string."""
  instanceId_not_contains: String

  """All values starting with the given string."""
  instanceId_starts_with: String

  """All values not starting with the given string."""
  instanceId_not_starts_with: String

  """All values ending with the given string."""
  instanceId_ends_with: String

  """All values not ending with the given string."""
  instanceId_not_ends_with: String
  surfaceForms: String

  """All values that are not equal to given value."""
  surfaceForms_not: String

  """All values that are contained in given list."""
  surfaceForms_in: [String!]

  """All values that are not contained in given list."""
  surfaceForms_not_in: [String!]

  """All values less than the given value."""
  surfaceForms_lt: String

  """All values less than or equal the given value."""
  surfaceForms_lte: String

  """All values greater than the given value."""
  surfaceForms_gt: String

  """All values greater than or equal the given value."""
  surfaceForms_gte: String

  """All values containing the given string."""
  surfaceForms_contains: String

  """All values not containing the given string."""
  surfaceForms_not_contains: String

  """All values starting with the given string."""
  surfaceForms_starts_with: String

  """All values not starting with the given string."""
  surfaceForms_not_starts_with: String

  """All values ending with the given string."""
  surfaceForms_ends_with: String

  """All values not ending with the given string."""
  surfaceForms_not_ends_with: String
}

type TestingActivityDetail implements Node {
  id: ID!
  name: String!
  typeOfTest: String
  pressure(where: PhysicalQuantityWhereInput): PhysicalQuantity
  timeHeld(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type TestingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestingActivityDetailEdge]!
  aggregate: AggregateTestingActivityDetail!
}

input TestingActivityDetailCreateInput {
  name: String!
  typeOfTest: String
  pressure: PhysicalQuantityCreateOneInput
  timeHeld: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type TestingActivityDetailEdge {
  """The item at the end of the edge."""
  node: TestingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  typeOfTest_ASC
  typeOfTest_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TestingActivityDetailPreviousValues {
  id: ID!
  name: String!
  typeOfTest: String
}

type TestingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: TestingActivityDetail
  updatedFields: [String!]
  previousValues: TestingActivityDetailPreviousValues
}

input TestingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestingActivityDetailWhereInput
}

input TestingActivityDetailUpdateInput {
  name: String
  typeOfTest: String
  pressure: PhysicalQuantityUpdateOneInput
  timeHeld: PhysicalQuantityUpdateOneInput
}

input TestingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [TestingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  typeOfTest: String

  """All values that are not equal to given value."""
  typeOfTest_not: String

  """All values that are contained in given list."""
  typeOfTest_in: [String!]

  """All values that are not contained in given list."""
  typeOfTest_not_in: [String!]

  """All values less than the given value."""
  typeOfTest_lt: String

  """All values less than or equal the given value."""
  typeOfTest_lte: String

  """All values greater than the given value."""
  typeOfTest_gt: String

  """All values greater than or equal the given value."""
  typeOfTest_gte: String

  """All values containing the given string."""
  typeOfTest_contains: String

  """All values not containing the given string."""
  typeOfTest_not_contains: String

  """All values starting with the given string."""
  typeOfTest_starts_with: String

  """All values not starting with the given string."""
  typeOfTest_not_starts_with: String

  """All values ending with the given string."""
  typeOfTest_ends_with: String

  """All values not ending with the given string."""
  typeOfTest_not_ends_with: String
  pressure: PhysicalQuantityWhereInput
  timeHeld: PhysicalQuantityWhereInput
}

input TestingActivityDetailWhereUniqueInput {
  id: ID
}

type TrippingActivityDetail implements Node {
  id: ID!
  name: String!
  from(where: PhysicalQuantityWhereInput): PhysicalQuantity
  to(where: PhysicalQuantityWhereInput): PhysicalQuantity
}

"""A connection to a list of items."""
type TrippingActivityDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrippingActivityDetailEdge]!
  aggregate: AggregateTrippingActivityDetail!
}

input TrippingActivityDetailCreateInput {
  name: String!
  from: PhysicalQuantityCreateOneInput
  to: PhysicalQuantityCreateOneInput
}

"""An edge in a connection."""
type TrippingActivityDetailEdge {
  """The item at the end of the edge."""
  node: TrippingActivityDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TrippingActivityDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TrippingActivityDetailPreviousValues {
  id: ID!
  name: String!
}

type TrippingActivityDetailSubscriptionPayload {
  mutation: MutationType!
  node: TrippingActivityDetail
  updatedFields: [String!]
  previousValues: TrippingActivityDetailPreviousValues
}

input TrippingActivityDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TrippingActivityDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrippingActivityDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrippingActivityDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TrippingActivityDetailWhereInput
}

input TrippingActivityDetailUpdateInput {
  name: String
  from: PhysicalQuantityUpdateOneInput
  to: PhysicalQuantityUpdateOneInput
}

input TrippingActivityDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [TrippingActivityDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [TrippingActivityDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TrippingActivityDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  from: PhysicalQuantityWhereInput
  to: PhysicalQuantityWhereInput
}

input TrippingActivityDetailWhereUniqueInput {
  id: ID
}

type US_OFFSHORE_LEASE implements Node {
  id: ID!
  name: String
  AREA_CODE: String
  BLOCK_NUM: String
  LEASE_STATUS_CD: String
  LEASE_EFF_DATE: DateTime
  LEASE_EXPIR_DATE: DateTime
  BLK_MAX_WTR_DPTH: Int
  SOURCE(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type US_OFFSHORE_LEASEConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [US_OFFSHORE_LEASEEdge]!
  aggregate: AggregateUS_OFFSHORE_LEASE!
}

input US_OFFSHORE_LEASECreateInput {
  name: String
  AREA_CODE: String
  BLOCK_NUM: String
  LEASE_STATUS_CD: String
  LEASE_EFF_DATE: DateTime
  LEASE_EXPIR_DATE: DateTime
  BLK_MAX_WTR_DPTH: Int
  SOURCE: R_SOURCECreateOneInput
}

"""An edge in a connection."""
type US_OFFSHORE_LEASEEdge {
  """The item at the end of the edge."""
  node: US_OFFSHORE_LEASE!

  """A cursor for use in pagination."""
  cursor: String!
}

enum US_OFFSHORE_LEASEOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  AREA_CODE_ASC
  AREA_CODE_DESC
  BLOCK_NUM_ASC
  BLOCK_NUM_DESC
  LEASE_STATUS_CD_ASC
  LEASE_STATUS_CD_DESC
  LEASE_EFF_DATE_ASC
  LEASE_EFF_DATE_DESC
  LEASE_EXPIR_DATE_ASC
  LEASE_EXPIR_DATE_DESC
  BLK_MAX_WTR_DPTH_ASC
  BLK_MAX_WTR_DPTH_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type US_OFFSHORE_LEASEPreviousValues {
  id: ID!
  name: String
  AREA_CODE: String
  BLOCK_NUM: String
  LEASE_STATUS_CD: String
  LEASE_EFF_DATE: DateTime
  LEASE_EXPIR_DATE: DateTime
  BLK_MAX_WTR_DPTH: Int
}

type US_OFFSHORE_LEASESubscriptionPayload {
  mutation: MutationType!
  node: US_OFFSHORE_LEASE
  updatedFields: [String!]
  previousValues: US_OFFSHORE_LEASEPreviousValues
}

input US_OFFSHORE_LEASESubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [US_OFFSHORE_LEASESubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [US_OFFSHORE_LEASESubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [US_OFFSHORE_LEASESubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: US_OFFSHORE_LEASEWhereInput
}

input US_OFFSHORE_LEASEUpdateInput {
  name: String
  AREA_CODE: String
  BLOCK_NUM: String
  LEASE_STATUS_CD: String
  LEASE_EFF_DATE: DateTime
  LEASE_EXPIR_DATE: DateTime
  BLK_MAX_WTR_DPTH: Int
  SOURCE: R_SOURCEUpdateOneInput
}

input US_OFFSHORE_LEASEWhereInput {
  """Logical AND on all given filters."""
  AND: [US_OFFSHORE_LEASEWhereInput!]

  """Logical OR on all given filters."""
  OR: [US_OFFSHORE_LEASEWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [US_OFFSHORE_LEASEWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  AREA_CODE: String

  """All values that are not equal to given value."""
  AREA_CODE_not: String

  """All values that are contained in given list."""
  AREA_CODE_in: [String!]

  """All values that are not contained in given list."""
  AREA_CODE_not_in: [String!]

  """All values less than the given value."""
  AREA_CODE_lt: String

  """All values less than or equal the given value."""
  AREA_CODE_lte: String

  """All values greater than the given value."""
  AREA_CODE_gt: String

  """All values greater than or equal the given value."""
  AREA_CODE_gte: String

  """All values containing the given string."""
  AREA_CODE_contains: String

  """All values not containing the given string."""
  AREA_CODE_not_contains: String

  """All values starting with the given string."""
  AREA_CODE_starts_with: String

  """All values not starting with the given string."""
  AREA_CODE_not_starts_with: String

  """All values ending with the given string."""
  AREA_CODE_ends_with: String

  """All values not ending with the given string."""
  AREA_CODE_not_ends_with: String
  BLOCK_NUM: String

  """All values that are not equal to given value."""
  BLOCK_NUM_not: String

  """All values that are contained in given list."""
  BLOCK_NUM_in: [String!]

  """All values that are not contained in given list."""
  BLOCK_NUM_not_in: [String!]

  """All values less than the given value."""
  BLOCK_NUM_lt: String

  """All values less than or equal the given value."""
  BLOCK_NUM_lte: String

  """All values greater than the given value."""
  BLOCK_NUM_gt: String

  """All values greater than or equal the given value."""
  BLOCK_NUM_gte: String

  """All values containing the given string."""
  BLOCK_NUM_contains: String

  """All values not containing the given string."""
  BLOCK_NUM_not_contains: String

  """All values starting with the given string."""
  BLOCK_NUM_starts_with: String

  """All values not starting with the given string."""
  BLOCK_NUM_not_starts_with: String

  """All values ending with the given string."""
  BLOCK_NUM_ends_with: String

  """All values not ending with the given string."""
  BLOCK_NUM_not_ends_with: String
  LEASE_STATUS_CD: String

  """All values that are not equal to given value."""
  LEASE_STATUS_CD_not: String

  """All values that are contained in given list."""
  LEASE_STATUS_CD_in: [String!]

  """All values that are not contained in given list."""
  LEASE_STATUS_CD_not_in: [String!]

  """All values less than the given value."""
  LEASE_STATUS_CD_lt: String

  """All values less than or equal the given value."""
  LEASE_STATUS_CD_lte: String

  """All values greater than the given value."""
  LEASE_STATUS_CD_gt: String

  """All values greater than or equal the given value."""
  LEASE_STATUS_CD_gte: String

  """All values containing the given string."""
  LEASE_STATUS_CD_contains: String

  """All values not containing the given string."""
  LEASE_STATUS_CD_not_contains: String

  """All values starting with the given string."""
  LEASE_STATUS_CD_starts_with: String

  """All values not starting with the given string."""
  LEASE_STATUS_CD_not_starts_with: String

  """All values ending with the given string."""
  LEASE_STATUS_CD_ends_with: String

  """All values not ending with the given string."""
  LEASE_STATUS_CD_not_ends_with: String
  LEASE_EFF_DATE: DateTime

  """All values that are not equal to given value."""
  LEASE_EFF_DATE_not: DateTime

  """All values that are contained in given list."""
  LEASE_EFF_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  LEASE_EFF_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  LEASE_EFF_DATE_lt: DateTime

  """All values less than or equal the given value."""
  LEASE_EFF_DATE_lte: DateTime

  """All values greater than the given value."""
  LEASE_EFF_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  LEASE_EFF_DATE_gte: DateTime
  LEASE_EXPIR_DATE: DateTime

  """All values that are not equal to given value."""
  LEASE_EXPIR_DATE_not: DateTime

  """All values that are contained in given list."""
  LEASE_EXPIR_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  LEASE_EXPIR_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  LEASE_EXPIR_DATE_lt: DateTime

  """All values less than or equal the given value."""
  LEASE_EXPIR_DATE_lte: DateTime

  """All values greater than the given value."""
  LEASE_EXPIR_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  LEASE_EXPIR_DATE_gte: DateTime
  BLK_MAX_WTR_DPTH: Int

  """All values that are not equal to given value."""
  BLK_MAX_WTR_DPTH_not: Int

  """All values that are contained in given list."""
  BLK_MAX_WTR_DPTH_in: [Int!]

  """All values that are not contained in given list."""
  BLK_MAX_WTR_DPTH_not_in: [Int!]

  """All values less than the given value."""
  BLK_MAX_WTR_DPTH_lt: Int

  """All values less than or equal the given value."""
  BLK_MAX_WTR_DPTH_lte: Int

  """All values greater than the given value."""
  BLK_MAX_WTR_DPTH_gt: Int

  """All values greater than or equal the given value."""
  BLK_MAX_WTR_DPTH_gte: Int
  SOURCE: R_SOURCEWhereInput
}

input US_OFFSHORE_LEASEWhereUniqueInput {
  id: ID
}

type WaitingOnProblemDetail implements Node {
  id: ID!
  name: String!
  what: String
}

"""A connection to a list of items."""
type WaitingOnProblemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WaitingOnProblemDetailEdge]!
  aggregate: AggregateWaitingOnProblemDetail!
}

input WaitingOnProblemDetailCreateInput {
  name: String!
  what: String
}

"""An edge in a connection."""
type WaitingOnProblemDetailEdge {
  """The item at the end of the edge."""
  node: WaitingOnProblemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WaitingOnProblemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  what_ASC
  what_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WaitingOnProblemDetailPreviousValues {
  id: ID!
  name: String!
  what: String
}

type WaitingOnProblemDetailSubscriptionPayload {
  mutation: MutationType!
  node: WaitingOnProblemDetail
  updatedFields: [String!]
  previousValues: WaitingOnProblemDetailPreviousValues
}

input WaitingOnProblemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WaitingOnProblemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WaitingOnProblemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WaitingOnProblemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WaitingOnProblemDetailWhereInput
}

input WaitingOnProblemDetailUpdateInput {
  name: String
  what: String
}

input WaitingOnProblemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [WaitingOnProblemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [WaitingOnProblemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WaitingOnProblemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  what: String

  """All values that are not equal to given value."""
  what_not: String

  """All values that are contained in given list."""
  what_in: [String!]

  """All values that are not contained in given list."""
  what_not_in: [String!]

  """All values less than the given value."""
  what_lt: String

  """All values less than or equal the given value."""
  what_lte: String

  """All values greater than the given value."""
  what_gt: String

  """All values greater than or equal the given value."""
  what_gte: String

  """All values containing the given string."""
  what_contains: String

  """All values not containing the given string."""
  what_not_contains: String

  """All values starting with the given string."""
  what_starts_with: String

  """All values not starting with the given string."""
  what_not_starts_with: String

  """All values ending with the given string."""
  what_ends_with: String

  """All values not ending with the given string."""
  what_not_ends_with: String
}

input WaitingOnProblemDetailWhereUniqueInput {
  id: ID
}

type Well implements Node {
  id: ID!
  name: String!
  UWI: String
  SPUD_DATE: DateTime
  SURFACE_LATITUDE: String
  SURFACE_LONGITUDE: String
  BOTTOM_HOLE_LATITUDE: String
  BOTTOM_HOLE_LONGITUDE: String
  WATER_DEPTH(where: PhysicalQuantityWhereInput): PhysicalQuantity
  ASSIGNED_FIELD(where: FieldWhereInput): Field
  OPERATOR(where: OrganizationWhereInput): Organization
  FINAL_TD(where: PhysicalQuantityWhereInput): PhysicalQuantity
  FINAL_DRILL_DATE: DateTime
  COMPLETION_DATE: DateTime
  ABANDONMENT_DATE: DateTime
  ENVIRONMENT_TYPE: String
  SURF_AREA_CODE: String
  SURF_BLOCK_NUMBER: String
  SURF_LEASE_NUMBER: String
  BOTM_AREA_CODE: String
  BOTM_BLOCK_NUMBER: String
  BOTM_LEASE_NUMBER: String
  source(where: R_SOURCEWhereInput): R_SOURCE
  wellSourceDetail(where: WellSourceDetailWhereInput): WellSourceDetail
}

"""A connection to a list of items."""
type WellConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WellEdge]!
  aggregate: AggregateWell!
}

input WellCreateInput {
  name: String!
  UWI: String
  SPUD_DATE: DateTime
  SURFACE_LATITUDE: String
  SURFACE_LONGITUDE: String
  BOTTOM_HOLE_LATITUDE: String
  BOTTOM_HOLE_LONGITUDE: String
  FINAL_DRILL_DATE: DateTime
  COMPLETION_DATE: DateTime
  ABANDONMENT_DATE: DateTime
  ENVIRONMENT_TYPE: String
  SURF_AREA_CODE: String
  SURF_BLOCK_NUMBER: String
  SURF_LEASE_NUMBER: String
  BOTM_AREA_CODE: String
  BOTM_BLOCK_NUMBER: String
  BOTM_LEASE_NUMBER: String
  WATER_DEPTH: PhysicalQuantityCreateOneInput
  ASSIGNED_FIELD: FieldCreateOneInput
  OPERATOR: OrganizationCreateOneInput
  FINAL_TD: PhysicalQuantityCreateOneInput
  source: R_SOURCECreateOneInput
  wellSourceDetail: WellSourceDetailCreateOneInput
}

input WellCreateOneInput {
  create: WellCreateInput
  connect: WellWhereUniqueInput
}

"""An edge in a connection."""
type WellEdge {
  """The item at the end of the edge."""
  node: Well!

  """A cursor for use in pagination."""
  cursor: String!
}

type WellLifecycle implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type WellLifecycleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WellLifecycleEdge]!
  aggregate: AggregateWellLifecycle!
}

input WellLifecycleCreateInput {
  name: String!
}

input WellLifecycleCreateOneInput {
  create: WellLifecycleCreateInput
  connect: WellLifecycleWhereUniqueInput
}

"""An edge in a connection."""
type WellLifecycleEdge {
  """The item at the end of the edge."""
  node: WellLifecycle!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WellLifecycleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WellLifecyclePreviousValues {
  id: ID!
  name: String!
}

type WellLifecycleSubscriptionPayload {
  mutation: MutationType!
  node: WellLifecycle
  updatedFields: [String!]
  previousValues: WellLifecyclePreviousValues
}

input WellLifecycleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WellLifecycleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WellLifecycleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WellLifecycleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WellLifecycleWhereInput
}

input WellLifecycleUpdateDataInput {
  name: String
}

input WellLifecycleUpdateInput {
  name: String
}

input WellLifecycleUpdateOneInput {
  create: WellLifecycleCreateInput
  connect: WellLifecycleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WellLifecycleUpdateDataInput
  upsert: WellLifecycleUpsertNestedInput
}

input WellLifecycleUpsertNestedInput {
  update: WellLifecycleUpdateDataInput!
  create: WellLifecycleCreateInput!
}

input WellLifecycleWhereInput {
  """Logical AND on all given filters."""
  AND: [WellLifecycleWhereInput!]

  """Logical OR on all given filters."""
  OR: [WellLifecycleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WellLifecycleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  _MagicalBackRelation_EventToWellLifecycle_every: EventWhereInput
  _MagicalBackRelation_EventToWellLifecycle_some: EventWhereInput
  _MagicalBackRelation_EventToWellLifecycle_none: EventWhereInput
}

input WellLifecycleWhereUniqueInput {
  id: ID
}

enum WellOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  UWI_ASC
  UWI_DESC
  SPUD_DATE_ASC
  SPUD_DATE_DESC
  SURFACE_LATITUDE_ASC
  SURFACE_LATITUDE_DESC
  SURFACE_LONGITUDE_ASC
  SURFACE_LONGITUDE_DESC
  BOTTOM_HOLE_LATITUDE_ASC
  BOTTOM_HOLE_LATITUDE_DESC
  BOTTOM_HOLE_LONGITUDE_ASC
  BOTTOM_HOLE_LONGITUDE_DESC
  FINAL_DRILL_DATE_ASC
  FINAL_DRILL_DATE_DESC
  COMPLETION_DATE_ASC
  COMPLETION_DATE_DESC
  ABANDONMENT_DATE_ASC
  ABANDONMENT_DATE_DESC
  ENVIRONMENT_TYPE_ASC
  ENVIRONMENT_TYPE_DESC
  SURF_AREA_CODE_ASC
  SURF_AREA_CODE_DESC
  SURF_BLOCK_NUMBER_ASC
  SURF_BLOCK_NUMBER_DESC
  SURF_LEASE_NUMBER_ASC
  SURF_LEASE_NUMBER_DESC
  BOTM_AREA_CODE_ASC
  BOTM_AREA_CODE_DESC
  BOTM_BLOCK_NUMBER_ASC
  BOTM_BLOCK_NUMBER_DESC
  BOTM_LEASE_NUMBER_ASC
  BOTM_LEASE_NUMBER_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WellPreviousValues {
  id: ID!
  name: String!
  UWI: String
  SPUD_DATE: DateTime
  SURFACE_LATITUDE: String
  SURFACE_LONGITUDE: String
  BOTTOM_HOLE_LATITUDE: String
  BOTTOM_HOLE_LONGITUDE: String
  FINAL_DRILL_DATE: DateTime
  COMPLETION_DATE: DateTime
  ABANDONMENT_DATE: DateTime
  ENVIRONMENT_TYPE: String
  SURF_AREA_CODE: String
  SURF_BLOCK_NUMBER: String
  SURF_LEASE_NUMBER: String
  BOTM_AREA_CODE: String
  BOTM_BLOCK_NUMBER: String
  BOTM_LEASE_NUMBER: String
}

type WellSourceDetail implements Node {
  id: ID!
  name: String!
  source(where: R_SOURCEWhereInput): R_SOURCE
}

"""A connection to a list of items."""
type WellSourceDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WellSourceDetailEdge]!
  aggregate: AggregateWellSourceDetail!
}

input WellSourceDetailCreateInput {
  name: String!
  source: R_SOURCECreateOneInput
}

input WellSourceDetailCreateOneInput {
  create: WellSourceDetailCreateInput
  connect: WellSourceDetailWhereUniqueInput
}

"""An edge in a connection."""
type WellSourceDetailEdge {
  """The item at the end of the edge."""
  node: WellSourceDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WellSourceDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WellSourceDetailPreviousValues {
  id: ID!
  name: String!
}

type WellSourceDetailSubscriptionPayload {
  mutation: MutationType!
  node: WellSourceDetail
  updatedFields: [String!]
  previousValues: WellSourceDetailPreviousValues
}

input WellSourceDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WellSourceDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WellSourceDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WellSourceDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WellSourceDetailWhereInput
}

input WellSourceDetailUpdateDataInput {
  name: String
  source: R_SOURCEUpdateOneInput
}

input WellSourceDetailUpdateInput {
  name: String
  source: R_SOURCEUpdateOneInput
}

input WellSourceDetailUpdateOneInput {
  create: WellSourceDetailCreateInput
  connect: WellSourceDetailWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WellSourceDetailUpdateDataInput
  upsert: WellSourceDetailUpsertNestedInput
}

input WellSourceDetailUpsertNestedInput {
  update: WellSourceDetailUpdateDataInput!
  create: WellSourceDetailCreateInput!
}

input WellSourceDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [WellSourceDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [WellSourceDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WellSourceDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  source: R_SOURCEWhereInput
  _MagicalBackRelation_WellToWellSourceDetail_every: WellWhereInput
  _MagicalBackRelation_WellToWellSourceDetail_some: WellWhereInput
  _MagicalBackRelation_WellToWellSourceDetail_none: WellWhereInput
}

input WellSourceDetailWhereUniqueInput {
  id: ID
}

type WellSubscriptionPayload {
  mutation: MutationType!
  node: Well
  updatedFields: [String!]
  previousValues: WellPreviousValues
}

input WellSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WellSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WellSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WellSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WellWhereInput
}

input WellUpdateDataInput {
  name: String
  UWI: String
  SPUD_DATE: DateTime
  SURFACE_LATITUDE: String
  SURFACE_LONGITUDE: String
  BOTTOM_HOLE_LATITUDE: String
  BOTTOM_HOLE_LONGITUDE: String
  FINAL_DRILL_DATE: DateTime
  COMPLETION_DATE: DateTime
  ABANDONMENT_DATE: DateTime
  ENVIRONMENT_TYPE: String
  SURF_AREA_CODE: String
  SURF_BLOCK_NUMBER: String
  SURF_LEASE_NUMBER: String
  BOTM_AREA_CODE: String
  BOTM_BLOCK_NUMBER: String
  BOTM_LEASE_NUMBER: String
  WATER_DEPTH: PhysicalQuantityUpdateOneInput
  ASSIGNED_FIELD: FieldUpdateOneInput
  OPERATOR: OrganizationUpdateOneInput
  FINAL_TD: PhysicalQuantityUpdateOneInput
  source: R_SOURCEUpdateOneInput
  wellSourceDetail: WellSourceDetailUpdateOneInput
}

input WellUpdateInput {
  name: String
  UWI: String
  SPUD_DATE: DateTime
  SURFACE_LATITUDE: String
  SURFACE_LONGITUDE: String
  BOTTOM_HOLE_LATITUDE: String
  BOTTOM_HOLE_LONGITUDE: String
  FINAL_DRILL_DATE: DateTime
  COMPLETION_DATE: DateTime
  ABANDONMENT_DATE: DateTime
  ENVIRONMENT_TYPE: String
  SURF_AREA_CODE: String
  SURF_BLOCK_NUMBER: String
  SURF_LEASE_NUMBER: String
  BOTM_AREA_CODE: String
  BOTM_BLOCK_NUMBER: String
  BOTM_LEASE_NUMBER: String
  WATER_DEPTH: PhysicalQuantityUpdateOneInput
  ASSIGNED_FIELD: FieldUpdateOneInput
  OPERATOR: OrganizationUpdateOneInput
  FINAL_TD: PhysicalQuantityUpdateOneInput
  source: R_SOURCEUpdateOneInput
  wellSourceDetail: WellSourceDetailUpdateOneInput
}

input WellUpdateOneInput {
  create: WellCreateInput
  connect: WellWhereUniqueInput
  delete: Boolean
  update: WellUpdateDataInput
  upsert: WellUpsertNestedInput
}

input WellUpsertNestedInput {
  update: WellUpdateDataInput!
  create: WellCreateInput!
}

input WellWhereInput {
  """Logical AND on all given filters."""
  AND: [WellWhereInput!]

  """Logical OR on all given filters."""
  OR: [WellWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WellWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  UWI: String

  """All values that are not equal to given value."""
  UWI_not: String

  """All values that are contained in given list."""
  UWI_in: [String!]

  """All values that are not contained in given list."""
  UWI_not_in: [String!]

  """All values less than the given value."""
  UWI_lt: String

  """All values less than or equal the given value."""
  UWI_lte: String

  """All values greater than the given value."""
  UWI_gt: String

  """All values greater than or equal the given value."""
  UWI_gte: String

  """All values containing the given string."""
  UWI_contains: String

  """All values not containing the given string."""
  UWI_not_contains: String

  """All values starting with the given string."""
  UWI_starts_with: String

  """All values not starting with the given string."""
  UWI_not_starts_with: String

  """All values ending with the given string."""
  UWI_ends_with: String

  """All values not ending with the given string."""
  UWI_not_ends_with: String
  SPUD_DATE: DateTime

  """All values that are not equal to given value."""
  SPUD_DATE_not: DateTime

  """All values that are contained in given list."""
  SPUD_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  SPUD_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  SPUD_DATE_lt: DateTime

  """All values less than or equal the given value."""
  SPUD_DATE_lte: DateTime

  """All values greater than the given value."""
  SPUD_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  SPUD_DATE_gte: DateTime
  SURFACE_LATITUDE: String

  """All values that are not equal to given value."""
  SURFACE_LATITUDE_not: String

  """All values that are contained in given list."""
  SURFACE_LATITUDE_in: [String!]

  """All values that are not contained in given list."""
  SURFACE_LATITUDE_not_in: [String!]

  """All values less than the given value."""
  SURFACE_LATITUDE_lt: String

  """All values less than or equal the given value."""
  SURFACE_LATITUDE_lte: String

  """All values greater than the given value."""
  SURFACE_LATITUDE_gt: String

  """All values greater than or equal the given value."""
  SURFACE_LATITUDE_gte: String

  """All values containing the given string."""
  SURFACE_LATITUDE_contains: String

  """All values not containing the given string."""
  SURFACE_LATITUDE_not_contains: String

  """All values starting with the given string."""
  SURFACE_LATITUDE_starts_with: String

  """All values not starting with the given string."""
  SURFACE_LATITUDE_not_starts_with: String

  """All values ending with the given string."""
  SURFACE_LATITUDE_ends_with: String

  """All values not ending with the given string."""
  SURFACE_LATITUDE_not_ends_with: String
  SURFACE_LONGITUDE: String

  """All values that are not equal to given value."""
  SURFACE_LONGITUDE_not: String

  """All values that are contained in given list."""
  SURFACE_LONGITUDE_in: [String!]

  """All values that are not contained in given list."""
  SURFACE_LONGITUDE_not_in: [String!]

  """All values less than the given value."""
  SURFACE_LONGITUDE_lt: String

  """All values less than or equal the given value."""
  SURFACE_LONGITUDE_lte: String

  """All values greater than the given value."""
  SURFACE_LONGITUDE_gt: String

  """All values greater than or equal the given value."""
  SURFACE_LONGITUDE_gte: String

  """All values containing the given string."""
  SURFACE_LONGITUDE_contains: String

  """All values not containing the given string."""
  SURFACE_LONGITUDE_not_contains: String

  """All values starting with the given string."""
  SURFACE_LONGITUDE_starts_with: String

  """All values not starting with the given string."""
  SURFACE_LONGITUDE_not_starts_with: String

  """All values ending with the given string."""
  SURFACE_LONGITUDE_ends_with: String

  """All values not ending with the given string."""
  SURFACE_LONGITUDE_not_ends_with: String
  BOTTOM_HOLE_LATITUDE: String

  """All values that are not equal to given value."""
  BOTTOM_HOLE_LATITUDE_not: String

  """All values that are contained in given list."""
  BOTTOM_HOLE_LATITUDE_in: [String!]

  """All values that are not contained in given list."""
  BOTTOM_HOLE_LATITUDE_not_in: [String!]

  """All values less than the given value."""
  BOTTOM_HOLE_LATITUDE_lt: String

  """All values less than or equal the given value."""
  BOTTOM_HOLE_LATITUDE_lte: String

  """All values greater than the given value."""
  BOTTOM_HOLE_LATITUDE_gt: String

  """All values greater than or equal the given value."""
  BOTTOM_HOLE_LATITUDE_gte: String

  """All values containing the given string."""
  BOTTOM_HOLE_LATITUDE_contains: String

  """All values not containing the given string."""
  BOTTOM_HOLE_LATITUDE_not_contains: String

  """All values starting with the given string."""
  BOTTOM_HOLE_LATITUDE_starts_with: String

  """All values not starting with the given string."""
  BOTTOM_HOLE_LATITUDE_not_starts_with: String

  """All values ending with the given string."""
  BOTTOM_HOLE_LATITUDE_ends_with: String

  """All values not ending with the given string."""
  BOTTOM_HOLE_LATITUDE_not_ends_with: String
  BOTTOM_HOLE_LONGITUDE: String

  """All values that are not equal to given value."""
  BOTTOM_HOLE_LONGITUDE_not: String

  """All values that are contained in given list."""
  BOTTOM_HOLE_LONGITUDE_in: [String!]

  """All values that are not contained in given list."""
  BOTTOM_HOLE_LONGITUDE_not_in: [String!]

  """All values less than the given value."""
  BOTTOM_HOLE_LONGITUDE_lt: String

  """All values less than or equal the given value."""
  BOTTOM_HOLE_LONGITUDE_lte: String

  """All values greater than the given value."""
  BOTTOM_HOLE_LONGITUDE_gt: String

  """All values greater than or equal the given value."""
  BOTTOM_HOLE_LONGITUDE_gte: String

  """All values containing the given string."""
  BOTTOM_HOLE_LONGITUDE_contains: String

  """All values not containing the given string."""
  BOTTOM_HOLE_LONGITUDE_not_contains: String

  """All values starting with the given string."""
  BOTTOM_HOLE_LONGITUDE_starts_with: String

  """All values not starting with the given string."""
  BOTTOM_HOLE_LONGITUDE_not_starts_with: String

  """All values ending with the given string."""
  BOTTOM_HOLE_LONGITUDE_ends_with: String

  """All values not ending with the given string."""
  BOTTOM_HOLE_LONGITUDE_not_ends_with: String
  FINAL_DRILL_DATE: DateTime

  """All values that are not equal to given value."""
  FINAL_DRILL_DATE_not: DateTime

  """All values that are contained in given list."""
  FINAL_DRILL_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  FINAL_DRILL_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  FINAL_DRILL_DATE_lt: DateTime

  """All values less than or equal the given value."""
  FINAL_DRILL_DATE_lte: DateTime

  """All values greater than the given value."""
  FINAL_DRILL_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  FINAL_DRILL_DATE_gte: DateTime
  COMPLETION_DATE: DateTime

  """All values that are not equal to given value."""
  COMPLETION_DATE_not: DateTime

  """All values that are contained in given list."""
  COMPLETION_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  COMPLETION_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  COMPLETION_DATE_lt: DateTime

  """All values less than or equal the given value."""
  COMPLETION_DATE_lte: DateTime

  """All values greater than the given value."""
  COMPLETION_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  COMPLETION_DATE_gte: DateTime
  ABANDONMENT_DATE: DateTime

  """All values that are not equal to given value."""
  ABANDONMENT_DATE_not: DateTime

  """All values that are contained in given list."""
  ABANDONMENT_DATE_in: [DateTime!]

  """All values that are not contained in given list."""
  ABANDONMENT_DATE_not_in: [DateTime!]

  """All values less than the given value."""
  ABANDONMENT_DATE_lt: DateTime

  """All values less than or equal the given value."""
  ABANDONMENT_DATE_lte: DateTime

  """All values greater than the given value."""
  ABANDONMENT_DATE_gt: DateTime

  """All values greater than or equal the given value."""
  ABANDONMENT_DATE_gte: DateTime
  ENVIRONMENT_TYPE: String

  """All values that are not equal to given value."""
  ENVIRONMENT_TYPE_not: String

  """All values that are contained in given list."""
  ENVIRONMENT_TYPE_in: [String!]

  """All values that are not contained in given list."""
  ENVIRONMENT_TYPE_not_in: [String!]

  """All values less than the given value."""
  ENVIRONMENT_TYPE_lt: String

  """All values less than or equal the given value."""
  ENVIRONMENT_TYPE_lte: String

  """All values greater than the given value."""
  ENVIRONMENT_TYPE_gt: String

  """All values greater than or equal the given value."""
  ENVIRONMENT_TYPE_gte: String

  """All values containing the given string."""
  ENVIRONMENT_TYPE_contains: String

  """All values not containing the given string."""
  ENVIRONMENT_TYPE_not_contains: String

  """All values starting with the given string."""
  ENVIRONMENT_TYPE_starts_with: String

  """All values not starting with the given string."""
  ENVIRONMENT_TYPE_not_starts_with: String

  """All values ending with the given string."""
  ENVIRONMENT_TYPE_ends_with: String

  """All values not ending with the given string."""
  ENVIRONMENT_TYPE_not_ends_with: String
  SURF_AREA_CODE: String

  """All values that are not equal to given value."""
  SURF_AREA_CODE_not: String

  """All values that are contained in given list."""
  SURF_AREA_CODE_in: [String!]

  """All values that are not contained in given list."""
  SURF_AREA_CODE_not_in: [String!]

  """All values less than the given value."""
  SURF_AREA_CODE_lt: String

  """All values less than or equal the given value."""
  SURF_AREA_CODE_lte: String

  """All values greater than the given value."""
  SURF_AREA_CODE_gt: String

  """All values greater than or equal the given value."""
  SURF_AREA_CODE_gte: String

  """All values containing the given string."""
  SURF_AREA_CODE_contains: String

  """All values not containing the given string."""
  SURF_AREA_CODE_not_contains: String

  """All values starting with the given string."""
  SURF_AREA_CODE_starts_with: String

  """All values not starting with the given string."""
  SURF_AREA_CODE_not_starts_with: String

  """All values ending with the given string."""
  SURF_AREA_CODE_ends_with: String

  """All values not ending with the given string."""
  SURF_AREA_CODE_not_ends_with: String
  SURF_BLOCK_NUMBER: String

  """All values that are not equal to given value."""
  SURF_BLOCK_NUMBER_not: String

  """All values that are contained in given list."""
  SURF_BLOCK_NUMBER_in: [String!]

  """All values that are not contained in given list."""
  SURF_BLOCK_NUMBER_not_in: [String!]

  """All values less than the given value."""
  SURF_BLOCK_NUMBER_lt: String

  """All values less than or equal the given value."""
  SURF_BLOCK_NUMBER_lte: String

  """All values greater than the given value."""
  SURF_BLOCK_NUMBER_gt: String

  """All values greater than or equal the given value."""
  SURF_BLOCK_NUMBER_gte: String

  """All values containing the given string."""
  SURF_BLOCK_NUMBER_contains: String

  """All values not containing the given string."""
  SURF_BLOCK_NUMBER_not_contains: String

  """All values starting with the given string."""
  SURF_BLOCK_NUMBER_starts_with: String

  """All values not starting with the given string."""
  SURF_BLOCK_NUMBER_not_starts_with: String

  """All values ending with the given string."""
  SURF_BLOCK_NUMBER_ends_with: String

  """All values not ending with the given string."""
  SURF_BLOCK_NUMBER_not_ends_with: String
  SURF_LEASE_NUMBER: String

  """All values that are not equal to given value."""
  SURF_LEASE_NUMBER_not: String

  """All values that are contained in given list."""
  SURF_LEASE_NUMBER_in: [String!]

  """All values that are not contained in given list."""
  SURF_LEASE_NUMBER_not_in: [String!]

  """All values less than the given value."""
  SURF_LEASE_NUMBER_lt: String

  """All values less than or equal the given value."""
  SURF_LEASE_NUMBER_lte: String

  """All values greater than the given value."""
  SURF_LEASE_NUMBER_gt: String

  """All values greater than or equal the given value."""
  SURF_LEASE_NUMBER_gte: String

  """All values containing the given string."""
  SURF_LEASE_NUMBER_contains: String

  """All values not containing the given string."""
  SURF_LEASE_NUMBER_not_contains: String

  """All values starting with the given string."""
  SURF_LEASE_NUMBER_starts_with: String

  """All values not starting with the given string."""
  SURF_LEASE_NUMBER_not_starts_with: String

  """All values ending with the given string."""
  SURF_LEASE_NUMBER_ends_with: String

  """All values not ending with the given string."""
  SURF_LEASE_NUMBER_not_ends_with: String
  BOTM_AREA_CODE: String

  """All values that are not equal to given value."""
  BOTM_AREA_CODE_not: String

  """All values that are contained in given list."""
  BOTM_AREA_CODE_in: [String!]

  """All values that are not contained in given list."""
  BOTM_AREA_CODE_not_in: [String!]

  """All values less than the given value."""
  BOTM_AREA_CODE_lt: String

  """All values less than or equal the given value."""
  BOTM_AREA_CODE_lte: String

  """All values greater than the given value."""
  BOTM_AREA_CODE_gt: String

  """All values greater than or equal the given value."""
  BOTM_AREA_CODE_gte: String

  """All values containing the given string."""
  BOTM_AREA_CODE_contains: String

  """All values not containing the given string."""
  BOTM_AREA_CODE_not_contains: String

  """All values starting with the given string."""
  BOTM_AREA_CODE_starts_with: String

  """All values not starting with the given string."""
  BOTM_AREA_CODE_not_starts_with: String

  """All values ending with the given string."""
  BOTM_AREA_CODE_ends_with: String

  """All values not ending with the given string."""
  BOTM_AREA_CODE_not_ends_with: String
  BOTM_BLOCK_NUMBER: String

  """All values that are not equal to given value."""
  BOTM_BLOCK_NUMBER_not: String

  """All values that are contained in given list."""
  BOTM_BLOCK_NUMBER_in: [String!]

  """All values that are not contained in given list."""
  BOTM_BLOCK_NUMBER_not_in: [String!]

  """All values less than the given value."""
  BOTM_BLOCK_NUMBER_lt: String

  """All values less than or equal the given value."""
  BOTM_BLOCK_NUMBER_lte: String

  """All values greater than the given value."""
  BOTM_BLOCK_NUMBER_gt: String

  """All values greater than or equal the given value."""
  BOTM_BLOCK_NUMBER_gte: String

  """All values containing the given string."""
  BOTM_BLOCK_NUMBER_contains: String

  """All values not containing the given string."""
  BOTM_BLOCK_NUMBER_not_contains: String

  """All values starting with the given string."""
  BOTM_BLOCK_NUMBER_starts_with: String

  """All values not starting with the given string."""
  BOTM_BLOCK_NUMBER_not_starts_with: String

  """All values ending with the given string."""
  BOTM_BLOCK_NUMBER_ends_with: String

  """All values not ending with the given string."""
  BOTM_BLOCK_NUMBER_not_ends_with: String
  BOTM_LEASE_NUMBER: String

  """All values that are not equal to given value."""
  BOTM_LEASE_NUMBER_not: String

  """All values that are contained in given list."""
  BOTM_LEASE_NUMBER_in: [String!]

  """All values that are not contained in given list."""
  BOTM_LEASE_NUMBER_not_in: [String!]

  """All values less than the given value."""
  BOTM_LEASE_NUMBER_lt: String

  """All values less than or equal the given value."""
  BOTM_LEASE_NUMBER_lte: String

  """All values greater than the given value."""
  BOTM_LEASE_NUMBER_gt: String

  """All values greater than or equal the given value."""
  BOTM_LEASE_NUMBER_gte: String

  """All values containing the given string."""
  BOTM_LEASE_NUMBER_contains: String

  """All values not containing the given string."""
  BOTM_LEASE_NUMBER_not_contains: String

  """All values starting with the given string."""
  BOTM_LEASE_NUMBER_starts_with: String

  """All values not starting with the given string."""
  BOTM_LEASE_NUMBER_not_starts_with: String

  """All values ending with the given string."""
  BOTM_LEASE_NUMBER_ends_with: String

  """All values not ending with the given string."""
  BOTM_LEASE_NUMBER_not_ends_with: String
  WATER_DEPTH: PhysicalQuantityWhereInput
  ASSIGNED_FIELD: FieldWhereInput
  OPERATOR: OrganizationWhereInput
  FINAL_TD: PhysicalQuantityWhereInput
  source: R_SOURCEWhereInput
  wellSourceDetail: WellSourceDetailWhereInput
  _MagicalBackRelation_EventToWell_every: EventWhereInput
  _MagicalBackRelation_EventToWell_some: EventWhereInput
  _MagicalBackRelation_EventToWell_none: EventWhereInput
}

input WellWhereUniqueInput {
  id: ID
}
