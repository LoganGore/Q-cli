# source: http://h4dev.knowledge.maana.io:8003/service/cli.test09/graphql
# timestamp: Tue Aug 07 2018 05:06:12 GMT-0700 (PDT)

input AddBotActionInput {
  name: String
  serviceName: String!
  serviceId: ID
  eventName: String
  mutationName: String
  queryName: String
  inputInstanceRef: InstanceRefInput
  outputInstanceRef: InstanceRefInput
}

"""Autogenerated input for adding instance of Directive"""
input AddDirectiveInput {
  """id"""
  id: ID
  name: String
  description: String
  locations: [String]
  args: [ID]
}

"""Autogenerated input for adding instance of EnumValue"""
input AddEnumValueInput {
  """id"""
  id: ID
  name: String
  description: String
  isDeprecated: Boolean
  deprecationReason: String
}

"""Autogenerated input for adding instance of Field"""
input AddFieldInput {
  """id"""
  id: ID
  name: String
  description: String
  args: [ID]
  type: ID
  isDeprecated: Boolean
  deprecationReason: String
}

"""Autogenerated input for adding instance of InputValue"""
input AddInputValueInput {
  """id"""
  id: ID
  name: String
  description: String
  type: ID
  defaultValue: String
}

"""Autogenerated input for adding instance of Schema"""
input AddSchemaInput {
  """id"""
  id: ID
  types: [ID]
  queryType: ID
  mutationType: ID
  subscriptionType: ID
  directives: [ID]
}

"""Autogenerated input for adding instance of Type"""
input AddTypeInput {
  """id"""
  id: ID
  kind: String
  name: String
  description: String
  fields: [ID]
  interfaces: [ID]
  possibleTypes: [ID]
  enumValues: [ID]
  inputFields: [ID]
  ofType: ID
}

enum AggregateOp {
  MIN
  MAX
  SUM
  COUNT
}

type BotAction {
  """io.maana.kind"""
  id: ID!
  name: String!

  """bookkeeping"""
  created: DateTime!
  lastUpdated: DateTime!
  status: BotActionStatus!
  progress: Float
  errors: [JSON!]

  """operation"""
  service: Service!
  eventName: String
  mutation: ServiceMutation
  query: ServiceQuery
  input: InstanceRef
  output: InstanceRef
}

type BotActionAddedEvent {
  id: ID!
  name: String!
  serviceName: String!
  serviceId: ID
  eventName: String
  mutationName: String
  queryName: String
  inputInstanceRef: InstanceRef
  outputInstanceRef: InstanceRef
}

enum BotActionStatus {
  PENDING
  IN_PROGRESS
  STOPPING
  STOPPED
  ERROR
  COMPLETE
}

type BotActionUpdatedEvent {
  id: ID!
  oldStatus: BotActionStatus!
  newStatus: BotActionStatus!
  progress: Float
  errors: [JSON!]
}

scalar Date

scalar DATE

scalar DateTime

scalar DATETIME

type Directive {
  """id"""
  id: ID!
  name: String!
  description: String
  locations: [String!]
  args: [InputValue!]
}

type EnumValue {
  """id"""
  id: ID!
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

type Field {
  """id"""
  id: ID!
  name: String!
  description: String
  args: [InputValue!]
  type: Type!
  isDeprecated: Boolean!
  deprecationReason: String
}

type FieldClassification {
  id: ID!
  fieldId: ID!
  name: String!
  score: Float!
}

input FieldFilterInput {
  fieldId: ID
  fieldName: String
  op: String!
  value: FieldValueInput!
}

enum FieldModifiers {
  NONULL
  LIST
  NOIDX
}

input FieldProjectionInput {
  """
  one of the following is required - except in the case of count queries
  """
  fieldId: ID
  fieldName: String

  """optional if omitted outer query is used"""
  alias: String
  op: AggregateOp
}

enum FieldType {
  ID
  STRING
  INT
  FLOAT
  BOOLEAN
  DATE
  TIME
  DATETIME
  JSON
  KIND
}

type FieldValue {
  """Types"""
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  """List forms"""
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

input FieldValueInput {
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: DATE
  TIME: TIME
  DATETIME: DATETIME
  JSON: JSON
  KIND: ID
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [DATE]
  l_TIME: [TIME]
  l_DATETIME: [DATETIME]
  l_JSON: [JSON]
  l_KIND: [ID]
}

type Info {
  id: ID!
  name: String!
  description: String
}

type InputValue {
  """id"""
  id: ID!
  name: String!
  description: String
  type: Type!
  defaultValue: String
}

type Instance {
  """required"""
  id: ID!

  """optional"""
  name: String
  kindId: ID!
  kind: Kind
  fieldIds: [ID]

  """rowKey: Int"""
  fieldValues: [FieldValue]

  """inferred"""
  linksFrom: [Link]
  linksTo: [Link]
}

type InstanceRef {
  """required"""
  id: ID!

  """- one of:"""
  kindId: ID
  kindName: String

  """optional"""
  name: String
  url: String

  """inferred"""
  kind: Kind
  instance: Instance
  innerKind: Kind
}

input InstanceRefInput {
  id: ID
  name: String
  kindId: ID
  kindName: String
  url: String
}

type InstanceSet {
  kindId: ID!
  kind: Kind!

  """Continuation token"""
  token: String
  fieldIds: [ID]

  """rowKeys: [Int]"""
  records: [[FieldValue]]
}

scalar JSON

type Kind {
  """required"""
  id: ID!
  name: String!

  """optional"""
  serviceId: ID
  description: String
  thumbnailUrl: String
  isPublic: Boolean
  isManaged: Boolean
  isSystem: Boolean
  schema(includeDeleted: Boolean = false, fieldIds: [ID!], fieldNames: [String!], fieldKinds: [ID!]): [Field]
  nameField: ID

  """inferred"""
  relationsFrom: [Relation]
  relationsTo: [Relation]
  linksFrom: [Link]
  linksTo: [Link]
  service: Service
}

input KindQueryInput {
  """projected kind (one of the following is required)"""
  kindId: ID
  kindName: String
  serviceId: ID

  """optional alias for projection binding"""
  alias: String

  """projected fields"""
  projection: [FieldProjectionInput]

  """distinct Projected result"""
  distinct: Boolean

  """filters (where)"""
  fieldFilters: [FieldFilterInput]

  """conjunction (where)"""
  and: [KindQueryInput]

  """disjunction (where)"""
  or: [KindQueryInput]

  """join (if conjunction or disjunction)"""
  fromFieldId: ID
  fromFieldName: String
  toFieldId: ID
  toFieldName: String
  take: Int
  token: String
}

type Link {
  """required"""
  id: ID!
  relation: Relation!

  """Optional to work around the case when either kind is deleted"""
  fromKind: Kind
  toKind: Kind

  """optional"""
  name: String
  weight: Float
  fromField: Field
  fromInstance: Instance
  fromOffset: String
  fromSpan: String
  toField: Field
  toInstance: Instance
  toOffset: String
  toSpan: String
}

type Mutation {
  """Autogenerated mutation for adding single instance of Schema"""
  addSchema(input: AddSchemaInput!): ID

  """Autogenerated mutation for adding multiple instances of Schema"""
  addSchemas(input: [AddSchemaInput]!): [ID]

  """Autogenerated mutation for updating single instance of Schema"""
  updateSchema(input: UpdateSchemaInput!): ID

  """Autogenerated mutation for updating multiple instance of Schema"""
  updateSchemas(input: [UpdateSchemaInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Schema"""
  deleteSchema(id: ID!): Schema

  """Autogenerated mutation for deleting multiple instance of Schema"""
  deleteSchemas(ids: [ID!]): [Schema]

  """Autogenerated mutation for adding single instance of Type"""
  addType(input: AddTypeInput!): ID

  """Autogenerated mutation for adding multiple instances of Type"""
  addTypes(input: [AddTypeInput]!): [ID]

  """Autogenerated mutation for updating single instance of Type"""
  updateType(input: UpdateTypeInput!): ID

  """Autogenerated mutation for updating multiple instance of Type"""
  updateTypes(input: [UpdateTypeInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Type"""
  deleteType(id: ID!): Type

  """Autogenerated mutation for deleting multiple instance of Type"""
  deleteTypes(ids: [ID!]): [Type]

  """Autogenerated mutation for adding single instance of Field"""
  addField(input: AddFieldInput!): ID

  """Autogenerated mutation for adding multiple instances of Field"""
  addFields(input: [AddFieldInput]!): [ID]

  """Autogenerated mutation for updating single instance of Field"""
  updateField(input: UpdateFieldInput!): ID

  """Autogenerated mutation for updating multiple instance of Field"""
  updateFields(input: [UpdateFieldInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Field"""
  deleteField(id: ID!): Field

  """Autogenerated mutation for deleting multiple instance of Field"""
  deleteFields(ids: [ID!]): [Field]

  """Autogenerated mutation for adding single instance of InputValue"""
  addInputValue(input: AddInputValueInput!): ID

  """Autogenerated mutation for adding multiple instances of InputValue"""
  addInputValues(input: [AddInputValueInput]!): [ID]

  """Autogenerated mutation for updating single instance of InputValue"""
  updateInputValue(input: UpdateInputValueInput!): ID

  """Autogenerated mutation for updating multiple instance of InputValue"""
  updateInputValues(input: [UpdateInputValueInput]!): [ID]

  """Autogenerated mutation for deleting single instance of InputValue"""
  deleteInputValue(id: ID!): InputValue

  """Autogenerated mutation for deleting multiple instance of InputValue"""
  deleteInputValues(ids: [ID!]): [InputValue]

  """Autogenerated mutation for adding single instance of EnumValue"""
  addEnumValue(input: AddEnumValueInput!): ID

  """Autogenerated mutation for adding multiple instances of EnumValue"""
  addEnumValues(input: [AddEnumValueInput]!): [ID]

  """Autogenerated mutation for updating single instance of EnumValue"""
  updateEnumValue(input: UpdateEnumValueInput!): ID

  """Autogenerated mutation for updating multiple instance of EnumValue"""
  updateEnumValues(input: [UpdateEnumValueInput]!): [ID]

  """Autogenerated mutation for deleting single instance of EnumValue"""
  deleteEnumValue(id: ID!): EnumValue

  """Autogenerated mutation for deleting multiple instance of EnumValue"""
  deleteEnumValues(ids: [ID!]): [EnumValue]

  """Autogenerated mutation for adding single instance of Directive"""
  addDirective(input: AddDirectiveInput!): ID

  """Autogenerated mutation for adding multiple instances of Directive"""
  addDirectives(input: [AddDirectiveInput]!): [ID]

  """Autogenerated mutation for updating single instance of Directive"""
  updateDirective(input: UpdateDirectiveInput!): ID

  """Autogenerated mutation for updating multiple instance of Directive"""
  updateDirectives(input: [UpdateDirectiveInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Directive"""
  deleteDirective(id: ID!): Directive

  """Autogenerated mutation for deleting multiple instance of Directive"""
  deleteDirectives(ids: [ID!]): [Directive]
  addBotAction(input: AddBotActionInput!): ID
  runBotAction(id: ID!): BotActionStatus
  stopBotAction(id: ID!): BotActionStatus
  updateBotAction(input: UpdateBotActionInput!): BotActionStatus
}

type Query {
  """All instances of Schema kind"""
  allSchemas(take: Int = 1000): [Schema]

  """Get single instance of Schema kind by ID"""
  schema(id: ID!): Schema

  """Get list of instance of Schema kind by IDs"""
  schemas(ids: [ID]!): [Schema]

  """Get instances of Schema kind based on one or more field filters"""
  schemaFilter(filters: [FieldFilterInput]!, take: Int = 1000): [Schema]

  """All instances of Type kind"""
  allTypes(take: Int = 1000): [Type]

  """Get single instance of Type kind by ID"""
  type(id: ID!): Type

  """Get list of instance of Type kind by IDs"""
  types(ids: [ID]!): [Type]

  """Get instances of Type kind based on one or more field filters"""
  typeFilter(filters: [FieldFilterInput]!, take: Int = 1000): [Type]

  """All instances of Field kind"""
  allFields(take: Int = 1000): [Field]

  """Get single instance of Field kind by ID"""
  field(id: ID!): Field

  """Get list of instance of Field kind by IDs"""
  fields(ids: [ID]!): [Field]

  """Get instances of Field kind based on one or more field filters"""
  fieldFilter(filters: [FieldFilterInput]!, take: Int = 1000): [Field]

  """All instances of InputValue kind"""
  allInputValues(take: Int = 1000): [InputValue]

  """Get single instance of InputValue kind by ID"""
  inputValue(id: ID!): InputValue

  """Get list of instance of InputValue kind by IDs"""
  inputValues(ids: [ID]!): [InputValue]

  """Get instances of InputValue kind based on one or more field filters"""
  inputValueFilter(filters: [FieldFilterInput]!, take: Int = 1000): [InputValue]

  """All instances of EnumValue kind"""
  allEnumValues(take: Int = 1000): [EnumValue]

  """Get single instance of EnumValue kind by ID"""
  enumValue(id: ID!): EnumValue

  """Get list of instance of EnumValue kind by IDs"""
  enumValues(ids: [ID]!): [EnumValue]

  """Get instances of EnumValue kind based on one or more field filters"""
  enumValueFilter(filters: [FieldFilterInput]!, take: Int = 1000): [EnumValue]

  """All instances of Directive kind"""
  allDirectives(take: Int = 1000): [Directive]

  """Get single instance of Directive kind by ID"""
  directive(id: ID!): Directive

  """Get list of instance of Directive kind by IDs"""
  directives(ids: [ID]!): [Directive]

  """Get instances of Directive kind based on one or more field filters"""
  directiveFilter(filters: [FieldFilterInput]!, take: Int = 1000): [Directive]
  info: Info!
  botAction(id: ID!): BotAction
  botActions(ids: [ID!]!): [BotAction]
  allBotActions: [BotAction]

  """
  Returns kind by ID, regardless of whether kind is used by the service or not.
  Can only be used to find kind in a tenant of a service.
  OR
  Returns kind by name. If serviceId is omitted, will return kind of a current service/workspace,
  otherwise can be used to find a kind with specific name of a specific service (e.g. kind 'Workspace' of Portal Service)
  """
  kind(id: ID, name: String, serviceId: ID): Kind

  """
  Returns all kinds defined *in this service* (sic!).
  This includes managed kinds and kinds used by workspace/service
  """
  allKinds(take: Int): [Kind]

  """Kind Query"""
  query(input: KindQueryInput!): InstanceSet
  queryJSON(input: KindQueryInput!): JSON
}

type Relation {
  """required"""
  id: ID!
  name: String!

  """optional"""
  description: String
  undirected: Boolean
  weight: Float

  """inferred"""
  links: [Link]
}

type Schema {
  """id"""
  id: ID!
  types: [Type!]
  queryType: Type!
  mutationType: Type
  subscriptionType: Type
  directives: [Directive!]
}

type Service {
  """required"""
  id: ID!
  name: String!
  isSystem: Boolean!
  endpointUrl: String!

  """optional"""
  description: String
  subscriptionEndpointUrl: String
  thumbnailUrl: String
  tags: [String]
  status: Int
  lastChecked: Date
  instances: [ServiceInstance]
  isReadOnly: Boolean

  """inferred"""
  kinds: [Kind]
  queries: [ServiceQuery]
  mutations: [ServiceMutation]
  subscriptions: [ServiceSubscription]
}

type ServiceInstance {
  """required"""
  id: ID!
  dockerServiceName: String!
  hostName: String!
  desiredState: String!
  currentState: String!
}

type ServiceMutation {
  id: ID!
  name: String!
}

type ServiceQuery {
  id: ID!
  name: String!
}

type ServiceSubscription {
  id: ID!
  name: String!
}

type Subscription {
  botActionAdded: BotActionAddedEvent!
  botActionUpdated: BotActionUpdatedEvent!
}

scalar Time

scalar TIME

type Type {
  """id"""
  id: ID!
  kind: String!
  name: String
  description: String
  fields: [Field]
  interfaces: [Type]
  possibleTypes: [Type]
  enumValues: [EnumValue]
  inputFields: [InputValue]
  ofType: Type
}

input UpdateBotActionInput {
  status: BotActionStatus!
  progress: Float
  error: JSON
}

"""Autogenerated input for updating instance of Directive"""
input UpdateDirectiveInput {
  """id"""
  id: ID!
  name: String!
  description: String
  locations: [String!]
  args: [ID!]
}

"""Autogenerated input for updating instance of EnumValue"""
input UpdateEnumValueInput {
  """id"""
  id: ID!
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""Autogenerated input for updating instance of Field"""
input UpdateFieldInput {
  """id"""
  id: ID!
  name: String!
  description: String
  args: [ID!]
  type: ID!
  isDeprecated: Boolean!
  deprecationReason: String
}

"""Autogenerated input for updating instance of InputValue"""
input UpdateInputValueInput {
  """id"""
  id: ID!
  name: String!
  description: String
  type: ID!
  defaultValue: String
}

"""Autogenerated input for updating instance of Schema"""
input UpdateSchemaInput {
  """id"""
  id: ID!
  types: [ID!]
  queryType: ID!
  mutationType: ID
  subscriptionType: ID
  directives: [ID!]
}

"""Autogenerated input for updating instance of Type"""
input UpdateTypeInput {
  """id"""
  id: ID!
  kind: String!
  name: String
  description: String
  fields: [ID]
  interfaces: [ID]
  possibleTypes: [ID]
  enumValues: [ID]
  inputFields: [ID]
  ofType: ID
}
