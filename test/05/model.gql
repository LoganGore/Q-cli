scalar DateTime
scalar Date

# Event is the 'top-level' Kind, from which all others can be traversed
type Event {
  # A unique ID
  id: ID!
  # This is the name of the Event, ideally shown in the title of the event when visualized
  name: String!
  # Where the data came from, for example there might be different types of sources likeOpenWells Shell data, public BOEM data, etc.
  source: R_SOURCE!
  # This is the well that the event belongs to, this should be an API number if possible
  well: Well!
  # This is the rig being used when the event occurred. ---- For Shell PoC, on the DW_NPT table this is 'Rig', and on the Activity tables this is 'Rig'
  rig: Rig
  # This is a summary of the event, if showing the timeline this should be under the name of the event. ---- For Shell PoC, this is 'Description' on all tables
  summary: String
  # When the event started ---- For Shell PoC, on the NPT tables it is 'Start date/time', format MM/DD/YYYY HH:MM:SS; on the Activity tables it is 'Start', format MM/DD/YYYY HH:MM:SS
  start: DateTime
  # When the event ended ---- For Shell PoC, on the NPT tables it is 'End date/time', format MM/DD/YYYY HH:MM:SS; on the Activity tables it is 'End', format MM/DD/YYYY HH:MM:SS
  end: DateTime
  # What depth the event occured at, measured depth. ---- For Shell PoC, on the Activity tables it is 'Depth (m)' and on the NPT tables it is 'Failure MD (m)'
  depthMD: PhysicalQuantity
  # What Total Vertical Depth the event the event occured at ---- For Shell PoC, this data is not provided in a structured format but may be found in comments
  depthTVD: PhysicalQuantity
  # A measure from 1 - 100 describing the importance, calculated as per business rules.
  importance: Int
  # Part of well lifecycle in which this event occurred. ---- For Shell PoC, this is always 'Drilling'
  lifecycle: WellLifecycle
  # Code identifier for the event. For example, 'HSSE', 'DRO'. ---- For Shell PoC, this is the 'Event code' column in all tables and is always 'DRO'
  code: String
  # Subcode identfier for the event. For example, if the 'code' was 'HSSE' then the subcode could be 'MTG' for 'meeting'. ---- For Shell PoC, on the Activity tables it is 'Operation' column and on the NPT tables it is 'Cause' column
  subcode: String
  # ID of the Observation Kind instance for the given Event
  observation: Observation
  # ID of the Problem Kind instance for the given Event
  problem: Problem
  # ID of the Activity Kind instance for the given Event
  activity: Activity
  # ID of the Documentation Kind instance for the given Event ---- For Shell PoC these types is not provided
  documentation: Documentation
  # One or more ID of the derived events from this event
  events: [Event]
  # The ID of the reporter
  reporter: ID
  # The type of  reporter
  reporterDefinition: EventReporterDefinition
}

type Person {
  id: ID!
  # Name of a person
  name: String!
  # Phone number for the person
  phone: String
}

type EventReporterDefinition {
  id: ID!
  name: String!
  # Name of the detail kind, e.g. 'Person', that corresponds to the name of the EventReporterDefinition.
  detailKindName: [String]
  # URL for additional, external information
  externalReference: String
}

# Well has many fields from PPDM
type Well {
  # A unique ID, same as UWI ---- For Shell PoC, this is the 'Well' column on all tables
  id: ID!
  # Well name ---- For Shell PoC, this is the 'Well' column on all tables
  name: String!
  # Unique Well Identifier ---- For Shell PoC this is not provided
  UWI: String
  # Spud date of well ---- For Shell PoC, this is the 'Spud' column on all tables, format MM/DD/YYYY HH:MM:SS
  SPUD_DATE: DateTime
  # Latitude of well ---- For Shell PoC this is not provided
  SURFACE_LATITUDE: String
  # Longitude of well ---- For Shell PoC this is not provided
  SURFACE_LONGITUDE: String
  # From PPDM: BOTTOM HOLE LATITUDE: Latitude of bottom hole point projected to surface. For straight wells this would be exactly the same as surface latitude or null (denormalized form well_node).
  BOTTOM_HOLE_LATITUDE: String
  # From PPDMN: BOTTOM HOLE LONGITUDE: Longitude of bottom hole point projected to surface. For straight wells this would be exactly the same as surface longitude or null (denormalized form well_node).
  BOTTOM_HOLE_LONGITUDE: String
  # Water depth of well ---- For Shell PoC this is not provided
  WATER_DEPTH: PhysicalQuantity
  # Field where the well is located ---- For Shell PoC this is not provided
  ASSIGNED_FIELD: Field
  # Organization that operates the well ---- For Shell PoC, this will always point to "Royal Dutch Shell"
  OPERATOR: Organization
  # Final total depth of the well ---- For Shell PoC this is not provided
  FINAL_TD: PhysicalQuantity
  # Format MM/DD/YYYY ---- For Shell PoC this is not provided
  FINAL_DRILL_DATE: Date
  # From PPDM: 'COMPLETION DATE: Date on the official filing or completion report indicating the well is established as ready to produce, inject or abandon.' ---- For Shell PoC this is not provided
  COMPLETION_DATE: Date
  # From PPDM: 'ABANDONMENT DATE: Date the well was plugged and permanently abandoned.'
  ABANDONMENT_DATE: Date
  # From PPDM: 'ENVIRONMENT: the type of environment that the well is in, such as land, marine, transition zone etc.' ---- For Shell PoC, on NPT tables this is 'Environment' and on Activity tables this is 'Well Environment'.
  ENVIRONMENT_TYPE: String
  # Source of the well data ---- For Shell PoC, this will always point to "OpenWells Shell"
  source: R_SOURCE
  # ID of the WellSourceDetails Kind instance for the given well ---- For Shell PoC, this Kind has information from the Activity tables such as 'project' and 'site'
  wellSourceDetail: WellSourceDetail
}


# WellSourceDetails is primarily for storage of source-proprietary information
type WellSourceDetail {
  id: ID!
  name: String!
  # Source of the details ---- For Shell PoC, this will always point to "OpenWells Shell"
  source: R_SOURCE
  # For Shell PoC, on Activity tables this is the 'Project' column
  project: String
  # For Shell PoC, on Activity tables this is the 'Site' column
  site: String
  # For Shell PoC, on DW_Activity table this is the 'WDT' column
  wdt: String
  # For Shell PoC, on DW_Activity table this is the 'LoB' column
  lob: String
  # For Shell PoC, this is the business unit that the data belonge to; there are two tabs on the excel file that specify which business unit
  bu: String
}

type WellLifecycle {
  id: ID!
  # Portion of the well lifecycle, e.g. 'Drilling', 'Production'
  name: String!
}

type Rig {
  id: ID!
  # Rig name ---- For Shell PoC, this is the 'Rig' column in DW_NPT table
  name: String!
  # Rig type, e.g. 'Drillship'
  type: String
  # Organization that operates the well ---- For Shell PoC, this will always point to "Royal Dutch Shell"
  owner: Organization
  # Rig water depth ---- For Shell PoC this is not provided
  ratedWaterDepth: PhysicalQuantity
  # URL for additional, external information
  externalReference: String
}

# R_SOURCE comes primarily from PPDM
type R_SOURCE {
  id: ID!
  # Source name ---- For Shell PoC, this is always 'OpenWells Shell'
  name: String!
  # Source name abbreviation ---- For Shell PoC, this is always "OW"
  ABBREVIATION: String
  # Note(s) about the source
  remark: String
  # Expiration date of the source, e.g. when the data should be deprecated, deleted, etc.
  EXPIRY_DATE: Date
}

type Organization {
  id: ID!
  # Organization name ---- For Shell PoC, this is always "Royal Dutch Shell"
  name: String
}

type Field {
  id: ID!
  # Field name ---- For Shell PoC this is not provided
  name: String!
  DISCOVERY_DATE: Date
  FIELD_ABBREVIATION: String
}

# Derived from a Maana service, PhysicalQuantity is a quantifiable observation of a physical phenomenon (aka a measurement); each physical quantity has a magnitude, representing the value of the measurement, and a unit of measure that identifies a reference scale for comparing that value with other observations.
type PhysicalQuantity{
  id: ID!
  name: String!
  # A quantity
  magnitude: Float!
  # The quantity's unit of measure, e.g. 'm' (for 'meter'), 'psi' (for 'pounds per square inch')
  unitOfMeasure: String!
}

type Problem {
  # A unique ID
  id: ID!
  # This is the name of the problem -- For Shell PoC on the NPT tables 'Title'
  name: String!
  # This is the length of the problem measured in hours. ---- For Shell PoC on the NPT tables 'Net Time (hr)'
  duration: PhysicalQuantity
  # This is the organization responsible for the problem  ---- For Shell PoC this is not provided
  responsibleOrganization: Organization
  # ID of the ProblemDefinition Kind instance for the given problem
  definition: ProblemDefinition
  # ID of an individual Problem Detail instance.  Requires a 'two-pass' query: once the Problem Definition is known, e.g. Lost Circulation, then this ID would logically point to the LostCirculationProblemDetail Kind.
  detailInstance: ID
  # This is the severity of the problem. This is could be calculated based on a business rule.  ---- For Shell PoC this is not provided
  severity: Int
  # ID of one or more Observation Kind IDs that may describe the problem
  observations: [Observation]
  # ID of equipment ---- For Shell PoC, the Equipment Kind has a field 'codes' that will reference one or more codes from the NPT tables 'Failure type' column
  affectedEquipment: Equipment
  # One or more causes of the problem ---- For Shell PoC, comes from the NPT tables 'Cause' column, which has codes. Codes will need definition from Shell.
  causes: [Cause]
  # Specific to Shell PoC, from NPT tables 'NPT Level' column
  nptLevel: Int
  # Allows for traversal to other, related Event(s)
  events: [Event]
}

type Equipment {
  id: ID!
  name: String!
  # Shortened string identifier(s) for the equipment ---- For Shell PoC on the NPT tables this is the 'Cause' column
  codes: [String]
  supplier: Organization
  subsystem: Equipment
  source: R_SOURCE
}

# One or more causes of the problem ---- For Shell PoC, comes from the NPT tables 'Cause' column, which has codes. Codes will need definition from Shell.
type Cause {
  id: ID!
  name: String!
  definition: String
  source: R_SOURCE
}

type ProblemDefinition {
  id: ID!
  name: String!
  # Name of the detail kind, e.g. 'StuckPipeProblemDetail', that corresponds to the name of the ProblemDefinition.
  detailKindName: String
  # URL for additional, external information
  externalReference: String
  # Potential mechanisms that could contribute to or lead to the cause of the problem ---- For Shell PoC these would need to be inferred from comments
  mechanisms: [Mechanism]
  resolutions: [Event]
}

type Mechanism {
  id: ID!
  name: String!
  summary: String
  # URL for additional, external information
  externalReference: String
}

type StuckPipeProblemDetail {
  id: ID!
  name: String!
  depth: PhysicalQuantity
  jarForce: PhysicalQuantity
}

type LostCirculationProblemDetail {
  id: ID!
  name: String!
  depth: PhysicalQuantity
  volume: PhysicalQuantity
}

type KickProblemDetail {
  id: ID!
  name: String!
  depth: PhysicalQuantity
  volume: PhysicalQuantity
}

type FishingProblemDetail {
  id: ID!
  name: String!
  depth: PhysicalQuantity
}

type BallooningProblemDetail {
  id: ID!
  name: String!
  depth: PhysicalQuantity
  volume: PhysicalQuantity
}

type WaitingOnProblemDetail {
  id: ID!
  name: String!
  what: String
}

# For Shell PoC, each row of the Activity tables could be an Observation or an Activity (potentially even an Problem) so most fields are the same in both the Activity and Observation Kinds
type Observation {
  id: ID!
  name: String!
  # ID of the ObservationDefinition Kind instance for the given observation
  definition: ObservationDefinition!
  # ID of an individual Observation Detail instance; model currently has no Observation Details specified, but they could be added similar to Problem Details.  Requires a 'two-pass' query: once the Observation Definition is known, this ID would logically point to the the Detail Kind for the given Definition.
  detailInstance: ID
  # Allows for traversal to other, related Event(s)
  events: [Event]
}

type ObservationDefinition {
  id: ID!
  name: String!
  # ID of the detail kind, if any, that corresponds to the name of the ObservationDefinition; model currently has no Observation Details specified, but they could be added similar to Problem Details
  detailKindName: String
  # URL for additional, external information
  externalReference: String
}

# For Shell PoC, each row of the Activity tables could be an Observation or an Activity (potentially even an Problem) so most fields are the same in both the Activity and Observation Kinds
type Activity {
  id: ID!
  name: String!
  # ID of the ActivityDefinition Kind instance for the given activity
  definition: ActivityDefinition!
  # ID of an individual Activity Detail instance.  Requires a 'two-pass' query: once the Activity Definition is known, e.g. Tripping, then this ID would logically point to the TrippingActivityDetail Kind.
  detailInstance: ID
  # This is the length of the activity measured in hours. ---- For Shell PoC on the Activity tables this is 'Hours (hr)'.
  duration: PhysicalQuantity
  # Specific to Shell PoC, from Activity tables 'NPT Level' column.
  nptLevel: Int
  # Need clarification and code dictionary from Shell. Specific to Shell PoC, from Activity tables 'Phase' column.
  phase: String
  # Allows for traversal to other, related Event(s)
  events: [Event]
}

type ActivityDefinition {
  id: ID!
  name: String!
  # ID of the detail kind, e.g. 'TrippingActivityDetail', that corresponds to the name of the ActivityDefinition
  detailKindName: String
  # URL for additional, external information
  externalReference: String
}

type TrippingActivityDetail {
  id: ID!
  name: String!
  from: PhysicalQuantity
  to: PhysicalQuantity
}

type CirculatingActivityDetail {
  id: ID!
  name: String!
  numberOfCirculations: Float
  ECD: PhysicalQuantity
}

type DrillingActivityDetail {
  id: ID!
  name: String!
  from: PhysicalQuantity
  to: PhysicalQuantity
  holeSize: PhysicalQuantity
  # e.g. 'Rotating', 'Sliding'
  drillingMethod: String
}

type CementingActivityDetail {
  id: ID!
  name: String!
  topOfCement: PhysicalQuantity
  bottomOfCement: PhysicalQuantity
}

type LoggingActivityDetail {
  id: ID!
  name: String!
  topOfInterval: PhysicalQuantity
  bottomOfInterval: PhysicalQuantity
}

type PerforatingActivityDetail {
  id: ID!
  name: String!
  # Depth perforating started
  from: PhysicalQuantity
  # Depth perforating ended
  to: PhysicalQuantity
}

type TestingActivityDetail {
  id: ID!
  name: String!
  # e.g. 'Formation integrity test', 'Leak-off test'
  typeOfTest: String
  pressure: PhysicalQuantity
  timeHeld: PhysicalQuantity
}

type RiggingActivityDetail {
  id: ID!
  name: String!
  equipment: Equipment
}

type CasingActivityDetail {
  id: ID!
  name: String!
  casingSize: PhysicalQuantity
  holeSize: PhysicalQuantity
  from: PhysicalQuantity
  to: PhysicalQuantity
  weight: PhysicalQuantity
  grade: String
  linerTestPressure: PhysicalQuantity
  shoeTestPressure: PhysicalQuantity
  cementVolumePumped: PhysicalQuantity
}

type Documentation {
  id: ID!
  name: String!
  # Allows for traversal to other, related Event(s)
  events: [Event]
}

# *********
# Reference Files
# *********

type R_ADDITIVE_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_CEMENT_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_COMPLETION_METHOD  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_COMPLETION_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_DOCUMENT_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_DRILL_BIT_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_DRILL_TOOL_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_DRILLING_MEDIA  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_LINER_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_LITH_ROCK_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    rockType: String
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_LITHOLOGY  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_LOG_TOOL_TYPE  {
    id: ID!,
    name: String,
    type: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_PROPPANT_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_RIG_BLOWOUT_PREVENTER  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_RIG_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_WELL_CLASS  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_WELL_DRILL_OP_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_WELL_STATUS  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type R_WELL_TEST_TYPE  {
    id: ID!,
    name: String,
    ABBREVIATION: String,
    LONG_NAME: String,
    REMARK: String,
    SHORT_NAME: String,
    SOURCE: R_SOURCE
  }

type US_OFFSHORE_LEASE {
    id: ID!,
    name: String,
    AREA_CODE: String,
    BLOCK_NUM: String,
    LEASE_STATUS_CD: String,
    LEASE_EFF_DATE: Date,
    LEASE_EXPIR_DATE: Date,
    BLK_MAX_WTR_DPTH: Int,
    SOURCE: R_SOURCE
}