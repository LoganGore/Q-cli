# source: https://stable.knowledge.maana.io:8443/service/cli.test06/graphql
# timestamp: Thu Jul 12 2018 16:34:21 GMT-0700 (PDT)

input AddBotActionInput {
  name: String
  serviceName: String!
  serviceId: ID
  eventName: String
  mutationName: String
  queryName: String
  inputInstanceRef: InstanceRefInput
  outputInstanceRef: InstanceRefInput
}

"""Autogenerated input for adding instance of DrillingProblem"""
input AddDrillingProblemInput {
  id: ID
  name: String
  problemType: String
}

"""Autogenerated input for adding instance of DrillingReport"""
input AddDrillingReportInput {
  id: ID
  well: ID
  date: Date
  comment: String
  drillingProblem: ID
}

"""Autogenerated input for adding instance of ExpectedDrillingProblem"""
input AddExpectedDrillingProblemInput {
  id: ID
  probability: String
  drillingProblem: ID
}

"""Autogenerated input for adding instance of Location"""
input AddLocationInput {
  id: ID
  lat: Float
  long: Float
}

"""Autogenerated input for adding instance of NearbyWell"""
input AddNearbyWellInput {
  id: ID
  well: ID
  distance: String
}

"""Autogenerated input for adding instance of Well"""
input AddWellInput {
  id: ID
  name: String
  location: ID
}

enum AggregateOp {
  MIN
  MAX
  SUM
  COUNT
}

type BotAction {
  """io.maana.kind"""
  id: ID!
  name: String!

  """bookkeeping"""
  created: DateTime!
  lastUpdated: DateTime!
  status: BotActionStatus!
  progress: Float
  errors: [JSON!]

  """operation"""
  service: Service!
  eventName: String
  mutation: ServiceMutation
  query: ServiceQuery
  input: InstanceRef
  output: InstanceRef
}

type BotActionAddedEvent {
  id: ID!
  name: String!
  serviceName: String!
  serviceId: ID
  eventName: String
  mutationName: String
  queryName: String
  inputInstanceRef: InstanceRef
  outputInstanceRef: InstanceRef
}

enum BotActionStatus {
  PENDING
  IN_PROGRESS
  STOPPING
  STOPPED
  ERROR
  COMPLETE
}

type BotActionUpdatedEvent {
  id: ID!
  oldStatus: BotActionStatus!
  newStatus: BotActionStatus!
  progress: Float
  errors: [JSON!]
}

"""Checks date and returns input unchanged if valid"""
scalar Date

scalar DATE

scalar DateTime

scalar DATETIME

type DrillingProblem {
  id: ID!
  name: String
  problemType: String!
}

type DrillingReport {
  id: ID!
  well: Well!
  date: Date!
  comment: String!
  drillingProblem: DrillingProblem
}

type ExpectedDrillingProblem {
  id: ID!
  probability: String!
  drillingProblem: DrillingProblem!
}

type Field {
  """required"""
  id: ID!
  name: String!
  type: FieldType!

  """optional"""
  description: String
  modifiers: [FieldModifiers]
  typeKindId: ID

  """UI hints"""
  displayAs: [String]
  hide: Boolean
  autoFocus: Boolean
  readonly: Boolean

  """inferred"""
  kind: Kind
  acceptedFieldClassification: FieldClassification
}

type FieldClassification {
  id: ID!
  fieldId: ID!
  name: String!
  score: Float!
}

input FieldFilterInput {
  fieldId: ID
  fieldName: String
  op: String!
  value: FieldValueInput!
}

enum FieldModifiers {
  NONULL
  LIST
  NOIDX
}

input FieldProjectionInput {
  """
  one of the following is required - except in the case of count queries
  """
  fieldId: ID
  fieldName: String

  """optional if omitted outer query is used"""
  alias: String
  op: AggregateOp
}

enum FieldType {
  ID
  STRING
  INT
  FLOAT
  BOOLEAN
  DATE
  TIME
  DATETIME
  JSON
  KIND
}

type FieldValue {
  """Types"""
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  """List forms"""
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

input FieldValueInput {
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: DATE
  TIME: TIME
  DATETIME: DATETIME
  JSON: JSON
  KIND: ID
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [DATE]
  l_TIME: [TIME]
  l_DATETIME: [DATETIME]
  l_JSON: [JSON]
  l_KIND: [ID]
}

type Info {
  id: ID!
  name: String!
  description: String
}

type Instance {
  """required"""
  id: ID!

  """optional"""
  name: String
  kindId: ID!
  kind: Kind
  fieldIds: [ID]

  """rowKey: Int"""
  fieldValues: [FieldValue]

  """inferred"""
  linksFrom: [Link]
  linksTo: [Link]
}

type InstanceRef {
  """required"""
  id: ID!

  """- one of:"""
  kindId: ID
  kindName: String

  """optional"""
  name: String
  url: String

  """inferred"""
  kind: Kind
  instance: Instance
  innerKind: Kind
}

input InstanceRefInput {
  id: ID
  name: String
  kindId: ID
  kindName: String
  url: String
}

type InstanceSet {
  kindId: ID!
  kind: Kind!
  fieldIds: [ID]

  """rowKeys: [Int]"""
  records: [[FieldValue]]
}

scalar JSON

type Kind {
  """required"""
  id: ID!
  name: String!

  """optional"""
  serviceId: ID
  description: String
  thumbnailUrl: String
  isPublic: Boolean
  isManaged: Boolean
  isSystem: Boolean
  schema(includeDeleted: Boolean = false, fieldIds: [ID!], fieldNames: [String!], fieldKinds: [ID!]): [Field]
  nameField: ID

  """inferred"""
  relationsFrom: [Relation]
  relationsTo: [Relation]
  linksFrom: [Link]
  linksTo: [Link]
  service: Service
}

input KindQueryInput {
  """projected kind (one of the following is required)"""
  kindId: ID
  kindName: String
  serviceId: ID

  """optional alias for projection binding"""
  alias: String

  """projected fields"""
  projection: [FieldProjectionInput]

  """distinct Projected result"""
  distinct: Boolean

  """filters (where)"""
  fieldFilters: [FieldFilterInput]

  """conjunction (where)"""
  and: [KindQueryInput]

  """disjunction (where)"""
  or: [KindQueryInput]

  """join (if conjunction or disjunction)"""
  fromFieldId: ID
  fromFieldName: String
  toFieldId: ID
  toFieldName: String
  take: Int
}

type Link {
  """required"""
  id: ID!
  relation: Relation!

  """Optional to work around the case when either kind is deleted"""
  fromKind: Kind
  toKind: Kind

  """optional"""
  name: String
  weight: Float
  fromField: Field
  fromInstance: Instance
  fromOffset: String
  fromSpan: String
  toField: Field
  toInstance: Instance
  toOffset: String
  toSpan: String
}

type Location {
  id: ID!
  lat: Float!
  long: Float!
}

type Mutation {
  """Autogenerated mutation for adding single instance of Well"""
  addWell(input: AddWellInput!): ID

  """Autogenerated mutation for adding multiple instances of Well"""
  addWells(input: [AddWellInput]!): [ID]

  """Autogenerated mutation for updating single instance of Well"""
  updateWell(input: UpdateWellInput!): ID

  """Autogenerated mutation for updating multiple instance of Well"""
  updateWells(input: [UpdateWellInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Well"""
  deleteWell(id: ID!): Well

  """Autogenerated mutation for deleting multiple instance of Well"""
  deleteWells(ids: [ID!]): [Well]

  """Autogenerated mutation for adding single instance of Location"""
  addLocation(input: AddLocationInput!): ID

  """Autogenerated mutation for adding multiple instances of Location"""
  addLocations(input: [AddLocationInput]!): [ID]

  """Autogenerated mutation for updating single instance of Location"""
  updateLocation(input: UpdateLocationInput!): ID

  """Autogenerated mutation for updating multiple instance of Location"""
  updateLocations(input: [UpdateLocationInput]!): [ID]

  """Autogenerated mutation for deleting single instance of Location"""
  deleteLocation(id: ID!): Location

  """Autogenerated mutation for deleting multiple instance of Location"""
  deleteLocations(ids: [ID!]): [Location]

  """Autogenerated mutation for adding single instance of DrillingReport"""
  addDrillingReport(input: AddDrillingReportInput!): ID

  """
  Autogenerated mutation for adding multiple instances of DrillingReport
  """
  addDrillingReports(input: [AddDrillingReportInput]!): [ID]

  """Autogenerated mutation for updating single instance of DrillingReport"""
  updateDrillingReport(input: UpdateDrillingReportInput!): ID

  """
  Autogenerated mutation for updating multiple instance of DrillingReport
  """
  updateDrillingReports(input: [UpdateDrillingReportInput]!): [ID]

  """Autogenerated mutation for deleting single instance of DrillingReport"""
  deleteDrillingReport(id: ID!): DrillingReport

  """
  Autogenerated mutation for deleting multiple instance of DrillingReport
  """
  deleteDrillingReports(ids: [ID!]): [DrillingReport]

  """Autogenerated mutation for adding single instance of DrillingProblem"""
  addDrillingProblem(input: AddDrillingProblemInput!): ID

  """
  Autogenerated mutation for adding multiple instances of DrillingProblem
  """
  addDrillingProblems(input: [AddDrillingProblemInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of DrillingProblem
  """
  updateDrillingProblem(input: UpdateDrillingProblemInput!): ID

  """
  Autogenerated mutation for updating multiple instance of DrillingProblem
  """
  updateDrillingProblems(input: [UpdateDrillingProblemInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of DrillingProblem
  """
  deleteDrillingProblem(id: ID!): DrillingProblem

  """
  Autogenerated mutation for deleting multiple instance of DrillingProblem
  """
  deleteDrillingProblems(ids: [ID!]): [DrillingProblem]

  """
  Autogenerated mutation for adding single instance of ExpectedDrillingProblem
  """
  addExpectedDrillingProblem(input: AddExpectedDrillingProblemInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ExpectedDrillingProblem
  """
  addExpectedDrillingProblems(input: [AddExpectedDrillingProblemInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of ExpectedDrillingProblem
  """
  updateExpectedDrillingProblem(input: UpdateExpectedDrillingProblemInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ExpectedDrillingProblem
  """
  updateExpectedDrillingProblems(input: [UpdateExpectedDrillingProblemInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of ExpectedDrillingProblem
  """
  deleteExpectedDrillingProblem(id: ID!): ExpectedDrillingProblem

  """
  Autogenerated mutation for deleting multiple instance of ExpectedDrillingProblem
  """
  deleteExpectedDrillingProblems(ids: [ID!]): [ExpectedDrillingProblem]

  """Autogenerated mutation for adding single instance of NearbyWell"""
  addNearbyWell(input: AddNearbyWellInput!): ID

  """Autogenerated mutation for adding multiple instances of NearbyWell"""
  addNearbyWells(input: [AddNearbyWellInput]!): [ID]

  """Autogenerated mutation for updating single instance of NearbyWell"""
  updateNearbyWell(input: UpdateNearbyWellInput!): ID

  """Autogenerated mutation for updating multiple instance of NearbyWell"""
  updateNearbyWells(input: [UpdateNearbyWellInput]!): [ID]

  """Autogenerated mutation for deleting single instance of NearbyWell"""
  deleteNearbyWell(id: ID!): NearbyWell

  """Autogenerated mutation for deleting multiple instance of NearbyWell"""
  deleteNearbyWells(ids: [ID!]): [NearbyWell]
  addBotAction(input: AddBotActionInput!): ID
  runBotAction(id: ID!): BotActionStatus
  stopBotAction(id: ID!): BotActionStatus
  updateBotAction(input: UpdateBotActionInput!): BotActionStatus
}

type NearbyWell {
  id: ID!
  well: Well!
  distance: String!
}

type Query {
  """All instances of Well kind"""
  allWells(take: Int = 1000): [Well]

  """Get single instance of Well kind by ID"""
  well(id: ID!): Well

  """Get list of instance of Well kind by IDs"""
  wells(ids: [ID]!): [Well]

  """Get instances of Well kind based on one or more field filters"""
  wellFilter(filters: [FieldFilterInput]!, take: Int = 1000): [Well]

  """All instances of Location kind"""
  allLocations(take: Int = 1000): [Location]

  """Get single instance of Location kind by ID"""
  location(id: ID!): Location

  """Get list of instance of Location kind by IDs"""
  locations(ids: [ID]!): [Location]

  """Get instances of Location kind based on one or more field filters"""
  locationFilter(filters: [FieldFilterInput]!, take: Int = 1000): [Location]

  """All instances of DrillingReport kind"""
  allDrillingReports(take: Int = 1000): [DrillingReport]

  """Get single instance of DrillingReport kind by ID"""
  drillingReport(id: ID!): DrillingReport

  """Get list of instance of DrillingReport kind by IDs"""
  drillingReports(ids: [ID]!): [DrillingReport]

  """
  Get instances of DrillingReport kind based on one or more field filters
  """
  drillingReportFilter(filters: [FieldFilterInput]!, take: Int = 1000): [DrillingReport]

  """All instances of DrillingProblem kind"""
  allDrillingProblems(take: Int = 1000): [DrillingProblem]

  """Get single instance of DrillingProblem kind by ID"""
  drillingProblem(id: ID!): DrillingProblem

  """Get list of instance of DrillingProblem kind by IDs"""
  drillingProblems(ids: [ID]!): [DrillingProblem]

  """
  Get instances of DrillingProblem kind based on one or more field filters
  """
  drillingProblemFilter(filters: [FieldFilterInput]!, take: Int = 1000): [DrillingProblem]

  """All instances of ExpectedDrillingProblem kind"""
  allExpectedDrillingProblems(take: Int = 1000): [ExpectedDrillingProblem]

  """Get single instance of ExpectedDrillingProblem kind by ID"""
  expectedDrillingProblem(id: ID!): ExpectedDrillingProblem

  """Get list of instance of ExpectedDrillingProblem kind by IDs"""
  expectedDrillingProblems(ids: [ID]!): [ExpectedDrillingProblem]

  """
  Get instances of ExpectedDrillingProblem kind based on one or more field filters
  """
  expectedDrillingProblemFilter(filters: [FieldFilterInput]!, take: Int = 1000): [ExpectedDrillingProblem]

  """All instances of NearbyWell kind"""
  allNearbyWells(take: Int = 1000): [NearbyWell]

  """Get single instance of NearbyWell kind by ID"""
  nearbyWell(id: ID!): NearbyWell

  """Get list of instance of NearbyWell kind by IDs"""
  nearbyWells(ids: [ID]!): [NearbyWell]

  """Get instances of NearbyWell kind based on one or more field filters"""
  nearbyWellFilter(filters: [FieldFilterInput]!, take: Int = 1000): [NearbyWell]
  info: Info!
  botAction(id: ID!): BotAction
  botActions(ids: [ID!]!): [BotAction]
  allBotActions: [BotAction]

  """
  Returns kind by ID, regardless of whether kind is used by the service or not.
  Can only be used to find kind in a tenant of a service.
  OR
  Returns kind by name. If serviceId is omitted, will return kind of a current service/workspace,
  otherwise can be used to find a kind with specific name of a specific service (e.g. kind 'Workspace' of Portal Service)
  """
  kind(id: ID, name: String, serviceId: ID): Kind

  """
  Returns all kinds defined *in this service* (sic!).
  This includes managed kinds and kinds used by workspace/service
  """
  allKinds(take: Int): [Kind]

  """Kind Query"""
  query(input: KindQueryInput!): InstanceSet
  queryJSON(input: KindQueryInput!): JSON
}

type Relation {
  """required"""
  id: ID!
  name: String!

  """optional"""
  description: String
  undirected: Boolean
  weight: Float

  """inferred"""
  links: [Link]
}

type Service {
  """required"""
  id: ID!
  name: String!
  isSystem: Boolean!
  endpointUrl: String!

  """optional"""
  description: String
  subscriptionEndpointUrl: String
  thumbnailUrl: String
  tags: [String]
  status: Int
  lastChecked: Date
  instances: [ServiceInstance]
  isReadOnly: Boolean

  """inferred"""
  kinds: [Kind]
  queries: [ServiceQuery]
  mutations: [ServiceMutation]
  subscriptions: [ServiceSubscription]
}

type ServiceInstance {
  """required"""
  id: ID!
  dockerServiceName: String!
  hostName: String!
  desiredState: String!
  currentState: String!
}

type ServiceMutation {
  id: ID!
  name: String!
}

type ServiceQuery {
  id: ID!
  name: String!
}

type ServiceSubscription {
  id: ID!
  name: String!
}

type Subscription {
  botActionAdded: BotActionAddedEvent!
  botActionUpdated: BotActionUpdatedEvent!
}

scalar Time

scalar TIME

input UpdateBotActionInput {
  status: BotActionStatus!
  progress: Float
  error: JSON
}

"""Autogenerated input for updating instance of DrillingProblem"""
input UpdateDrillingProblemInput {
  id: ID!
  name: String
  problemType: String!
}

"""Autogenerated input for updating instance of DrillingReport"""
input UpdateDrillingReportInput {
  id: ID!
  well: ID!
  date: Date!
  comment: String!
  drillingProblem: ID
}

"""Autogenerated input for updating instance of ExpectedDrillingProblem"""
input UpdateExpectedDrillingProblemInput {
  id: ID!
  probability: String!
  drillingProblem: ID!
}

"""Autogenerated input for updating instance of Location"""
input UpdateLocationInput {
  id: ID!
  lat: Float!
  long: Float!
}

"""Autogenerated input for updating instance of NearbyWell"""
input UpdateNearbyWellInput {
  id: ID!
  well: ID!
  distance: String!
}

"""Autogenerated input for updating instance of Well"""
input UpdateWellInput {
  id: ID!
  name: String!
  location: ID!
}

type Well {
  id: ID!
  name: String!
  location: Location!
}
